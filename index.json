{
  "api/Amiquin.Bot.AmiquinHost.html": {
    "href": "api/Amiquin.Bot.AmiquinHost.html",
    "title": "Class AmiquinHost | Amiquin Documentation",
    "summary": "Class AmiquinHost Namespace Amiquin.Bot Assembly Amiquin.Bot.dll public class AmiquinHost : IHostedService Inheritance object AmiquinHost Implements IHostedService Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors AmiquinHost(IEventHandlerService, DiscordShardedClient, InteractionService, ILogger<AmiquinHost>, IOptions<BotOptions>, ICommandHandlerService, IServiceScopeFactory, IConfiguration, IOptions<ExternalOptions>, IJobService) public AmiquinHost(IEventHandlerService eventHandlerService, DiscordShardedClient discordClient, InteractionService interactionService, ILogger<AmiquinHost> logger, IOptions<BotOptions> botOptions, ICommandHandlerService commandHandlerService, IServiceScopeFactory serviceScopeFactory, IConfiguration configuration, IOptions<ExternalOptions> externalOptions, IJobService jobService) Parameters eventHandlerService IEventHandlerService discordClient DiscordShardedClient interactionService InteractionService logger ILogger<AmiquinHost> botOptions IOptions<BotOptions> commandHandlerService ICommandHandlerService serviceScopeFactory IServiceScopeFactory configuration IConfiguration externalOptions IOptions<ExternalOptions> jobService IJobService Methods StartAsync(CancellationToken) Triggered when the application host is ready to start the service. public Task StartAsync(CancellationToken cancellationToken) Parameters cancellationToken CancellationToken Indicates that the start process has been aborted. Returns Task A Task that represents the asynchronous Start operation. StopAsync(CancellationToken) Triggered when the application host is performing a graceful shutdown. public Task StopAsync(CancellationToken cancellationToken) Parameters cancellationToken CancellationToken Indicates that the shutdown process should no longer be graceful. Returns Task A Task that represents the asynchronous Stop operation."
  },
  "api/Amiquin.Bot.Commands.AdminCommands.html": {
    "href": "api/Amiquin.Bot.Commands.AdminCommands.html",
    "title": "Class AdminCommands | Amiquin Documentation",
    "summary": "Class AdminCommands Namespace Amiquin.Bot.Commands Assembly Amiquin.Bot.dll [Group(\"admin\", \"Admin commands\")] [RequireUserPermission(GuildPermission.ModerateMembers)] public class AdminCommands : InteractionModuleBase<ExtendedShardedInteractionContext>, IInteractionModuleBase Inheritance object InteractionModuleBase<ExtendedShardedInteractionContext> AdminCommands Implements IInteractionModuleBase Inherited Members InteractionModuleBase<ExtendedShardedInteractionContext>.AfterExecute(ICommandInfo) InteractionModuleBase<ExtendedShardedInteractionContext>.BeforeExecute(ICommandInfo) InteractionModuleBase<ExtendedShardedInteractionContext>.BeforeExecuteAsync(ICommandInfo) InteractionModuleBase<ExtendedShardedInteractionContext>.AfterExecuteAsync(ICommandInfo) InteractionModuleBase<ExtendedShardedInteractionContext>.OnModuleBuilding(InteractionService, ModuleInfo) InteractionModuleBase<ExtendedShardedInteractionContext>.Construct(ModuleBuilder, InteractionService) InteractionModuleBase<ExtendedShardedInteractionContext>.DeferAsync(bool, RequestOptions) InteractionModuleBase<ExtendedShardedInteractionContext>.RespondAsync(string, Embed[], bool, bool, AllowedMentions, RequestOptions, MessageComponent, Embed, PollProperties) InteractionModuleBase<ExtendedShardedInteractionContext>.RespondWithFileAsync(Stream, string, string, Embed[], bool, bool, AllowedMentions, MessageComponent, Embed, RequestOptions, PollProperties) InteractionModuleBase<ExtendedShardedInteractionContext>.RespondWithFileAsync(string, string, string, Embed[], bool, bool, AllowedMentions, MessageComponent, Embed, RequestOptions, PollProperties) InteractionModuleBase<ExtendedShardedInteractionContext>.RespondWithFileAsync(FileAttachment, string, Embed[], bool, bool, AllowedMentions, MessageComponent, Embed, RequestOptions, PollProperties) InteractionModuleBase<ExtendedShardedInteractionContext>.RespondWithFilesAsync(IEnumerable<FileAttachment>, string, Embed[], bool, bool, AllowedMentions, MessageComponent, Embed, RequestOptions, PollProperties) InteractionModuleBase<ExtendedShardedInteractionContext>.FollowupAsync(string, Embed[], bool, bool, AllowedMentions, RequestOptions, MessageComponent, Embed, PollProperties) InteractionModuleBase<ExtendedShardedInteractionContext>.FollowupWithFileAsync(Stream, string, string, Embed[], bool, bool, AllowedMentions, MessageComponent, Embed, RequestOptions, PollProperties) InteractionModuleBase<ExtendedShardedInteractionContext>.FollowupWithFileAsync(string, string, string, Embed[], bool, bool, AllowedMentions, MessageComponent, Embed, RequestOptions, PollProperties) InteractionModuleBase<ExtendedShardedInteractionContext>.FollowupWithFileAsync(FileAttachment, string, Embed[], bool, bool, AllowedMentions, MessageComponent, Embed, RequestOptions, PollProperties) InteractionModuleBase<ExtendedShardedInteractionContext>.FollowupWithFilesAsync(IEnumerable<FileAttachment>, string, Embed[], bool, bool, AllowedMentions, MessageComponent, Embed, RequestOptions, PollProperties) InteractionModuleBase<ExtendedShardedInteractionContext>.ReplyAsync(string, bool, Embed, RequestOptions, AllowedMentions, MessageReference, MessageComponent, ISticker[], Embed[], MessageFlags, PollProperties) InteractionModuleBase<ExtendedShardedInteractionContext>.GetOriginalResponseAsync(RequestOptions) InteractionModuleBase<ExtendedShardedInteractionContext>.ModifyOriginalResponseAsync(Action<MessageProperties>, RequestOptions) InteractionModuleBase<ExtendedShardedInteractionContext>.DeleteOriginalResponseAsync() InteractionModuleBase<ExtendedShardedInteractionContext>.RespondWithModalAsync(Modal, RequestOptions) InteractionModuleBase<ExtendedShardedInteractionContext>.RespondWithModalAsync<TModal>(string, TModal, RequestOptions, Action<ModalBuilder>) InteractionModuleBase<ExtendedShardedInteractionContext>.RespondWithModalAsync<TModal>(string, RequestOptions, Action<ModalBuilder>) InteractionModuleBase<ExtendedShardedInteractionContext>.RespondWithPremiumRequiredAsync(RequestOptions) InteractionModuleBase<ExtendedShardedInteractionContext>.Context object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors AdminCommands(ILogger<AdminCommands>, IServerMetaService, IToggleService, BotContextAccessor) public AdminCommands(ILogger<AdminCommands> logger, IServerMetaService serverMetaService, IToggleService toggleService, BotContextAccessor botContextAccessor) Parameters logger ILogger<AdminCommands> serverMetaService IServerMetaService toggleService IToggleService botContextAccessor BotContextAccessor Methods EmbedSayAsync(string, string, string, bool) [SlashCommand(\"embed-say\", \"Make the bot say something\", false, RunMode.Default)] public Task EmbedSayAsync(string title, string thumbnail, string message, bool withAuthor = false) Parameters title string thumbnail string message string withAuthor bool Returns Task NukeAsync(int) [SlashCommand(\"nuke\", \"Nuke the channel\", false, RunMode.Default)] public Task NukeAsync(int messageCount) Parameters messageCount int Returns Task SayAsync(string) [SlashCommand(\"say\", \"Make the bot say something\", false, RunMode.Default)] public Task SayAsync(string message) Parameters message string Returns Task ServerTogglesAsync() [SlashCommand(\"server-toggles\", \"List all server toggles\", false, RunMode.Default)] public Task ServerTogglesAsync() Returns Task SetServerPersonaAsync(string) [SlashCommand(\"set-server-persona\", \"Set the server persona\", false, RunMode.Default)] public Task SetServerPersonaAsync(string persona) Parameters persona string Returns Task ToggleAsync(string, bool, string?) [SlashCommand(\"toggle\", \"Toggle a feature\", false, RunMode.Default)] public Task ToggleAsync(string toggleName, bool isEnabled, string? description = null) Parameters toggleName string isEnabled bool description string Returns Task"
  },
  "api/Amiquin.Bot.Commands.DevCommands.html": {
    "href": "api/Amiquin.Bot.Commands.DevCommands.html",
    "title": "Class DevCommands | Amiquin Documentation",
    "summary": "Class DevCommands Namespace Amiquin.Bot.Commands Assembly Amiquin.Bot.dll [Group(\"dev\", \"Developer commands\")] [RequireTeam(new string[] { })] public class DevCommands : InteractionModuleBase<ExtendedShardedInteractionContext>, IInteractionModuleBase Inheritance object InteractionModuleBase<ExtendedShardedInteractionContext> DevCommands Implements IInteractionModuleBase Inherited Members InteractionModuleBase<ExtendedShardedInteractionContext>.AfterExecute(ICommandInfo) InteractionModuleBase<ExtendedShardedInteractionContext>.BeforeExecute(ICommandInfo) InteractionModuleBase<ExtendedShardedInteractionContext>.BeforeExecuteAsync(ICommandInfo) InteractionModuleBase<ExtendedShardedInteractionContext>.AfterExecuteAsync(ICommandInfo) InteractionModuleBase<ExtendedShardedInteractionContext>.OnModuleBuilding(InteractionService, ModuleInfo) InteractionModuleBase<ExtendedShardedInteractionContext>.Construct(ModuleBuilder, InteractionService) InteractionModuleBase<ExtendedShardedInteractionContext>.DeferAsync(bool, RequestOptions) InteractionModuleBase<ExtendedShardedInteractionContext>.RespondAsync(string, Embed[], bool, bool, AllowedMentions, RequestOptions, MessageComponent, Embed, PollProperties) InteractionModuleBase<ExtendedShardedInteractionContext>.RespondWithFileAsync(Stream, string, string, Embed[], bool, bool, AllowedMentions, MessageComponent, Embed, RequestOptions, PollProperties) InteractionModuleBase<ExtendedShardedInteractionContext>.RespondWithFileAsync(string, string, string, Embed[], bool, bool, AllowedMentions, MessageComponent, Embed, RequestOptions, PollProperties) InteractionModuleBase<ExtendedShardedInteractionContext>.RespondWithFileAsync(FileAttachment, string, Embed[], bool, bool, AllowedMentions, MessageComponent, Embed, RequestOptions, PollProperties) InteractionModuleBase<ExtendedShardedInteractionContext>.RespondWithFilesAsync(IEnumerable<FileAttachment>, string, Embed[], bool, bool, AllowedMentions, MessageComponent, Embed, RequestOptions, PollProperties) InteractionModuleBase<ExtendedShardedInteractionContext>.FollowupAsync(string, Embed[], bool, bool, AllowedMentions, RequestOptions, MessageComponent, Embed, PollProperties) InteractionModuleBase<ExtendedShardedInteractionContext>.FollowupWithFileAsync(Stream, string, string, Embed[], bool, bool, AllowedMentions, MessageComponent, Embed, RequestOptions, PollProperties) InteractionModuleBase<ExtendedShardedInteractionContext>.FollowupWithFileAsync(string, string, string, Embed[], bool, bool, AllowedMentions, MessageComponent, Embed, RequestOptions, PollProperties) InteractionModuleBase<ExtendedShardedInteractionContext>.FollowupWithFileAsync(FileAttachment, string, Embed[], bool, bool, AllowedMentions, MessageComponent, Embed, RequestOptions, PollProperties) InteractionModuleBase<ExtendedShardedInteractionContext>.FollowupWithFilesAsync(IEnumerable<FileAttachment>, string, Embed[], bool, bool, AllowedMentions, MessageComponent, Embed, RequestOptions, PollProperties) InteractionModuleBase<ExtendedShardedInteractionContext>.ReplyAsync(string, bool, Embed, RequestOptions, AllowedMentions, MessageReference, MessageComponent, ISticker[], Embed[], MessageFlags, PollProperties) InteractionModuleBase<ExtendedShardedInteractionContext>.GetOriginalResponseAsync(RequestOptions) InteractionModuleBase<ExtendedShardedInteractionContext>.ModifyOriginalResponseAsync(Action<MessageProperties>, RequestOptions) InteractionModuleBase<ExtendedShardedInteractionContext>.DeleteOriginalResponseAsync() InteractionModuleBase<ExtendedShardedInteractionContext>.RespondWithModalAsync(Modal, RequestOptions) InteractionModuleBase<ExtendedShardedInteractionContext>.RespondWithModalAsync<TModal>(string, TModal, RequestOptions, Action<ModalBuilder>) InteractionModuleBase<ExtendedShardedInteractionContext>.RespondWithModalAsync<TModal>(string, RequestOptions, Action<ModalBuilder>) InteractionModuleBase<ExtendedShardedInteractionContext>.RespondWithPremiumRequiredAsync(RequestOptions) InteractionModuleBase<ExtendedShardedInteractionContext>.Context object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors DevCommands(IChatCoreService, IMessageCacheService, IPersonaService, DiscordShardedClient, IVoiceService, IVoiceStateManager, IPersonaChatService, IToggleService) public DevCommands(IChatCoreService chatService, IMessageCacheService messageCacheService, IPersonaService personaService, DiscordShardedClient client, IVoiceService voiceService, IVoiceStateManager voiceStateManager, IPersonaChatService personaChatService, IToggleService toggleService) Parameters chatService IChatCoreService messageCacheService IMessageCacheService personaService IPersonaService client DiscordShardedClient voiceService IVoiceService voiceStateManager IVoiceStateManager personaChatService IPersonaChatService toggleService IToggleService Methods CreateNachoSquad() [SlashCommand(\"create-nacho-squad\", \"Create the NachoSquad role\", false, RunMode.Default)] public Task CreateNachoSquad() Returns Task JoinAsync() [SlashCommand(\"join\", \"Join a voice channel\", false, RunMode.Default)] public Task JoinAsync() Returns Task LeaveAsync() [SlashCommand(\"leave\", \"Leave a voice channel\", false, RunMode.Default)] public Task LeaveAsync() Returns Task PersonaAsync() [SlashCommand(\"persona\", \"Get persona message\", false, RunMode.Default)] public Task PersonaAsync() Returns Task PingAsync() [SlashCommand(\"ping\", \"Pong!\", false, RunMode.Default)] public Task PingAsync() Returns Task RestartAsync() [SlashCommand(\"restart\", \"Restart the bot\", false, RunMode.Default)] public Task RestartAsync() Returns Task SaySomethingAsync(string) [SlashCommand(\"say\", \"Amiquin will say something in the voice chat\", false, RunMode.Default)] [RequireToggle(\"EnableTTS\")] public Task SaySomethingAsync(string input) Parameters input string Returns Task ToggleAsync(string, bool, string?) [SlashCommand(\"toggle-feature\", \"Toggle a feature\", false, RunMode.Default)] public Task ToggleAsync(string toggleName, bool isEnabled, string? description = null) Parameters toggleName string isEnabled bool description string Returns Task VoiceChatAsync(string) [SlashCommand(\"voice-chat\", \"Amiquin will answer in a voice channel\", false, RunMode.Default)] [RequireToggle(\"EnableTTS\")] [RequireToggle(\"EnableChat\")] public Task VoiceChatAsync(string input) Parameters input string Returns Task VoiceDebugAsync() [SlashCommand(\"voicedebug\", \"debug\", false, RunMode.Default)] public Task VoiceDebugAsync() Returns Task"
  },
  "api/Amiquin.Bot.Commands.MainCommands.html": {
    "href": "api/Amiquin.Bot.Commands.MainCommands.html",
    "title": "Class MainCommands | Amiquin Documentation",
    "summary": "Class MainCommands Namespace Amiquin.Bot.Commands Assembly Amiquin.Bot.dll public class MainCommands : InteractionModuleBase<ExtendedShardedInteractionContext>, IInteractionModuleBase Inheritance object InteractionModuleBase<ExtendedShardedInteractionContext> MainCommands Implements IInteractionModuleBase Inherited Members InteractionModuleBase<ExtendedShardedInteractionContext>.AfterExecute(ICommandInfo) InteractionModuleBase<ExtendedShardedInteractionContext>.BeforeExecute(ICommandInfo) InteractionModuleBase<ExtendedShardedInteractionContext>.BeforeExecuteAsync(ICommandInfo) InteractionModuleBase<ExtendedShardedInteractionContext>.AfterExecuteAsync(ICommandInfo) InteractionModuleBase<ExtendedShardedInteractionContext>.OnModuleBuilding(InteractionService, ModuleInfo) InteractionModuleBase<ExtendedShardedInteractionContext>.Construct(ModuleBuilder, InteractionService) InteractionModuleBase<ExtendedShardedInteractionContext>.DeferAsync(bool, RequestOptions) InteractionModuleBase<ExtendedShardedInteractionContext>.RespondAsync(string, Embed[], bool, bool, AllowedMentions, RequestOptions, MessageComponent, Embed, PollProperties) InteractionModuleBase<ExtendedShardedInteractionContext>.RespondWithFileAsync(Stream, string, string, Embed[], bool, bool, AllowedMentions, MessageComponent, Embed, RequestOptions, PollProperties) InteractionModuleBase<ExtendedShardedInteractionContext>.RespondWithFileAsync(string, string, string, Embed[], bool, bool, AllowedMentions, MessageComponent, Embed, RequestOptions, PollProperties) InteractionModuleBase<ExtendedShardedInteractionContext>.RespondWithFileAsync(FileAttachment, string, Embed[], bool, bool, AllowedMentions, MessageComponent, Embed, RequestOptions, PollProperties) InteractionModuleBase<ExtendedShardedInteractionContext>.RespondWithFilesAsync(IEnumerable<FileAttachment>, string, Embed[], bool, bool, AllowedMentions, MessageComponent, Embed, RequestOptions, PollProperties) InteractionModuleBase<ExtendedShardedInteractionContext>.FollowupAsync(string, Embed[], bool, bool, AllowedMentions, RequestOptions, MessageComponent, Embed, PollProperties) InteractionModuleBase<ExtendedShardedInteractionContext>.FollowupWithFileAsync(Stream, string, string, Embed[], bool, bool, AllowedMentions, MessageComponent, Embed, RequestOptions, PollProperties) InteractionModuleBase<ExtendedShardedInteractionContext>.FollowupWithFileAsync(string, string, string, Embed[], bool, bool, AllowedMentions, MessageComponent, Embed, RequestOptions, PollProperties) InteractionModuleBase<ExtendedShardedInteractionContext>.FollowupWithFileAsync(FileAttachment, string, Embed[], bool, bool, AllowedMentions, MessageComponent, Embed, RequestOptions, PollProperties) InteractionModuleBase<ExtendedShardedInteractionContext>.FollowupWithFilesAsync(IEnumerable<FileAttachment>, string, Embed[], bool, bool, AllowedMentions, MessageComponent, Embed, RequestOptions, PollProperties) InteractionModuleBase<ExtendedShardedInteractionContext>.ReplyAsync(string, bool, Embed, RequestOptions, AllowedMentions, MessageReference, MessageComponent, ISticker[], Embed[], MessageFlags, PollProperties) InteractionModuleBase<ExtendedShardedInteractionContext>.GetOriginalResponseAsync(RequestOptions) InteractionModuleBase<ExtendedShardedInteractionContext>.ModifyOriginalResponseAsync(Action<MessageProperties>, RequestOptions) InteractionModuleBase<ExtendedShardedInteractionContext>.DeleteOriginalResponseAsync() InteractionModuleBase<ExtendedShardedInteractionContext>.RespondWithModalAsync(Modal, RequestOptions) InteractionModuleBase<ExtendedShardedInteractionContext>.RespondWithModalAsync<TModal>(string, TModal, RequestOptions, Action<ModalBuilder>) InteractionModuleBase<ExtendedShardedInteractionContext>.RespondWithModalAsync<TModal>(string, RequestOptions, Action<ModalBuilder>) InteractionModuleBase<ExtendedShardedInteractionContext>.RespondWithPremiumRequiredAsync(RequestOptions) InteractionModuleBase<ExtendedShardedInteractionContext>.Context object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors MainCommands(IPersonaChatService, IMessageCacheService) public MainCommands(IPersonaChatService chatService, IMessageCacheService messageCacheService) Parameters chatService IPersonaChatService messageCacheService IMessageCacheService Methods ChatAsync(string) [SlashCommand(\"chat\", \"Chat with the bot\", false, RunMode.Default)] [RequireToggle(\"EnableChat\")] public Task ChatAsync(string message) Parameters message string Returns Task InfoAsync() [SlashCommand(\"info\", \"Display bot information including version\", false, RunMode.Default)] public Task InfoAsync() Returns Task"
  },
  "api/Amiquin.Bot.Commands.html": {
    "href": "api/Amiquin.Bot.Commands.html",
    "title": "Namespace Amiquin.Bot.Commands | Amiquin Documentation",
    "summary": "Namespace Amiquin.Bot.Commands Classes AdminCommands DevCommands MainCommands"
  },
  "api/Amiquin.Bot.Configurators.InjectionConfigurator.html": {
    "href": "api/Amiquin.Bot.Configurators.InjectionConfigurator.html",
    "title": "Class InjectionConfigurator | Amiquin Documentation",
    "summary": "Class InjectionConfigurator Namespace Amiquin.Bot.Configurators Assembly Amiquin.Bot.dll public class InjectionConfigurator Inheritance object InjectionConfigurator Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors InjectionConfigurator(IConfiguration, IServiceCollection) public InjectionConfigurator(IConfiguration configuration, IServiceCollection services) Parameters configuration IConfiguration services IServiceCollection Methods AddAmiquinCore() public InjectionConfigurator AddAmiquinCore() Returns InjectionConfigurator AddOptions() public InjectionConfigurator AddOptions() Returns InjectionConfigurator AddRepositories() public InjectionConfigurator AddRepositories() Returns InjectionConfigurator AddRunnableJobs() public InjectionConfigurator AddRunnableJobs() Returns InjectionConfigurator AddServices() public InjectionConfigurator AddServices() Returns InjectionConfigurator"
  },
  "api/Amiquin.Bot.Configurators.html": {
    "href": "api/Amiquin.Bot.Configurators.html",
    "title": "Namespace Amiquin.Bot.Configurators | Amiquin Documentation",
    "summary": "Namespace Amiquin.Bot.Configurators Classes InjectionConfigurator"
  },
  "api/Amiquin.Bot.Console.Writer.html": {
    "href": "api/Amiquin.Bot.Console.Writer.html",
    "title": "Class Writer | Amiquin Documentation",
    "summary": "Class Writer Namespace Amiquin.Bot.Console Assembly Amiquin.Bot.dll public static class Writer Inheritance object Writer Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods WriteDictionaryData<K, V>(string, Dictionary<K, V>) public static void WriteDictionaryData<K, V>(string header, Dictionary<K, V> data) where K : notnull Parameters header string data Dictionary<K, V> Type Parameters K V WriteJsonData<T>(string, T) public static void WriteJsonData<T>(string header, T input) Parameters header string input T Type Parameters T WriteList(string, IEnumerable<string>) public static void WriteList(string header, IEnumerable<string> data) Parameters header string data IEnumerable<string> WriteLogo() public static void WriteLogo()"
  },
  "api/Amiquin.Bot.Console.html": {
    "href": "api/Amiquin.Bot.Console.html",
    "title": "Namespace Amiquin.Bot.Console | Amiquin Documentation",
    "summary": "Namespace Amiquin.Bot.Console Classes Writer"
  },
  "api/Amiquin.Bot.Preconditions.RequireServerMeta.html": {
    "href": "api/Amiquin.Bot.Preconditions.RequireServerMeta.html",
    "title": "Class RequireServerMeta | Amiquin Documentation",
    "summary": "Class RequireServerMeta Namespace Amiquin.Bot.Preconditions Assembly Amiquin.Bot.dll public class RequireServerMeta : PreconditionAttribute Inheritance object Attribute PreconditionAttribute RequireServerMeta Inherited Members PreconditionAttribute.Group PreconditionAttribute.ErrorMessage Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods CheckRequirementsAsync(IInteractionContext, ICommandInfo, IServiceProvider) Checks if the commandInfo command to be executed meets the precondition requirements. public override Task<PreconditionResult> CheckRequirementsAsync(IInteractionContext context, ICommandInfo commandInfo, IServiceProvider services) Parameters context IInteractionContext The context of the command. commandInfo ICommandInfo The command being executed. services IServiceProvider The service collection used for dependency injection. Returns Task<PreconditionResult>"
  },
  "api/Amiquin.Bot.Preconditions.RequireToggle.html": {
    "href": "api/Amiquin.Bot.Preconditions.RequireToggle.html",
    "title": "Class RequireToggle | Amiquin Documentation",
    "summary": "Class RequireToggle Namespace Amiquin.Bot.Preconditions Assembly Amiquin.Bot.dll public class RequireToggle : PreconditionAttribute Inheritance object Attribute PreconditionAttribute RequireToggle Inherited Members PreconditionAttribute.Group PreconditionAttribute.ErrorMessage Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors RequireToggle(string) public RequireToggle(string toggleName) Parameters toggleName string Properties ToggleName public string ToggleName { get; init; } Property Value string Methods CheckRequirementsAsync(IInteractionContext, ICommandInfo, IServiceProvider) Checks if the commandInfo command to be executed meets the precondition requirements. public override Task<PreconditionResult> CheckRequirementsAsync(IInteractionContext context, ICommandInfo commandInfo, IServiceProvider services) Parameters context IInteractionContext The context of the command. commandInfo ICommandInfo The command being executed. services IServiceProvider The service collection used for dependency injection. Returns Task<PreconditionResult>"
  },
  "api/Amiquin.Bot.Preconditions.html": {
    "href": "api/Amiquin.Bot.Preconditions.html",
    "title": "Namespace Amiquin.Bot.Preconditions | Amiquin Documentation",
    "summary": "Namespace Amiquin.Bot.Preconditions Classes RequireServerMeta RequireToggle"
  },
  "api/Amiquin.Bot.html": {
    "href": "api/Amiquin.Bot.html",
    "title": "Namespace Amiquin.Bot | Amiquin Documentation",
    "summary": "Namespace Amiquin.Bot Classes AmiquinHost"
  },
  "api/Amiquin.Core.Abstraction.BaseRepository-3.html": {
    "href": "api/Amiquin.Core.Abstraction.BaseRepository-3.html",
    "title": "Class BaseRepository<TKeyType, TEntity, TContext> | Amiquin Documentation",
    "summary": "Class BaseRepository<TKeyType, TEntity, TContext> Namespace Amiquin.Core.Abstraction Assembly Amiquin.Core.dll public class BaseRepository<TKeyType, TEntity, TContext> : IRepository<TKeyType, TEntity> where TKeyType : IConvertible where TEntity : DbModel<TKeyType>, new() where TContext : DbContext, new() Type Parameters TKeyType TEntity TContext Inheritance object BaseRepository<TKeyType, TEntity, TContext> Implements IRepository<TKeyType, TEntity> Derived QueryableBaseRepository<TKeyType, TEntity, TContext> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors BaseRepository(TContext) public BaseRepository(TContext context) Parameters context TContext Fields _context protected readonly TContext _context Field Value TContext Methods AddAsync(TEntity?) public virtual Task<bool> AddAsync(TEntity? entity) Parameters entity TEntity Returns Task<bool> AddRangeAsync(IEnumerable<TEntity>) public virtual Task<bool> AddRangeAsync(IEnumerable<TEntity> entities) Parameters entities IEnumerable<TEntity> Returns Task<bool> AsQueryable() public virtual IQueryable<TEntity> AsQueryable() Returns IQueryable<TEntity> GetAsync(TKeyType) public virtual Task<TEntity?> GetAsync(TKeyType id) Parameters id TKeyType Returns Task<TEntity> RemoveAsync(TKeyType) public virtual Task<bool> RemoveAsync(TKeyType id) Parameters id TKeyType Returns Task<bool> RemoveAsync(TEntity?) public virtual Task<bool> RemoveAsync(TEntity? entity) Parameters entity TEntity Returns Task<bool> RemoveRangeAsync(IEnumerable<TEntity>) public Task<bool> RemoveRangeAsync(IEnumerable<TEntity> entity) Parameters entity IEnumerable<TEntity> Returns Task<bool> SaveChangesAsync() public virtual Task SaveChangesAsync() Returns Task UpdateAsync(TEntity?) public virtual Task UpdateAsync(TEntity? entity) Parameters entity TEntity Returns Task UpdateRange(IEnumerable<TEntity>) public virtual Task UpdateRange(IEnumerable<TEntity> entities) Parameters entities IEnumerable<TEntity> Returns Task"
  },
  "api/Amiquin.Core.Abstraction.DbModel-1.html": {
    "href": "api/Amiquin.Core.Abstraction.DbModel-1.html",
    "title": "Class DbModel<TKey> | Amiquin Documentation",
    "summary": "Class DbModel<TKey> Namespace Amiquin.Core.Abstraction Assembly Amiquin.Core.dll public abstract class DbModel<TKey> where TKey : IConvertible Type Parameters TKey Inheritance object DbModel<TKey> Derived BotStatistics CommandLog Message NachoPack ServerMeta Toggle Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Id public virtual TKey Id { get; set; } Property Value TKey"
  },
  "api/Amiquin.Core.Abstraction.IQueryableRepository-2.html": {
    "href": "api/Amiquin.Core.Abstraction.IQueryableRepository-2.html",
    "title": "Interface IQueryableRepository<TKey, TEntity> | Amiquin Documentation",
    "summary": "Interface IQueryableRepository<TKey, TEntity> Namespace Amiquin.Core.Abstraction Assembly Amiquin.Core.dll public interface IQueryableRepository<TKey, TEntity> : IRepository<TKey, TEntity> where TKey : IConvertible where TEntity : DbModel<TKey> Type Parameters TKey TEntity Inherited Members IRepository<TKey, TEntity>.GetAsync(TKey) IRepository<TKey, TEntity>.AddAsync(TEntity) IRepository<TKey, TEntity>.AddRangeAsync(IEnumerable<TEntity>) IRepository<TKey, TEntity>.RemoveAsync(TKey) IRepository<TKey, TEntity>.RemoveAsync(TEntity) IRepository<TKey, TEntity>.RemoveRangeAsync(IEnumerable<TEntity>) IRepository<TKey, TEntity>.UpdateAsync(TEntity) IRepository<TKey, TEntity>.UpdateRange(IEnumerable<TEntity>) IRepository<TKey, TEntity>.SaveChangesAsync() Methods AsQueryable() IQueryable<TEntity> AsQueryable() Returns IQueryable<TEntity>"
  },
  "api/Amiquin.Core.Abstraction.IRepository-2.html": {
    "href": "api/Amiquin.Core.Abstraction.IRepository-2.html",
    "title": "Interface IRepository<Tkey, TEntity> | Amiquin Documentation",
    "summary": "Interface IRepository<Tkey, TEntity> Namespace Amiquin.Core.Abstraction Assembly Amiquin.Core.dll public interface IRepository<Tkey, TEntity> where Tkey : IConvertible where TEntity : DbModel<Tkey> Type Parameters Tkey TEntity Methods AddAsync(TEntity?) Task<bool> AddAsync(TEntity? entity) Parameters entity TEntity Returns Task<bool> AddRangeAsync(IEnumerable<TEntity>) Task<bool> AddRangeAsync(IEnumerable<TEntity> entities) Parameters entities IEnumerable<TEntity> Returns Task<bool> GetAsync(Tkey) Task<TEntity?> GetAsync(Tkey id) Parameters id Tkey Returns Task<TEntity> RemoveAsync(Tkey) Task<bool> RemoveAsync(Tkey id) Parameters id Tkey Returns Task<bool> RemoveAsync(TEntity?) Task<bool> RemoveAsync(TEntity? entity) Parameters entity TEntity Returns Task<bool> RemoveRangeAsync(IEnumerable<TEntity>) Task<bool> RemoveRangeAsync(IEnumerable<TEntity> entity) Parameters entity IEnumerable<TEntity> Returns Task<bool> SaveChangesAsync() Task SaveChangesAsync() Returns Task UpdateAsync(TEntity?) Task UpdateAsync(TEntity? entity) Parameters entity TEntity Returns Task UpdateRange(IEnumerable<TEntity>) Task UpdateRange(IEnumerable<TEntity> entities) Parameters entities IEnumerable<TEntity> Returns Task"
  },
  "api/Amiquin.Core.Abstraction.IRunnableJob.html": {
    "href": "api/Amiquin.Core.Abstraction.IRunnableJob.html",
    "title": "Interface IRunnableJob | Amiquin Documentation",
    "summary": "Interface IRunnableJob Namespace Amiquin.Core.Abstraction Assembly Amiquin.Core.dll public interface IRunnableJob Properties FrequencyInSeconds int FrequencyInSeconds { get; set; } Property Value int Methods RunAsync(IServiceScopeFactory, CancellationToken) Task RunAsync(IServiceScopeFactory serviceScopeFactory, CancellationToken cancellationToken) Parameters serviceScopeFactory IServiceScopeFactory cancellationToken CancellationToken Returns Task"
  },
  "api/Amiquin.Core.Abstraction.QueryableBaseRepository-3.html": {
    "href": "api/Amiquin.Core.Abstraction.QueryableBaseRepository-3.html",
    "title": "Class QueryableBaseRepository<TKeyType, TEntity, TContext> | Amiquin Documentation",
    "summary": "Class QueryableBaseRepository<TKeyType, TEntity, TContext> Namespace Amiquin.Core.Abstraction Assembly Amiquin.Core.dll public class QueryableBaseRepository<TKeyType, TEntity, TContext> : BaseRepository<TKeyType, TEntity, TContext>, IQueryableRepository<TKeyType, TEntity>, IRepository<TKeyType, TEntity> where TKeyType : IConvertible where TEntity : DbModel<TKeyType>, new() where TContext : DbContext, new() Type Parameters TKeyType TEntity TContext Inheritance object BaseRepository<TKeyType, TEntity, TContext> QueryableBaseRepository<TKeyType, TEntity, TContext> Implements IQueryableRepository<TKeyType, TEntity> IRepository<TKeyType, TEntity> Derived BotStatisticsRepository CommandLogRepository MessageRepository NachoRepository ServerMetaRepository ToggleRepository Inherited Members BaseRepository<TKeyType, TEntity, TContext>._context BaseRepository<TKeyType, TEntity, TContext>.AddAsync(TEntity) BaseRepository<TKeyType, TEntity, TContext>.AddRangeAsync(IEnumerable<TEntity>) BaseRepository<TKeyType, TEntity, TContext>.AsQueryable() BaseRepository<TKeyType, TEntity, TContext>.GetAsync(TKeyType) BaseRepository<TKeyType, TEntity, TContext>.RemoveAsync(TKeyType) BaseRepository<TKeyType, TEntity, TContext>.RemoveAsync(TEntity) BaseRepository<TKeyType, TEntity, TContext>.UpdateAsync(TEntity) BaseRepository<TKeyType, TEntity, TContext>.UpdateRange(IEnumerable<TEntity>) BaseRepository<TKeyType, TEntity, TContext>.SaveChangesAsync() BaseRepository<TKeyType, TEntity, TContext>.RemoveRangeAsync(IEnumerable<TEntity>) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors QueryableBaseRepository(TContext) public QueryableBaseRepository(TContext context) Parameters context TContext Methods AsQueryable() public override IQueryable<TEntity> AsQueryable() Returns IQueryable<TEntity>"
  },
  "api/Amiquin.Core.Abstraction.html": {
    "href": "api/Amiquin.Core.Abstraction.html",
    "title": "Namespace Amiquin.Core.Abstraction | Amiquin Documentation",
    "summary": "Namespace Amiquin.Core.Abstraction Classes BaseRepository<TKeyType, TEntity, TContext> DbModel<TKey> QueryableBaseRepository<TKeyType, TEntity, TContext> Interfaces IQueryableRepository<TKey, TEntity> IRepository<Tkey, TEntity> IRunnableJob"
  },
  "api/Amiquin.Core.Attributes.AnomifyAttribute.html": {
    "href": "api/Amiquin.Core.Attributes.AnomifyAttribute.html",
    "title": "Class AnomifyAttribute | Amiquin Documentation",
    "summary": "Class AnomifyAttribute Namespace Amiquin.Core.Attributes Assembly Amiquin.Core.dll [AttributeUsage(AttributeTargets.Property)] public class AnomifyAttribute : Attribute Inheritance object Attribute AnomifyAttribute Inherited Members Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString()"
  },
  "api/Amiquin.Core.Attributes.EphemeralAttribute.html": {
    "href": "api/Amiquin.Core.Attributes.EphemeralAttribute.html",
    "title": "Class EphemeralAttribute | Amiquin Documentation",
    "summary": "Class EphemeralAttribute Namespace Amiquin.Core.Attributes Assembly Amiquin.Core.dll [AttributeUsage(AttributeTargets.Method)] public class EphemeralAttribute : Attribute Inheritance object Attribute EphemeralAttribute Inherited Members Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString()"
  },
  "api/Amiquin.Core.Attributes.html": {
    "href": "api/Amiquin.Core.Attributes.html",
    "title": "Namespace Amiquin.Core.Attributes | Amiquin Documentation",
    "summary": "Namespace Amiquin.Core.Attributes Classes AnomifyAttribute EphemeralAttribute"
  },
  "api/Amiquin.Core.Cleaner.CleanerService.html": {
    "href": "api/Amiquin.Core.Cleaner.CleanerService.html",
    "title": "Class CleanerService | Amiquin Documentation",
    "summary": "Class CleanerService Namespace Amiquin.Core.Cleaner Assembly Amiquin.Core.dll Service implementation for cleaning and maintenance operations. Performs scheduled cleanup of caches and temporary data to maintain system performance. public class CleanerService : ICleanerService, IRunnableJob Inheritance object CleanerService Implements ICleanerService IRunnableJob Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties FrequencyInSeconds Gets or sets the frequency in seconds for running the cleanup job. Default is 3600 seconds (1 hour). public int FrequencyInSeconds { get; set; } Property Value int Methods RunAsync(IServiceScopeFactory, CancellationToken) Runs the cleanup operations asynchronously. public Task RunAsync(IServiceScopeFactory serviceScopeFactory, CancellationToken cancellationToken) Parameters serviceScopeFactory IServiceScopeFactory Factory for creating service scopes. cancellationToken CancellationToken Cancellation token for stopping the operation. Returns Task"
  },
  "api/Amiquin.Core.Cleaner.ICleanerService.html": {
    "href": "api/Amiquin.Core.Cleaner.ICleanerService.html",
    "title": "Interface ICleanerService | Amiquin Documentation",
    "summary": "Interface ICleanerService Namespace Amiquin.Core.Cleaner Assembly Amiquin.Core.dll Service interface for cleaning and maintenance operations. Extends IRunnableJob to provide scheduled cleanup functionality. public interface ICleanerService : IRunnableJob Inherited Members IRunnableJob.FrequencyInSeconds IRunnableJob.RunAsync(IServiceScopeFactory, CancellationToken)"
  },
  "api/Amiquin.Core.Cleaner.html": {
    "href": "api/Amiquin.Core.Cleaner.html",
    "title": "Namespace Amiquin.Core.Cleaner | Amiquin Documentation",
    "summary": "Namespace Amiquin.Core.Cleaner Classes CleanerService Service implementation for cleaning and maintenance operations. Performs scheduled cleanup of caches and temporary data to maintain system performance. Interfaces ICleanerService Service interface for cleaning and maintenance operations. Extends IRunnableJob to provide scheduled cleanup functionality."
  },
  "api/Amiquin.Core.Constants.AI.html": {
    "href": "api/Amiquin.Core.Constants.AI.html",
    "title": "Class Constants.AI | Amiquin Documentation",
    "summary": "Class Constants.AI Namespace Amiquin.Core Assembly Amiquin.Core.dll public class Constants.AI Inheritance object Constants.AI Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Fields Gpt3Model public const string Gpt3Model = \"gpt-3.5-turbo\" Field Value string Gpt4Model public const string Gpt4Model = \"gpt-4-turbo\" Field Value string Gpt4oMiniModel public const string Gpt4oMiniModel = \"gpt-4o-mini\" Field Value string Gpt4oModel public const string Gpt4oModel = \"gpt-4o-turbo\" Field Value string"
  },
  "api/Amiquin.Core.Constants.APIs.NewsApi.html": {
    "href": "api/Amiquin.Core.Constants.APIs.NewsApi.html",
    "title": "Class Constants.APIs.NewsApi | Amiquin Documentation",
    "summary": "Class Constants.APIs.NewsApi Namespace Amiquin.Core Assembly Amiquin.Core.dll public class Constants.APIs.NewsApi Inheritance object Constants.APIs.NewsApi Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Fields Category public const string Category = \"all_news\" Field Value string IncludeCard public const bool IncludeCard = true Field Value bool MaxLimit public const int MaxLimit = 5 Field Value int"
  },
  "api/Amiquin.Core.Constants.APIs.html": {
    "href": "api/Amiquin.Core.Constants.APIs.html",
    "title": "Class Constants.APIs | Amiquin Documentation",
    "summary": "Class Constants.APIs Namespace Amiquin.Core Assembly Amiquin.Core.dll public class Constants.APIs Inheritance object Constants.APIs Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString()"
  },
  "api/Amiquin.Core.Constants.CacheKeys.html": {
    "href": "api/Amiquin.Core.Constants.CacheKeys.html",
    "title": "Class Constants.CacheKeys | Amiquin Documentation",
    "summary": "Class Constants.CacheKeys Namespace Amiquin.Core Assembly Amiquin.Core.dll public class Constants.CacheKeys Inheritance object Constants.CacheKeys Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Fields ComputedPersonaMessageKey public const string ComputedPersonaMessageKey = \"ComputedPersona\" Field Value string CorePersonaMessageKey public const string CorePersonaMessageKey = \"Persona\" Field Value string GlobalToggles public const string GlobalToggles = \"GlobalToggles\" Field Value string JoinMessageKey public const string JoinMessageKey = \"ServerJoinMessage\" Field Value string ServerMeta public const string ServerMeta = \"ServerMeta\" Field Value string ServerToggles public const string ServerToggles = \"ServerToggles\" Field Value string ServerTogglesCreated public const string ServerTogglesCreated = \"ServerTogglesCreated\" Field Value string"
  },
  "api/Amiquin.Core.Constants.Emoji.html": {
    "href": "api/Amiquin.Core.Constants.Emoji.html",
    "title": "Class Constants.Emoji | Amiquin Documentation",
    "summary": "Class Constants.Emoji Namespace Amiquin.Core Assembly Amiquin.Core.dll public class Constants.Emoji Inheritance object Constants.Emoji Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Fields Amiquin public const string Amiquin = \"<:amiquin:1352444818814664705>\" Field Value string AmiquinR public const string AmiquinR = \"<:amiquinR:1352445227670962246>\" Field Value string Blank public const string Blank = \"<:blank:1352444144752001094>\" Field Value string Nacho public const string Nacho = \"<:nachoquin:1352442298583089264>\" Field Value string SlugParty public const string SlugParty = \"<a:slugparty:1352447645121118210>\" Field Value string"
  },
  "api/Amiquin.Core.Constants.Environment.html": {
    "href": "api/Amiquin.Core.Constants.Environment.html",
    "title": "Class Constants.Environment | Amiquin Documentation",
    "summary": "Class Constants.Environment Namespace Amiquin.Core Assembly Amiquin.Core.dll public class Constants.Environment Inheritance object Constants.Environment Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Fields BotName public const string BotName = \"AMQ_BOT_NAME\" Field Value string BotToken public const string BotToken = \"AMQ_BOT_TOKEN\" Field Value string BotVersion public const string BotVersion = \"AMQ_BOT_VERSION\" Field Value string DatabaseMode public const string DatabaseMode = \"AMQ_DATABASE_MODE\" Field Value string DbConnectionString public const string DbConnectionString = \"AMQ_DB_CONNECTION_STRING\" Field Value string DbName public const string DbName = \"AMQ_DB_NAME\" Field Value string DbRootPassword public const string DbRootPassword = \"AMQ_DB_ROOT_PASSWORD\" Field Value string DbUserName public const string DbUserName = \"AMQ_DB_USER\" Field Value string DbUserPassword public const string DbUserPassword = \"AMQ_DB_USER_PASSWORD\" Field Value string LogsPath public const string LogsPath = \"AMQ_LOGS_PATH\" Field Value string MessageFetchCount public const string MessageFetchCount = \"AMQ_MESSAGE_FETCH_COUNT\" Field Value string OpenAiKey public const string OpenAiKey = \"AMQ_OPEN_AI_KEY\" Field Value string PiperCommand public const string PiperCommand = \"AMQ_PIPER_COMMAND\" Field Value string PrintLogo public const string PrintLogo = \"AMQ_PRINT_LOGO\" Field Value string SQLitePath public const string SQLitePath = \"AMQ_SQLITE_PATH\" Field Value string TTSModelName public const string TTSModelName = \"AMQ_TTS_MODEL_NAME\" Field Value string"
  },
  "api/Amiquin.Core.Constants.Paths.html": {
    "href": "api/Amiquin.Core.Constants.Paths.html",
    "title": "Class Constants.Paths | Amiquin Documentation",
    "summary": "Class Constants.Paths Namespace Amiquin.Core Assembly Amiquin.Core.dll public class Constants.Paths Inheritance object Constants.Paths Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Fields Assets public static string Assets Field Value string TTSBaseOutputPath public static string TTSBaseOutputPath Field Value string TTSBasePath public static string TTSBasePath Field Value string"
  },
  "api/Amiquin.Core.Constants.PersonaKeywordsCache.html": {
    "href": "api/Amiquin.Core.Constants.PersonaKeywordsCache.html",
    "title": "Class Constants.PersonaKeywordsCache | Amiquin Documentation",
    "summary": "Class Constants.PersonaKeywordsCache Namespace Amiquin.Core Assembly Amiquin.Core.dll public class Constants.PersonaKeywordsCache Inheritance object Constants.PersonaKeywordsCache Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Fields Mood public const string Mood = \"[$Mood$]\" Field Value string Name public const string Name = \"[$Name$]\" Field Value string Version public const string Version = \"[$Version$]\" Field Value string"
  },
  "api/Amiquin.Core.Constants.ToggleNames.SystemExclusiveToggles.html": {
    "href": "api/Amiquin.Core.Constants.ToggleNames.SystemExclusiveToggles.html",
    "title": "Class Constants.ToggleNames.SystemExclusiveToggles | Amiquin Documentation",
    "summary": "Class Constants.ToggleNames.SystemExclusiveToggles Namespace Amiquin.Core Assembly Amiquin.Core.dll public class Constants.ToggleNames.SystemExclusiveToggles Inheritance object Constants.ToggleNames.SystemExclusiveToggles Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Fields EnableNews public const string EnableNews = \"EnableNews\" Field Value string"
  },
  "api/Amiquin.Core.Constants.ToggleNames.html": {
    "href": "api/Amiquin.Core.Constants.ToggleNames.html",
    "title": "Class Constants.ToggleNames | Amiquin Documentation",
    "summary": "Class Constants.ToggleNames Namespace Amiquin.Core Assembly Amiquin.Core.dll public class Constants.ToggleNames Inheritance object Constants.ToggleNames Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Fields EnableChat public const string EnableChat = \"EnableChat\" Field Value string EnableJoinMessage public const string EnableJoinMessage = \"EnableJoinMessage\" Field Value string EnableTTS public const string EnableTTS = \"EnableTTS\" Field Value string SystemExlusiveToggles public static List<string> SystemExlusiveToggles Field Value List<string> Toggles public static List<string> Toggles Field Value List<string>"
  },
  "api/Amiquin.Core.Constants.html": {
    "href": "api/Amiquin.Core.Constants.html",
    "title": "Class Constants | Amiquin Documentation",
    "summary": "Class Constants Namespace Amiquin.Core Assembly Amiquin.Core.dll public class Constants Inheritance object Constants Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString()"
  },
  "api/Amiquin.Core.DiscordExtensions.ExtendedShardedInteractionContext.html": {
    "href": "api/Amiquin.Core.DiscordExtensions.ExtendedShardedInteractionContext.html",
    "title": "Class ExtendedShardedInteractionContext | Amiquin Documentation",
    "summary": "Class ExtendedShardedInteractionContext Namespace Amiquin.Core.DiscordExtensions Assembly Amiquin.Core.dll public class ExtendedShardedInteractionContext : ShardedInteractionContext, IRouteMatchContainer, IInteractionContext, IDisposable, IAsyncDisposable Inheritance object SocketInteractionContext<SocketInteraction> ShardedInteractionContext<SocketInteraction> ShardedInteractionContext ExtendedShardedInteractionContext Implements IRouteMatchContainer IInteractionContext IDisposable IAsyncDisposable Inherited Members ShardedInteractionContext<SocketInteraction>.Client SocketInteractionContext<SocketInteraction>.SetSegmentMatches(IEnumerable<IRouteSegmentMatch>) SocketInteractionContext<SocketInteraction>.Guild SocketInteractionContext<SocketInteraction>.Channel SocketInteractionContext<SocketInteraction>.User SocketInteractionContext<SocketInteraction>.Interaction SocketInteractionContext<SocketInteraction>.SegmentMatches object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ExtendedShardedInteractionContext(DiscordShardedClient, SocketInteraction, AsyncServiceScope) public ExtendedShardedInteractionContext(DiscordShardedClient client, SocketInteraction interaction, AsyncServiceScope scope) Parameters client DiscordShardedClient interaction SocketInteraction scope AsyncServiceScope Properties AsyncScope public AsyncServiceScope AsyncScope { get; } Property Value AsyncServiceScope Methods Dispose() Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources. public void Dispose() Dispose(bool) protected virtual void Dispose(bool disposing) Parameters disposing bool DisposeAsync() Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources asynchronously. public ValueTask DisposeAsync() Returns ValueTask A task that represents the asynchronous dispose operation. DisposeAsyncCore() protected virtual ValueTask DisposeAsyncCore() Returns ValueTask ~ExtendedShardedInteractionContext() protected ~ExtendedShardedInteractionContext()"
  },
  "api/Amiquin.Core.DiscordExtensions.html": {
    "href": "api/Amiquin.Core.DiscordExtensions.html",
    "title": "Namespace Amiquin.Core.DiscordExtensions | Amiquin Documentation",
    "summary": "Namespace Amiquin.Core.DiscordExtensions Classes ExtendedShardedInteractionContext"
  },
  "api/Amiquin.Core.Exceptions.DatabaseNotImplementedException.html": {
    "href": "api/Amiquin.Core.Exceptions.DatabaseNotImplementedException.html",
    "title": "Class DatabaseNotImplementedException | Amiquin Documentation",
    "summary": "Class DatabaseNotImplementedException Namespace Amiquin.Core.Exceptions Assembly Amiquin.Core.dll public class DatabaseNotImplementedException : Exception, ISerializable Inheritance object Exception DatabaseNotImplementedException Implements ISerializable Inherited Members Exception.GetBaseException() Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState object.Equals(object) object.Equals(object, object) object.GetHashCode() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors DatabaseNotImplementedException() public DatabaseNotImplementedException() DatabaseNotImplementedException(string) public DatabaseNotImplementedException(string message) Parameters message string DatabaseNotImplementedException(string, Exception) public DatabaseNotImplementedException(string message, Exception inner) Parameters message string inner Exception"
  },
  "api/Amiquin.Core.Exceptions.html": {
    "href": "api/Amiquin.Core.Exceptions.html",
    "title": "Namespace Amiquin.Core.Exceptions | Amiquin Documentation",
    "summary": "Namespace Amiquin.Core.Exceptions Classes DatabaseNotImplementedException"
  },
  "api/Amiquin.Core.IRepositories.IBotStatisticsRepository.html": {
    "href": "api/Amiquin.Core.IRepositories.IBotStatisticsRepository.html",
    "title": "Interface IBotStatisticsRepository | Amiquin Documentation",
    "summary": "Interface IBotStatisticsRepository Namespace Amiquin.Core.IRepositories Assembly Amiquin.Core.dll public interface IBotStatisticsRepository : IQueryableRepository<string, BotStatistics>, IRepository<string, BotStatistics> Inherited Members IQueryableRepository<string, BotStatistics>.AsQueryable() IRepository<string, BotStatistics>.GetAsync(string) IRepository<string, BotStatistics>.AddAsync(BotStatistics) IRepository<string, BotStatistics>.AddRangeAsync(IEnumerable<BotStatistics>) IRepository<string, BotStatistics>.RemoveAsync(string) IRepository<string, BotStatistics>.RemoveAsync(BotStatistics) IRepository<string, BotStatistics>.RemoveRangeAsync(IEnumerable<BotStatistics>) IRepository<string, BotStatistics>.UpdateAsync(BotStatistics) IRepository<string, BotStatistics>.UpdateRange(IEnumerable<BotStatistics>) IRepository<string, BotStatistics>.SaveChangesAsync()"
  },
  "api/Amiquin.Core.IRepositories.ICommandLogRepository.html": {
    "href": "api/Amiquin.Core.IRepositories.ICommandLogRepository.html",
    "title": "Interface ICommandLogRepository | Amiquin Documentation",
    "summary": "Interface ICommandLogRepository Namespace Amiquin.Core.IRepositories Assembly Amiquin.Core.dll public interface ICommandLogRepository : IQueryableRepository<int, CommandLog>, IRepository<int, CommandLog> Inherited Members IQueryableRepository<int, CommandLog>.AsQueryable() IRepository<int, CommandLog>.GetAsync(int) IRepository<int, CommandLog>.AddAsync(CommandLog) IRepository<int, CommandLog>.AddRangeAsync(IEnumerable<CommandLog>) IRepository<int, CommandLog>.RemoveAsync(int) IRepository<int, CommandLog>.RemoveAsync(CommandLog) IRepository<int, CommandLog>.RemoveRangeAsync(IEnumerable<CommandLog>) IRepository<int, CommandLog>.UpdateAsync(CommandLog) IRepository<int, CommandLog>.UpdateRange(IEnumerable<CommandLog>) IRepository<int, CommandLog>.SaveChangesAsync()"
  },
  "api/Amiquin.Core.IRepositories.IMessageRepository.html": {
    "href": "api/Amiquin.Core.IRepositories.IMessageRepository.html",
    "title": "Interface IMessageRepository | Amiquin Documentation",
    "summary": "Interface IMessageRepository Namespace Amiquin.Core.IRepositories Assembly Amiquin.Core.dll public interface IMessageRepository : IQueryableRepository<string, Message>, IRepository<string, Message> Inherited Members IQueryableRepository<string, Message>.AsQueryable() IRepository<string, Message>.GetAsync(string) IRepository<string, Message>.AddAsync(Message) IRepository<string, Message>.AddRangeAsync(IEnumerable<Message>) IRepository<string, Message>.RemoveAsync(string) IRepository<string, Message>.RemoveAsync(Message) IRepository<string, Message>.RemoveRangeAsync(IEnumerable<Message>) IRepository<string, Message>.UpdateAsync(Message) IRepository<string, Message>.UpdateRange(IEnumerable<Message>) IRepository<string, Message>.SaveChangesAsync()"
  },
  "api/Amiquin.Core.IRepositories.INachoRepository.html": {
    "href": "api/Amiquin.Core.IRepositories.INachoRepository.html",
    "title": "Interface INachoRepository | Amiquin Documentation",
    "summary": "Interface INachoRepository Namespace Amiquin.Core.IRepositories Assembly Amiquin.Core.dll public interface INachoRepository : IQueryableRepository<int, NachoPack>, IRepository<int, NachoPack> Inherited Members IQueryableRepository<int, NachoPack>.AsQueryable() IRepository<int, NachoPack>.GetAsync(int) IRepository<int, NachoPack>.AddAsync(NachoPack) IRepository<int, NachoPack>.AddRangeAsync(IEnumerable<NachoPack>) IRepository<int, NachoPack>.RemoveAsync(int) IRepository<int, NachoPack>.RemoveAsync(NachoPack) IRepository<int, NachoPack>.RemoveRangeAsync(IEnumerable<NachoPack>) IRepository<int, NachoPack>.UpdateAsync(NachoPack) IRepository<int, NachoPack>.UpdateRange(IEnumerable<NachoPack>) IRepository<int, NachoPack>.SaveChangesAsync()"
  },
  "api/Amiquin.Core.IRepositories.IServerMetaRepository.html": {
    "href": "api/Amiquin.Core.IRepositories.IServerMetaRepository.html",
    "title": "Interface IServerMetaRepository | Amiquin Documentation",
    "summary": "Interface IServerMetaRepository Namespace Amiquin.Core.IRepositories Assembly Amiquin.Core.dll public interface IServerMetaRepository : IQueryableRepository<ulong, ServerMeta>, IRepository<ulong, ServerMeta> Inherited Members IQueryableRepository<ulong, ServerMeta>.AsQueryable() IRepository<ulong, ServerMeta>.GetAsync(ulong) IRepository<ulong, ServerMeta>.AddAsync(ServerMeta) IRepository<ulong, ServerMeta>.AddRangeAsync(IEnumerable<ServerMeta>) IRepository<ulong, ServerMeta>.RemoveAsync(ulong) IRepository<ulong, ServerMeta>.RemoveAsync(ServerMeta) IRepository<ulong, ServerMeta>.RemoveRangeAsync(IEnumerable<ServerMeta>) IRepository<ulong, ServerMeta>.UpdateAsync(ServerMeta) IRepository<ulong, ServerMeta>.UpdateRange(IEnumerable<ServerMeta>) IRepository<ulong, ServerMeta>.SaveChangesAsync()"
  },
  "api/Amiquin.Core.IRepositories.IToggleRepository.html": {
    "href": "api/Amiquin.Core.IRepositories.IToggleRepository.html",
    "title": "Interface IToggleRepository | Amiquin Documentation",
    "summary": "Interface IToggleRepository Namespace Amiquin.Core.IRepositories Assembly Amiquin.Core.dll public interface IToggleRepository : IQueryableRepository<string, Toggle>, IRepository<string, Toggle> Inherited Members IQueryableRepository<string, Toggle>.AsQueryable() IRepository<string, Toggle>.GetAsync(string) IRepository<string, Toggle>.AddAsync(Toggle) IRepository<string, Toggle>.AddRangeAsync(IEnumerable<Toggle>) IRepository<string, Toggle>.RemoveAsync(string) IRepository<string, Toggle>.RemoveAsync(Toggle) IRepository<string, Toggle>.RemoveRangeAsync(IEnumerable<Toggle>) IRepository<string, Toggle>.UpdateAsync(Toggle) IRepository<string, Toggle>.UpdateRange(IEnumerable<Toggle>) IRepository<string, Toggle>.SaveChangesAsync()"
  },
  "api/Amiquin.Core.IRepositories.html": {
    "href": "api/Amiquin.Core.IRepositories.html",
    "title": "Namespace Amiquin.Core.IRepositories | Amiquin Documentation",
    "summary": "Namespace Amiquin.Core.IRepositories Interfaces IBotStatisticsRepository ICommandLogRepository IMessageRepository INachoRepository IServerMetaRepository IToggleRepository"
  },
  "api/Amiquin.Core.Job.IJobService.html": {
    "href": "api/Amiquin.Core.Job.IJobService.html",
    "title": "Interface IJobService | Amiquin Documentation",
    "summary": "Interface IJobService Namespace Amiquin.Core.Job Assembly Amiquin.Core.dll public interface IJobService Methods CreateDynamicJob(AmiquinJob) bool CreateDynamicJob(AmiquinJob job) Parameters job AmiquinJob Returns bool DisposeAsync() ValueTask DisposeAsync() Returns ValueTask StartRunnableJobs() void StartRunnableJobs()"
  },
  "api/Amiquin.Core.Job.JobService.html": {
    "href": "api/Amiquin.Core.Job.JobService.html",
    "title": "Class JobService | Amiquin Documentation",
    "summary": "Class JobService Namespace Amiquin.Core.Job Assembly Amiquin.Core.dll public class JobService : IAsyncDisposable, IJobService Inheritance object JobService Implements IAsyncDisposable IJobService Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors JobService(ILogger<JobService>, IServiceScopeFactory) public JobService(ILogger<JobService> logger, IServiceScopeFactory serviceScopeFactory) Parameters logger ILogger<JobService> serviceScopeFactory IServiceScopeFactory Methods CreateDynamicJob(AmiquinJob) public bool CreateDynamicJob(AmiquinJob job) Parameters job AmiquinJob Returns bool DisposeAsync() Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources asynchronously. public ValueTask DisposeAsync() Returns ValueTask A task that represents the asynchronous dispose operation. StartRunnableJobs() public void StartRunnableJobs()"
  },
  "api/Amiquin.Core.Job.Models.AmiquinJob.html": {
    "href": "api/Amiquin.Core.Job.Models.AmiquinJob.html",
    "title": "Class AmiquinJob | Amiquin Documentation",
    "summary": "Class AmiquinJob Namespace Amiquin.Core.Job.Models Assembly Amiquin.Core.dll public class AmiquinJob Inheritance object AmiquinJob Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties CreatedAt public DateTime CreatedAt { get; set; } Property Value DateTime Description public string Description { get; set; } Property Value string GuildId public ulong GuildId { get; set; } Property Value ulong Id public string Id { get; set; } Property Value string Interval public TimeSpan Interval { get; set; } Property Value TimeSpan Name public string Name { get; set; } Property Value string Task public Func<IServiceScopeFactory, CancellationToken, Task> Task { get; set; } Property Value Func<IServiceScopeFactory, CancellationToken, Task> UpdatedAt public DateTime UpdatedAt { get; set; } Property Value DateTime"
  },
  "api/Amiquin.Core.Job.Models.html": {
    "href": "api/Amiquin.Core.Job.Models.html",
    "title": "Namespace Amiquin.Core.Job.Models | Amiquin Documentation",
    "summary": "Namespace Amiquin.Core.Job.Models Classes AmiquinJob"
  },
  "api/Amiquin.Core.Job.html": {
    "href": "api/Amiquin.Core.Job.html",
    "title": "Namespace Amiquin.Core.Job | Amiquin Documentation",
    "summary": "Namespace Amiquin.Core.Job Classes JobService Interfaces IJobService"
  },
  "api/Amiquin.Core.Models.BotStatistics.html": {
    "href": "api/Amiquin.Core.Models.BotStatistics.html",
    "title": "Class BotStatistics | Amiquin Documentation",
    "summary": "Class BotStatistics Namespace Amiquin.Core.Models Assembly Amiquin.Core.dll public class BotStatistics : DbModel<string> Inheritance object DbModel<string> BotStatistics Inherited Members DbModel<string>.Id object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties AvailableMemoryMB public float AvailableMemoryMB { get; set; } Property Value float AverageCommandExecutionTimeInMs public double AverageCommandExecutionTimeInMs { get; set; } Property Value double BotName public string BotName { get; set; } Property Value string CacheItems public int CacheItems { get; set; } Property Value int CpuUsage public double CpuUsage { get; set; } Property Value double CreatedDate public DateTime CreatedDate { get; set; } Property Value DateTime Latency public int Latency { get; set; } Property Value int ShardCount public int ShardCount { get; set; } Property Value int TotalChannelsCount public int TotalChannelsCount { get; set; } Property Value int TotalCommandsCount public int TotalCommandsCount { get; set; } Property Value int TotalErrorsCount public int TotalErrorsCount { get; set; } Property Value int TotalServersCount public int TotalServersCount { get; set; } Property Value int TotalUsersCount public int TotalUsersCount { get; set; } Property Value int UpTimeInSeconds public int UpTimeInSeconds { get; set; } Property Value int UsedMemoryMB public float UsedMemoryMB { get; set; } Property Value float UsedMemoryPercentage public float UsedMemoryPercentage { get; set; } Property Value float Version public string? Version { get; set; } Property Value string"
  },
  "api/Amiquin.Core.Models.CommandLog.html": {
    "href": "api/Amiquin.Core.Models.CommandLog.html",
    "title": "Class CommandLog | Amiquin Documentation",
    "summary": "Class CommandLog Namespace Amiquin.Core.Models Assembly Amiquin.Core.dll public class CommandLog : DbModel<int> Inheritance object DbModel<int> CommandLog Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Command public string Command { get; set; } Property Value string CommandDate public DateTime CommandDate { get; set; } Property Value DateTime Duration public int Duration { get; set; } Property Value int ErrorMessage public string? ErrorMessage { get; set; } Property Value string Id [DatabaseGenerated(DatabaseGeneratedOption.Identity)] public override int Id { get; set; } Property Value int IsSuccess public bool IsSuccess { get; set; } Property Value bool Server public ServerMeta? Server { get; set; } Property Value ServerMeta ServerId [ForeignKey(\"ServerId\")] public ulong ServerId { get; set; } Property Value ulong UserId public ulong UserId { get; set; } Property Value ulong Username public string Username { get; set; } Property Value string"
  },
  "api/Amiquin.Core.Models.Message.html": {
    "href": "api/Amiquin.Core.Models.Message.html",
    "title": "Class Message | Amiquin Documentation",
    "summary": "Class Message Namespace Amiquin.Core.Models Assembly Amiquin.Core.dll public class Message : DbModel<string> Inheritance object DbModel<string> Message Inherited Members DbModel<string>.Id object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties AuthorId public ulong AuthorId { get; set; } Property Value ulong Content public string Content { get; set; } Property Value string CreatedAt public DateTime CreatedAt { get; set; } Property Value DateTime GuildId public ulong GuildId { get; set; } Property Value ulong IsUser public bool IsUser { get; set; } Property Value bool Server public ServerMeta? Server { get; set; } Property Value ServerMeta ServerId [ForeignKey(\"ServerId\")] public ulong ServerId { get; set; } Property Value ulong"
  },
  "api/Amiquin.Core.Models.NachoPack.html": {
    "href": "api/Amiquin.Core.Models.NachoPack.html",
    "title": "Class NachoPack | Amiquin Documentation",
    "summary": "Class NachoPack Namespace Amiquin.Core.Models Assembly Amiquin.Core.dll public class NachoPack : DbModel<int> Inheritance object DbModel<int> NachoPack Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Id [DatabaseGenerated(DatabaseGeneratedOption.Identity)] public override int Id { get; set; } Property Value int NachoCount public int NachoCount { get; set; } Property Value int NachoReceivedDate public DateTime NachoReceivedDate { get; set; } Property Value DateTime Server public ServerMeta? Server { get; set; } Property Value ServerMeta ServerId [ForeignKey(\"ServerId\")] public ulong ServerId { get; set; } Property Value ulong UserId public ulong UserId { get; set; } Property Value ulong Username public string Username { get; set; } Property Value string"
  },
  "api/Amiquin.Core.Models.ServerMeta.html": {
    "href": "api/Amiquin.Core.Models.ServerMeta.html",
    "title": "Class ServerMeta | Amiquin Documentation",
    "summary": "Class ServerMeta Namespace Amiquin.Core.Models Assembly Amiquin.Core.dll public class ServerMeta : DbModel<ulong> Inheritance object DbModel<ulong> ServerMeta Inherited Members DbModel<ulong>.Id object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties CommandLogs public List<CommandLog>? CommandLogs { get; set; } Property Value List<CommandLog> CreatedAt public DateTime CreatedAt { get; set; } Property Value DateTime IsActive public bool IsActive { get; set; } Property Value bool LastUpdated public DateTime LastUpdated { get; set; } Property Value DateTime Messages public List<Message>? Messages { get; set; } Property Value List<Message> NachoPacks public List<NachoPack>? NachoPacks { get; set; } Property Value List<NachoPack> Persona public string Persona { get; set; } Property Value string ServerName public string ServerName { get; set; } Property Value string Toggles public List<Toggle>? Toggles { get; set; } Property Value List<Toggle>"
  },
  "api/Amiquin.Core.Models.Toggle.html": {
    "href": "api/Amiquin.Core.Models.Toggle.html",
    "title": "Class Toggle | Amiquin Documentation",
    "summary": "Class Toggle Namespace Amiquin.Core.Models Assembly Amiquin.Core.dll public class Toggle : DbModel<string> Inheritance object DbModel<string> Toggle Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties CreatedAt public DateTime CreatedAt { get; set; } Property Value DateTime Description public string Description { get; set; } Property Value string Id public override string Id { get; set; } Property Value string IsEnabled public bool IsEnabled { get; set; } Property Value bool Name public string Name { get; set; } Property Value string Server public ServerMeta? Server { get; set; } Property Value ServerMeta ServerId [ForeignKey(\"ServerId\")] public ulong ServerId { get; set; } Property Value ulong"
  },
  "api/Amiquin.Core.Models.ToggleScope.html": {
    "href": "api/Amiquin.Core.Models.ToggleScope.html",
    "title": "Enum ToggleScope | Amiquin Documentation",
    "summary": "Enum ToggleScope Namespace Amiquin.Core.Models Assembly Amiquin.Core.dll public enum ToggleScope Fields Global = 1 Server = 0"
  },
  "api/Amiquin.Core.Models.html": {
    "href": "api/Amiquin.Core.Models.html",
    "title": "Namespace Amiquin.Core.Models | Amiquin Documentation",
    "summary": "Namespace Amiquin.Core.Models Classes BotStatistics CommandLog Message NachoPack ServerMeta Toggle Enums ToggleScope"
  },
  "api/Amiquin.Core.Options.BotOptions.html": {
    "href": "api/Amiquin.Core.Options.BotOptions.html",
    "title": "Class BotOptions | Amiquin Documentation",
    "summary": "Class BotOptions Namespace Amiquin.Core.Options Assembly Amiquin.Core.dll public class BotOptions : IOption Inheritance object BotOptions Implements IOption Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Fields Bot public const string Bot = \"Bot\" Field Value string Properties BotName public string BotName { get; set; } Property Value string MaxTokens public int MaxTokens { get; set; } Property Value int MessageFetchCount public int MessageFetchCount { get; set; } Property Value int OpenAIKey public string OpenAIKey { get; set; } Property Value string Token public string Token { get; set; } Property Value string Version public string Version { get; set; } Property Value string"
  },
  "api/Amiquin.Core.Options.DatabaseOptions.html": {
    "href": "api/Amiquin.Core.Options.DatabaseOptions.html",
    "title": "Class DatabaseOptions | Amiquin Documentation",
    "summary": "Class DatabaseOptions Namespace Amiquin.Core.Options Assembly Amiquin.Core.dll public class DatabaseOptions : IOption Inheritance object DatabaseOptions Implements IOption Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Fields Database public const string Database = \"Database\" Field Value string Properties ConnectionString public string ConnectionString { get; set; } Property Value string LogsPath public string LogsPath { get; set; } Property Value string Mode public int Mode { get; set; } Property Value int SQLitePath public string SQLitePath { get; set; } Property Value string"
  },
  "api/Amiquin.Core.Options.ExternalOptions.html": {
    "href": "api/Amiquin.Core.Options.ExternalOptions.html",
    "title": "Class ExternalOptions | Amiquin Documentation",
    "summary": "Class ExternalOptions Namespace Amiquin.Core.Options Assembly Amiquin.Core.dll public class ExternalOptions : IOption Inheritance object ExternalOptions Implements IOption Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Fields External public const string External = \"External\" Field Value string Properties ModelName public string ModelName { get; set; } Property Value string NewsApiUrl public string NewsApiUrl { get; set; } Property Value string PiperCommand public string PiperCommand { get; set; } Property Value string"
  },
  "api/Amiquin.Core.Options.IOption.html": {
    "href": "api/Amiquin.Core.Options.IOption.html",
    "title": "Interface IOption | Amiquin Documentation",
    "summary": "Interface IOption Namespace Amiquin.Core.Options Assembly Amiquin.Core.dll public interface IOption"
  },
  "api/Amiquin.Core.Options.html": {
    "href": "api/Amiquin.Core.Options.html",
    "title": "Namespace Amiquin.Core.Options | Amiquin Documentation",
    "summary": "Namespace Amiquin.Core.Options Classes BotOptions DatabaseOptions ExternalOptions Interfaces IOption"
  },
  "api/Amiquin.Core.Services.ApiClients.INewsApiClient.html": {
    "href": "api/Amiquin.Core.Services.ApiClients.INewsApiClient.html",
    "title": "Interface INewsApiClient | Amiquin Documentation",
    "summary": "Interface INewsApiClient Namespace Amiquin.Core.Services.ApiClients Assembly Amiquin.Core.dll public interface INewsApiClient Methods GetNewsAsync() Task<NewsApiResponse?> GetNewsAsync() Returns Task<NewsApiResponse>"
  },
  "api/Amiquin.Core.Services.ApiClients.NewsApiClient.html": {
    "href": "api/Amiquin.Core.Services.ApiClients.NewsApiClient.html",
    "title": "Class NewsApiClient | Amiquin Documentation",
    "summary": "Class NewsApiClient Namespace Amiquin.Core.Services.ApiClients Assembly Amiquin.Core.dll public class NewsApiClient : INewsApiClient Inheritance object NewsApiClient Implements INewsApiClient Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors NewsApiClient(ILogger<NewsApiClient>, IHttpClientFactory) public NewsApiClient(ILogger<NewsApiClient> logger, IHttpClientFactory httpClientFactory) Parameters logger ILogger<NewsApiClient> httpClientFactory IHttpClientFactory Methods GetNewsAsync() public Task<NewsApiResponse?> GetNewsAsync() Returns Task<NewsApiResponse>"
  },
  "api/Amiquin.Core.Services.ApiClients.Responses.Data.html": {
    "href": "api/Amiquin.Core.Services.ApiClients.Responses.Data.html",
    "title": "Class Data | Amiquin Documentation",
    "summary": "Class Data Namespace Amiquin.Core.Services.ApiClients.Responses Assembly Amiquin.Core.dll public class Data Inheritance object Data Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties FeedType [JsonPropertyName(\"feed_type\")] public string? FeedType { get; set; } Property Value string MinNewsId [JsonPropertyName(\"min_news_id\")] public string? MinNewsId { get; set; } Property Value string NewsList [JsonPropertyName(\"news_list\")] public List<NewsList>? NewsList { get; set; } Property Value List<NewsList> ReloadRequired [JsonPropertyName(\"reload_required\")] public bool? ReloadRequired { get; set; } Property Value bool?"
  },
  "api/Amiquin.Core.Services.ApiClients.Responses.NewsApiResponse.html": {
    "href": "api/Amiquin.Core.Services.ApiClients.Responses.NewsApiResponse.html",
    "title": "Class NewsApiResponse | Amiquin Documentation",
    "summary": "Class NewsApiResponse Namespace Amiquin.Core.Services.ApiClients.Responses Assembly Amiquin.Core.dll public class NewsApiResponse Inheritance object NewsApiResponse Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Data [JsonPropertyName(\"data\")] public Data? Data { get; set; } Property Value Data Error [JsonPropertyName(\"error\")] public bool Error { get; set; } Property Value bool"
  },
  "api/Amiquin.Core.Services.ApiClients.Responses.NewsList.html": {
    "href": "api/Amiquin.Core.Services.ApiClients.Responses.NewsList.html",
    "title": "Class NewsList | Amiquin Documentation",
    "summary": "Class NewsList Namespace Amiquin.Core.Services.ApiClients.Responses Assembly Amiquin.Core.dll public class NewsList Inheritance object NewsList Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties FixedRank [JsonPropertyName(\"fixed_rank\")] public bool? FixedRank { get; set; } Property Value bool? HashId [JsonPropertyName(\"hash_id\")] public string? HashId { get; set; } Property Value string NewsObj [JsonPropertyName(\"news_obj\")] public NewsObj NewsObj { get; set; } Property Value NewsObj NewsType [JsonPropertyName(\"news_type\")] public string? NewsType { get; set; } Property Value string PScore [JsonPropertyName(\"p_score\")] public int? PScore { get; set; } Property Value int? PublisherInteractionMeta [JsonPropertyName(\"publisher_interaction_meta\")] public PublisherInteractionMeta PublisherInteractionMeta { get; set; } Property Value PublisherInteractionMeta Rank [JsonPropertyName(\"rank\")] public int? Rank { get; set; } Property Value int? ReadOverride [JsonPropertyName(\"read_override\")] public bool? ReadOverride { get; set; } Property Value bool? SourceUrl [JsonPropertyName(\"source_url\")] public string? SourceUrl { get; set; } Property Value string Type [JsonPropertyName(\"type\")] public string? Type { get; set; } Property Value string Version [JsonPropertyName(\"version\")] public int? Version { get; set; } Property Value int?"
  },
  "api/Amiquin.Core.Services.ApiClients.Responses.NewsObj.html": {
    "href": "api/Amiquin.Core.Services.ApiClients.Responses.NewsObj.html",
    "title": "Class NewsObj | Amiquin Documentation",
    "summary": "Class NewsObj Namespace Amiquin.Core.Services.ApiClients.Responses Assembly Amiquin.Core.dll public class NewsObj Inheritance object NewsObj Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties AuthorName [JsonPropertyName(\"author_name\")] public string? AuthorName { get; set; } Property Value string AutoPlayType [JsonPropertyName(\"auto_play_type\")] public string? AutoPlayType { get; set; } Property Value string BottomHeadline [JsonPropertyName(\"bottom_headline\")] public string? BottomHeadline { get; set; } Property Value string BottomPanelLink [JsonPropertyName(\"bottom_panel_link\")] public string? BottomPanelLink { get; set; } Property Value string BottomText [JsonPropertyName(\"bottom_text\")] public string? BottomText { get; set; } Property Value string BottomType [JsonPropertyName(\"bottom_type\")] public string? BottomType { get; set; } Property Value string CapsuleCampaign [JsonPropertyName(\"capsule_campaign\")] public string? CapsuleCampaign { get; set; } Property Value string CapsuleCustomCardId [JsonPropertyName(\"capsule_custom_card_id\")] public string? CapsuleCustomCardId { get; set; } Property Value string CapsuleCustomCardUrl [JsonPropertyName(\"capsule_custom_card_url\")] public string? CapsuleCustomCardUrl { get; set; } Property Value string CapsuleImageUrl [JsonPropertyName(\"capsule_image_url\")] public string? CapsuleImageUrl { get; set; } Property Value string CategoryNames [JsonPropertyName(\"category_names\")] public List<string?>? CategoryNames { get; set; } Property Value List<string> Content [JsonPropertyName(\"content\")] public string? Content { get; set; } Property Value string CountryCode [JsonPropertyName(\"country_code\")] public string? CountryCode { get; set; } Property Value string CreatedAt [JsonPropertyName(\"created_at\")] public long? CreatedAt { get; set; } Property Value long? CryptoCoinPreference [JsonPropertyName(\"crypto_coin_preference\")] public object? CryptoCoinPreference { get; set; } Property Value object DarkerFonts [JsonPropertyName(\"darker_fonts\")] public bool? DarkerFonts { get; set; } Property Value bool? DfpTags [JsonPropertyName(\"dfp_tags\")] public string? DfpTags { get; set; } Property Value string DontShowAd [JsonPropertyName(\"dont_show_ad\")] public bool? DontShowAd { get; set; } Property Value bool? FbLikeCount [JsonPropertyName(\"fb_like_count\")] public int? FbLikeCount { get; set; } Property Value int? FbObjectId [JsonPropertyName(\"fb_object_id\")] public string? FbObjectId { get; set; } Property Value string FullGalleryUrls [JsonPropertyName(\"full_gallery_urls\")] public List<object> FullGalleryUrls { get; set; } Property Value List<object> GalleryImageUrls [JsonPropertyName(\"gallery_image_urls\")] public List<object> GalleryImageUrls { get; set; } Property Value List<object> HashId [JsonPropertyName(\"hash_id\")] public string? HashId { get; set; } Property Value string ImageUrl [JsonPropertyName(\"image_url\")] public string? ImageUrl { get; set; } Property Value string Important [JsonPropertyName(\"important\")] public bool? Important { get; set; } Property Value bool? ImpressiveScore [JsonPropertyName(\"impressive_score\")] public double? ImpressiveScore { get; set; } Property Value double? IsMuted [JsonPropertyName(\"is_muted\")] public bool? IsMuted { get; set; } Property Value bool? IsOverlaySupported [JsonPropertyName(\"is_overlay_supported\")] public bool? IsOverlaySupported { get; set; } Property Value bool? IsProfileClickable [JsonPropertyName(\"is_profile_clickable\")] public bool? IsProfileClickable { get; set; } Property Value bool? IsSimilarFeedAvailable [JsonPropertyName(\"is_similar_feed_available\")] public bool? IsSimilarFeedAvailable { get; set; } Property Value bool? IsYoutubeVideo [JsonPropertyName(\"is_youtube_video\")] public object IsYoutubeVideo { get; set; } Property Value object Language [JsonPropertyName(\"language\")] public string? Language { get; set; } Property Value string NewsType [JsonPropertyName(\"news_type\")] public string? NewsType { get; set; } Property Value string OldHashId [JsonPropertyName(\"old_hash_id\")] public string? OldHashId { get; set; } Property Value string PollTenant [JsonPropertyName(\"poll_tenant\")] public string? PollTenant { get; set; } Property Value string PositionExpireTime [JsonPropertyName(\"position_expire_time\")] public DateTime? PositionExpireTime { get; set; } Property Value DateTime? PositionStartTime [JsonPropertyName(\"position_start_time\")] public DateTime? PositionStartTime { get; set; } Property Value DateTime? PublisherInfo [JsonPropertyName(\"publisher_info\")] public PublisherInfo PublisherInfo { get; set; } Property Value PublisherInfo PublisherInteractionMeta [JsonPropertyName(\"publisher_interaction_meta\")] public PublisherInteractionMeta PublisherInteractionMeta { get; set; } Property Value PublisherInteractionMeta RelevancyTags [JsonPropertyName(\"relevancy_tags\")] public List<string?>? RelevancyTags { get; set; } Property Value List<string> Score [JsonPropertyName(\"score\")] public int? Score { get; set; } Property Value int? ShortenedUrl [JsonPropertyName(\"shortened_url\")] public string? ShortenedUrl { get; set; } Property Value string ShowCapsuleImage [JsonPropertyName(\"show_capsule_image\")] public bool? ShowCapsuleImage { get; set; } Property Value bool? ShowInVideoFeedOnly [JsonPropertyName(\"show_in_video_feed_only\")] public bool? ShowInVideoFeedOnly { get; set; } Property Value bool? ShowInshortsBrandName [JsonPropertyName(\"show_inshorts_brand_name\")] public bool? ShowInshortsBrandName { get; set; } Property Value bool? ShowPublisherInfo [JsonPropertyName(\"show_publisher_info\")] public bool? ShowPublisherInfo { get; set; } Property Value bool? SimilarThreshold [JsonPropertyName(\"similar_threshold\")] public int? SimilarThreshold { get; set; } Property Value int? SourceName [JsonPropertyName(\"source_name\")] public string? SourceName { get; set; } Property Value string SourceUrl [JsonPropertyName(\"source_url\")] public string? SourceUrl { get; set; } Property Value string TargetedCity [JsonPropertyName(\"targeted_city\")] public List<object> TargetedCity { get; set; } Property Value List<object> Tenant [JsonPropertyName(\"tenant\")] public string? Tenant { get; set; } Property Value string Title [JsonPropertyName(\"title\")] public string? Title { get; set; } Property Value string Trackers [JsonPropertyName(\"trackers\")] public List<object> Trackers { get; set; } Property Value List<object> Version [JsonPropertyName(\"version\")] public int? Version { get; set; } Property Value int? VideoAudioType [JsonPropertyName(\"video_audio_type\")] public string? VideoAudioType { get; set; } Property Value string"
  },
  "api/Amiquin.Core.Services.ApiClients.Responses.PublisherInfo.html": {
    "href": "api/Amiquin.Core.Services.ApiClients.Responses.PublisherInfo.html",
    "title": "Class PublisherInfo | Amiquin Documentation",
    "summary": "Class PublisherInfo Namespace Amiquin.Core.Services.ApiClients.Responses Assembly Amiquin.Core.dll public class PublisherInfo Inheritance object PublisherInfo Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Name [JsonPropertyName(\"name\")] public string? Name { get; set; } Property Value string ProfileImageUrl [JsonPropertyName(\"profile_image_url\")] public string? ProfileImageUrl { get; set; } Property Value string SponsoredText [JsonPropertyName(\"sponsored_text\")] public string? SponsoredText { get; set; } Property Value string ThumbnailImageUrl [JsonPropertyName(\"thumbnail_image_url\")] public string? ThumbnailImageUrl { get; set; } Property Value string UserId [JsonPropertyName(\"user_id\")] public string? UserId { get; set; } Property Value string UserType [JsonPropertyName(\"user_type\")] public string? UserType { get; set; } Property Value string"
  },
  "api/Amiquin.Core.Services.ApiClients.Responses.PublisherInteractionMeta.html": {
    "href": "api/Amiquin.Core.Services.ApiClients.Responses.PublisherInteractionMeta.html",
    "title": "Class PublisherInteractionMeta | Amiquin Documentation",
    "summary": "Class PublisherInteractionMeta Namespace Amiquin.Core.Services.ApiClients.Responses Assembly Amiquin.Core.dll public class PublisherInteractionMeta Inheritance object PublisherInteractionMeta Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties IsPublisherFollowed [JsonPropertyName(\"is_publisher_followed\")] public bool? IsPublisherFollowed { get; set; } Property Value bool? ShowFollowButton [JsonPropertyName(\"show_follow_button\")] public bool? ShowFollowButton { get; set; } Property Value bool? UserId [JsonPropertyName(\"user_id\")] public string? UserId { get; set; } Property Value string"
  },
  "api/Amiquin.Core.Services.ApiClients.Responses.html": {
    "href": "api/Amiquin.Core.Services.ApiClients.Responses.html",
    "title": "Namespace Amiquin.Core.Services.ApiClients.Responses | Amiquin Documentation",
    "summary": "Namespace Amiquin.Core.Services.ApiClients.Responses Classes Data NewsApiResponse NewsList NewsObj PublisherInfo PublisherInteractionMeta"
  },
  "api/Amiquin.Core.Services.ApiClients.html": {
    "href": "api/Amiquin.Core.Services.ApiClients.html",
    "title": "Namespace Amiquin.Core.Services.ApiClients | Amiquin Documentation",
    "summary": "Namespace Amiquin.Core.Services.ApiClients Classes NewsApiClient Interfaces INewsApiClient"
  },
  "api/Amiquin.Core.Services.BotContext.BotContextAccessor.html": {
    "href": "api/Amiquin.Core.Services.BotContext.BotContextAccessor.html",
    "title": "Class BotContextAccessor | Amiquin Documentation",
    "summary": "Class BotContextAccessor Namespace Amiquin.Core.Services.BotContext Assembly Amiquin.Core.dll public class BotContextAccessor Inheritance object BotContextAccessor Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors BotContextAccessor() public BotContextAccessor() Fields BotName public string BotName Field Value string BotVersion public string BotVersion Field Value string Properties Context public ExtendedShardedInteractionContext? Context { get; } Property Value ExtendedShardedInteractionContext CreatedAt public DateTime CreatedAt { get; } Property Value DateTime FinishedAt public DateTime FinishedAt { get; } Property Value DateTime ServerId public ulong ServerId { get; } Property Value ulong ServerMeta public ServerMeta? ServerMeta { get; } Property Value ServerMeta Methods Finish() public void Finish() Initialize(ExtendedShardedInteractionContext, ServerMeta, IConfiguration) public void Initialize(ExtendedShardedInteractionContext context, ServerMeta serverMeta, IConfiguration config) Parameters context ExtendedShardedInteractionContext serverMeta ServerMeta config IConfiguration SetContext(ExtendedShardedInteractionContext) public void SetContext(ExtendedShardedInteractionContext context) Parameters context ExtendedShardedInteractionContext SetServerMeta(ServerMeta) public void SetServerMeta(ServerMeta serverMeta) Parameters serverMeta ServerMeta"
  },
  "api/Amiquin.Core.Services.BotContext.html": {
    "href": "api/Amiquin.Core.Services.BotContext.html",
    "title": "Namespace Amiquin.Core.Services.BotContext | Amiquin Documentation",
    "summary": "Namespace Amiquin.Core.Services.BotContext Classes BotContextAccessor"
  },
  "api/Amiquin.Core.Services.BotSession.BotSessionService.html": {
    "href": "api/Amiquin.Core.Services.BotSession.BotSessionService.html",
    "title": "Class BotSessionService | Amiquin Documentation",
    "summary": "Class BotSessionService Namespace Amiquin.Core.Services.BotSession Assembly Amiquin.Core.dll public class BotSessionService Inheritance object BotSessionService Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors BotSessionService(IConfiguration) public BotSessionService(IConfiguration config) Parameters config IConfiguration Properties BotName public string BotName { get; } Property Value string BotVersion public string BotVersion { get; } Property Value string CurrentUpTimeInSeconds public int CurrentUpTimeInSeconds { get; } Property Value int StartedAt public DateTime StartedAt { get; } Property Value DateTime Methods GetAvailableMemoryMBAsync() public Task<float> GetAvailableMemoryMBAsync() Returns Task<float> GetCurrentCpuUsageAsync() public Task<float> GetCurrentCpuUsageAsync() Returns Task<float> GetUsedMemoryMBAsync() public Task<float> GetUsedMemoryMBAsync() Returns Task<float> GetUsedMemoryPercentageAsync() public Task<float> GetUsedMemoryPercentageAsync() Returns Task<float>"
  },
  "api/Amiquin.Core.Services.BotSession.IPerformanceAnalyzer.html": {
    "href": "api/Amiquin.Core.Services.BotSession.IPerformanceAnalyzer.html",
    "title": "Interface IPerformanceAnalyzer | Amiquin Documentation",
    "summary": "Interface IPerformanceAnalyzer Namespace Amiquin.Core.Services.BotSession Assembly Amiquin.Core.dll public interface IPerformanceAnalyzer Methods GetApplicationMemoryUsagePercentageAsync() Task<float> GetApplicationMemoryUsagePercentageAsync() Returns Task<float> GetApplicationMemoryUsedMBAsync() Task<float> GetApplicationMemoryUsedMBAsync() Returns Task<float> GetAvailableMemoryMBAsync() Task<float> GetAvailableMemoryMBAsync() Returns Task<float> GetCpuUsageAsync() Task<float> GetCpuUsageAsync() Returns Task<float>"
  },
  "api/Amiquin.Core.Services.BotSession.PerformanceAnalyzerFactory.html": {
    "href": "api/Amiquin.Core.Services.BotSession.PerformanceAnalyzerFactory.html",
    "title": "Class PerformanceAnalyzerFactory | Amiquin Documentation",
    "summary": "Class PerformanceAnalyzerFactory Namespace Amiquin.Core.Services.BotSession Assembly Amiquin.Core.dll public static class PerformanceAnalyzerFactory Inheritance object PerformanceAnalyzerFactory Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Create() public static IPerformanceAnalyzer Create() Returns IPerformanceAnalyzer"
  },
  "api/Amiquin.Core.Services.BotSession.PerformanceAnalyzerLinux.html": {
    "href": "api/Amiquin.Core.Services.BotSession.PerformanceAnalyzerLinux.html",
    "title": "Class PerformanceAnalyzerLinux | Amiquin Documentation",
    "summary": "Class PerformanceAnalyzerLinux Namespace Amiquin.Core.Services.BotSession Assembly Amiquin.Core.dll public class PerformanceAnalyzerLinux : IPerformanceAnalyzer Inheritance object PerformanceAnalyzerLinux Implements IPerformanceAnalyzer Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods GetApplicationMemoryUsagePercentageAsync() public Task<float> GetApplicationMemoryUsagePercentageAsync() Returns Task<float> GetApplicationMemoryUsedMBAsync() public Task<float> GetApplicationMemoryUsedMBAsync() Returns Task<float> GetAvailableMemoryMBAsync() public Task<float> GetAvailableMemoryMBAsync() Returns Task<float> GetCpuUsageAsync() public Task<float> GetCpuUsageAsync() Returns Task<float>"
  },
  "api/Amiquin.Core.Services.BotSession.PerformanceAnalyzerWindows.html": {
    "href": "api/Amiquin.Core.Services.BotSession.PerformanceAnalyzerWindows.html",
    "title": "Class PerformanceAnalyzerWindows | Amiquin Documentation",
    "summary": "Class PerformanceAnalyzerWindows Namespace Amiquin.Core.Services.BotSession Assembly Amiquin.Core.dll public class PerformanceAnalyzerWindows : IPerformanceAnalyzer Inheritance object PerformanceAnalyzerWindows Implements IPerformanceAnalyzer Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors PerformanceAnalyzerWindows() public PerformanceAnalyzerWindows() Methods GetApplicationMemoryUsagePercentageAsync() public Task<float> GetApplicationMemoryUsagePercentageAsync() Returns Task<float> GetApplicationMemoryUsedMBAsync() public Task<float> GetApplicationMemoryUsedMBAsync() Returns Task<float> GetAvailableMemoryMBAsync() public Task<float> GetAvailableMemoryMBAsync() Returns Task<float> GetCpuUsageAsync() public Task<float> GetCpuUsageAsync() Returns Task<float>"
  },
  "api/Amiquin.Core.Services.BotSession.html": {
    "href": "api/Amiquin.Core.Services.BotSession.html",
    "title": "Namespace Amiquin.Core.Services.BotSession | Amiquin Documentation",
    "summary": "Namespace Amiquin.Core.Services.BotSession Classes BotSessionService PerformanceAnalyzerFactory PerformanceAnalyzerLinux PerformanceAnalyzerWindows Interfaces IPerformanceAnalyzer"
  },
  "api/Amiquin.Core.Services.Chat.ChatCoreService.html": {
    "href": "api/Amiquin.Core.Services.Chat.ChatCoreService.html",
    "title": "Class ChatCoreService | Amiquin Documentation",
    "summary": "Class ChatCoreService Namespace Amiquin.Core.Services.Chat Assembly Amiquin.Core.dll Service implementation for core chat operations using OpenAI models. Handles chat completions, message exchange, and semaphore-based concurrency control for chat instances. public class ChatCoreService : IChatCoreService Inheritance object ChatCoreService Implements IChatCoreService Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ChatCoreService(ILogger<ChatCoreService>, IMessageCacheService, ChatClient, IChatSemaphoreManager) Initializes a new instance of the ChatCoreService. public ChatCoreService(ILogger<ChatCoreService> logger, IMessageCacheService messageCacheService, ChatClient openAIClient, IChatSemaphoreManager chatSemaphoreManager) Parameters logger ILogger<ChatCoreService> Logger instance for recording service operations. messageCacheService IMessageCacheService Service for caching and managing messages. openAIClient ChatClient OpenAI chat client for AI model interactions. chatSemaphoreManager IChatSemaphoreManager Manager for handling chat operation synchronization. Methods ChatAsync(ulong, List<ChatMessage>, ChatMessage?) Performs a chat completion using the specified message history and optional persona. public Task<ChatCompletion> ChatAsync(ulong instanceId, List<ChatMessage> messageHistory, ChatMessage? personaMessage = null) Parameters instanceId ulong The unique identifier for the chat instance. messageHistory List<ChatMessage> The list of chat messages representing the conversation history. personaMessage ChatMessage Optional persona message to influence the AI's behavior. Returns Task<ChatCompletion> The chat completion response from the AI model. ExchangeMessageAsync(string, ChatMessage?, int) Exchanges a message with the AI model and returns the response. public Task<string> ExchangeMessageAsync(string message, ChatMessage? developerPersonaChatMessage = null, int tokenLimit = 1200) Parameters message string The message to send to the AI model. developerPersonaChatMessage ChatMessage Optional developer persona message for context. tokenLimit int The maximum number of tokens for the response. Default is 1200. Returns Task<string> The AI model's response as a string."
  },
  "api/Amiquin.Core.Services.Chat.ChatSemaphoreManager.html": {
    "href": "api/Amiquin.Core.Services.Chat.ChatSemaphoreManager.html",
    "title": "Class ChatSemaphoreManager | Amiquin Documentation",
    "summary": "Class ChatSemaphoreManager Namespace Amiquin.Core.Services.Chat Assembly Amiquin.Core.dll Manager implementation for handling semaphore-based synchronization for chat and voice operations. Uses concurrent dictionaries to manage semaphores per instance, ensuring thread-safe operations. public class ChatSemaphoreManager : IChatSemaphoreManager Inheritance object ChatSemaphoreManager Implements IChatSemaphoreManager Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ChatSemaphoreManager(ILogger<ChatSemaphoreManager>) Initializes a new instance of the ChatSemaphoreManager. public ChatSemaphoreManager(ILogger<ChatSemaphoreManager> logger) Parameters logger ILogger<ChatSemaphoreManager> Logger instance for recording manager operations. Methods GetOrCreateInstanceSemaphore(ulong) Gets or creates a semaphore for general instance operations for the specified instance. public SemaphoreSlim GetOrCreateInstanceSemaphore(ulong instanceId) Parameters instanceId ulong The unique identifier for the instance. Returns SemaphoreSlim A semaphore for controlling instance operation concurrency. GetOrCreateVoiceSemaphore(ulong) Gets or creates a semaphore for voice operations for the specified instance. public SemaphoreSlim GetOrCreateVoiceSemaphore(ulong instanceId) Parameters instanceId ulong The unique identifier for the instance. Returns SemaphoreSlim A semaphore for controlling voice operation concurrency."
  },
  "api/Amiquin.Core.Services.Chat.HistoryOptimizerService.html": {
    "href": "api/Amiquin.Core.Services.Chat.HistoryOptimizerService.html",
    "title": "Class HistoryOptimizerService | Amiquin Documentation",
    "summary": "Class HistoryOptimizerService Namespace Amiquin.Core.Services.Chat Assembly Amiquin.Core.dll public class HistoryOptimizerService : IHistoryOptimizerService Inheritance object HistoryOptimizerService Implements IHistoryOptimizerService Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors HistoryOptimizerService(ILogger<HistoryOptimizerService>, IChatCoreService, IOptions<BotOptions>) public HistoryOptimizerService(ILogger<HistoryOptimizerService> logger, IChatCoreService chatCoreService, IOptions<BotOptions> botOptions) Parameters logger ILogger<HistoryOptimizerService> chatCoreService IChatCoreService botOptions IOptions<BotOptions> Methods OptimizeMessageHistory(int, List<ChatMessage>, ChatMessage?) Optimizes message history by reducing token count while preserving important context. public Task<OptimizerResult> OptimizeMessageHistory(int currentTokenCount, List<ChatMessage> messages, ChatMessage? personaMessage = null) Parameters currentTokenCount int The current token count of the message history. messages List<ChatMessage> The list of chat messages to optimize. personaMessage ChatMessage Optional persona message to consider during optimization. Returns Task<OptimizerResult> An OptimizerResult containing the optimized message list and metadata. ShouldOptimizeMessageHistory(ChatTokenUsage) Determines whether message history optimization should be performed based on token usage. public bool ShouldOptimizeMessageHistory(ChatTokenUsage tokenUsage) Parameters tokenUsage ChatTokenUsage The current token usage statistics. Returns bool True if optimization should be performed; otherwise, false."
  },
  "api/Amiquin.Core.Services.Chat.IChatCoreService.html": {
    "href": "api/Amiquin.Core.Services.Chat.IChatCoreService.html",
    "title": "Interface IChatCoreService | Amiquin Documentation",
    "summary": "Interface IChatCoreService Namespace Amiquin.Core.Services.Chat Assembly Amiquin.Core.dll Service interface for core chat operations using AI models. Provides methods for chat completion and message exchange functionality. public interface IChatCoreService Methods ChatAsync(ulong, List<ChatMessage>, ChatMessage?) Performs a chat completion using the specified message history and optional persona. Task<ChatCompletion> ChatAsync(ulong instanceId, List<ChatMessage> messageHistory, ChatMessage? personaMessage = null) Parameters instanceId ulong The unique identifier for the chat instance. messageHistory List<ChatMessage> The list of chat messages representing the conversation history. personaMessage ChatMessage Optional persona message to influence the AI's behavior. Returns Task<ChatCompletion> The chat completion response from the AI model. ExchangeMessageAsync(string, ChatMessage?, int) Exchanges a message with the AI model and returns the response. Task<string> ExchangeMessageAsync(string message, ChatMessage? developerPersonaChatMessage = null, int tokenLimit = 1200) Parameters message string The message to send to the AI model. developerPersonaChatMessage ChatMessage Optional developer persona message for context. tokenLimit int The maximum number of tokens for the response. Default is 1200. Returns Task<string> The AI model's response as a string."
  },
  "api/Amiquin.Core.Services.Chat.IChatSemaphoreManager.html": {
    "href": "api/Amiquin.Core.Services.Chat.IChatSemaphoreManager.html",
    "title": "Interface IChatSemaphoreManager | Amiquin Documentation",
    "summary": "Interface IChatSemaphoreManager Namespace Amiquin.Core.Services.Chat Assembly Amiquin.Core.dll Manager interface for handling semaphore-based synchronization for chat and voice operations. Provides methods for creating and managing semaphores to prevent concurrent operations. public interface IChatSemaphoreManager Methods GetOrCreateInstanceSemaphore(ulong) Gets or creates a semaphore for general instance operations for the specified instance. SemaphoreSlim GetOrCreateInstanceSemaphore(ulong instanceId) Parameters instanceId ulong The unique identifier for the instance. Returns SemaphoreSlim A semaphore for controlling instance operation concurrency. GetOrCreateVoiceSemaphore(ulong) Gets or creates a semaphore for voice operations for the specified instance. SemaphoreSlim GetOrCreateVoiceSemaphore(ulong instanceId) Parameters instanceId ulong The unique identifier for the instance. Returns SemaphoreSlim A semaphore for controlling voice operation concurrency."
  },
  "api/Amiquin.Core.Services.Chat.IHistoryOptimizerService.html": {
    "href": "api/Amiquin.Core.Services.Chat.IHistoryOptimizerService.html",
    "title": "Interface IHistoryOptimizerService | Amiquin Documentation",
    "summary": "Interface IHistoryOptimizerService Namespace Amiquin.Core.Services.Chat Assembly Amiquin.Core.dll Service interface for optimizing chat message history to manage token usage. Provides methods for analyzing and reducing message history when token limits are approached. public interface IHistoryOptimizerService Methods OptimizeMessageHistory(int, List<ChatMessage>, ChatMessage?) Optimizes message history by reducing token count while preserving important context. Task<OptimizerResult> OptimizeMessageHistory(int currentTokenCount, List<ChatMessage> messages, ChatMessage? personaMessage = null) Parameters currentTokenCount int The current token count of the message history. messages List<ChatMessage> The list of chat messages to optimize. personaMessage ChatMessage Optional persona message to consider during optimization. Returns Task<OptimizerResult> An OptimizerResult containing the optimized message list and metadata. ShouldOptimizeMessageHistory(ChatTokenUsage) Determines whether message history optimization should be performed based on token usage. bool ShouldOptimizeMessageHistory(ChatTokenUsage tokenUsage) Parameters tokenUsage ChatTokenUsage The current token usage statistics. Returns bool True if optimization should be performed; otherwise, false."
  },
  "api/Amiquin.Core.Services.Chat.IPersonaChatService.html": {
    "href": "api/Amiquin.Core.Services.Chat.IPersonaChatService.html",
    "title": "Interface IPersonaChatService | Amiquin Documentation",
    "summary": "Interface IPersonaChatService Namespace Amiquin.Core.Services.Chat Assembly Amiquin.Core.dll public interface IPersonaChatService Methods ChatAsync(ulong, ulong, ulong, string) Task<string> ChatAsync(ulong instanceId, ulong userId, ulong botId, string message) Parameters instanceId ulong userId ulong botId ulong message string Returns Task<string> ExchangeMessageAsync(ulong, string) Task<string> ExchangeMessageAsync(ulong instanceId, string message) Parameters instanceId ulong message string Returns Task<string>"
  },
  "api/Amiquin.Core.Services.Chat.Model.OptimizerResult.html": {
    "href": "api/Amiquin.Core.Services.Chat.Model.OptimizerResult.html",
    "title": "Class OptimizerResult | Amiquin Documentation",
    "summary": "Class OptimizerResult Namespace Amiquin.Core.Services.Chat.Model Assembly Amiquin.Core.dll public class OptimizerResult Inheritance object OptimizerResult Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties MessagesSummary public string MessagesSummary { get; set; } Property Value string RemovedMessages public int RemovedMessages { get; set; } Property Value int"
  },
  "api/Amiquin.Core.Services.Chat.Model.html": {
    "href": "api/Amiquin.Core.Services.Chat.Model.html",
    "title": "Namespace Amiquin.Core.Services.Chat.Model | Amiquin Documentation",
    "summary": "Namespace Amiquin.Core.Services.Chat.Model Classes OptimizerResult"
  },
  "api/Amiquin.Core.Services.Chat.PersonaChatService.html": {
    "href": "api/Amiquin.Core.Services.Chat.PersonaChatService.html",
    "title": "Class PersonaChatService | Amiquin Documentation",
    "summary": "Class PersonaChatService Namespace Amiquin.Core.Services.Chat Assembly Amiquin.Core.dll public class PersonaChatService : IPersonaChatService Inheritance object PersonaChatService Implements IPersonaChatService Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors PersonaChatService(ILogger<PersonaChatService>, IChatCoreService, IPersonaService, IMessageCacheService, IHistoryOptimizerService, IOptions<BotOptions>) public PersonaChatService(ILogger<PersonaChatService> logger, IChatCoreService chatCoreService, IPersonaService personaService, IMessageCacheService messageCacheService, IHistoryOptimizerService historyOptimizerService, IOptions<BotOptions> botOptions) Parameters logger ILogger<PersonaChatService> chatCoreService IChatCoreService personaService IPersonaService messageCacheService IMessageCacheService historyOptimizerService IHistoryOptimizerService botOptions IOptions<BotOptions> Methods ChatAsync(ulong, ulong, ulong, string) public Task<string> ChatAsync(ulong instanceId, ulong userId, ulong botId, string message) Parameters instanceId ulong userId ulong botId ulong message string Returns Task<string> ExchangeMessageAsync(ulong, string) public Task<string> ExchangeMessageAsync(ulong instanceId, string message) Parameters instanceId ulong message string Returns Task<string>"
  },
  "api/Amiquin.Core.Services.Chat.Toggle.IToggleService.html": {
    "href": "api/Amiquin.Core.Services.Chat.Toggle.IToggleService.html",
    "title": "Interface IToggleService | Amiquin Documentation",
    "summary": "Interface IToggleService Namespace Amiquin.Core.Services.Chat.Toggle Assembly Amiquin.Core.dll Service interface for managing server toggle operations. Provides methods for creating, retrieving, updating toggle states and configurations. public interface IToggleService Methods CreateServerTogglesIfNotExistsAsync(ulong) Creates default toggles for a server if they don't already exist. Task CreateServerTogglesIfNotExistsAsync(ulong serverId) Parameters serverId ulong The Discord server ID to create toggles for. Returns Task GetTogglesByServerId(ulong) Retrieves all toggles for a specific server. Task<List<Toggle>> GetTogglesByServerId(ulong serverId) Parameters serverId ulong The Discord server ID to retrieve toggles for. Returns Task<List<Toggle>> A list of toggles for the specified server. IsEnabledAsync(ulong, string) Checks if a specific toggle is enabled for a server. Task<bool> IsEnabledAsync(ulong serverId, string toggleName) Parameters serverId ulong The Discord server ID to check the toggle for. toggleName string The name of the toggle to check. Returns Task<bool> True if the toggle is enabled; otherwise, false. SetServerToggleAsync(ulong, string, bool, string?) Sets the state of a specific toggle for a server. Task SetServerToggleAsync(ulong serverId, string toggleName, bool isEnabled, string? description = null) Parameters serverId ulong The Discord server ID to set the toggle for. toggleName string The name of the toggle to set. isEnabled bool Whether the toggle should be enabled or disabled. description string Optional description for the toggle. Returns Task SetServerTogglesBulkAsync(ulong, Dictionary<string, (bool IsEnabled, string? Description)>) Sets multiple toggles for a server in a single operation. Task SetServerTogglesBulkAsync(ulong serverId, Dictionary<string, (bool IsEnabled, string? Description)> toggles) Parameters serverId ulong The Discord server ID to set toggles for. toggles Dictionary<string, (bool IsEnabled, string Description)> Dictionary of toggle names with their enabled state and description. Returns Task UpdateAllTogglesAsync(string, bool, string?) Updates a specific toggle across all servers in the system. Task<bool> UpdateAllTogglesAsync(string toggleName, bool isEnabled, string? description = null) Parameters toggleName string The name of the toggle to update. isEnabled bool Whether the toggle should be enabled or disabled. description string Optional description for the toggle. Returns Task<bool> True if the operation was successful; otherwise, false."
  },
  "api/Amiquin.Core.Services.Chat.Toggle.ToggleService.html": {
    "href": "api/Amiquin.Core.Services.Chat.Toggle.ToggleService.html",
    "title": "Class ToggleService | Amiquin Documentation",
    "summary": "Class ToggleService Namespace Amiquin.Core.Services.Chat.Toggle Assembly Amiquin.Core.dll Service implementation for managing server toggle operations. Handles toggle state management, default toggle creation, and server-specific toggle configurations. public class ToggleService : IToggleService Inheritance object ToggleService Implements IToggleService Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ToggleService(ILogger<ToggleService>, IServerMetaService, IToggleRepository, IMemoryCache) Initializes a new instance of the ToggleService. public ToggleService(ILogger<ToggleService> logger, IServerMetaService serverMetaService, IToggleRepository toggleRepository, IMemoryCache memoryCache) Parameters logger ILogger<ToggleService> Logger instance for recording service operations. serverMetaService IServerMetaService Service for managing server metadata operations. toggleRepository IToggleRepository Repository for database operations on toggles. memoryCache IMemoryCache Memory cache for storing frequently accessed data. Methods CreateServerTogglesIfNotExistsAsync(ulong) Creates default toggles for a server if they don't already exist. public Task CreateServerTogglesIfNotExistsAsync(ulong serverId) Parameters serverId ulong The Discord server ID to create toggles for. Returns Task GetTogglesByServerId(ulong) Retrieves all toggles for a specific server. public Task<List<Toggle>> GetTogglesByServerId(ulong serverId) Parameters serverId ulong The Discord server ID to retrieve toggles for. Returns Task<List<Toggle>> A list of toggles for the specified server. IsEnabledAsync(ulong, string) Checks if a specific toggle is enabled for a server. public Task<bool> IsEnabledAsync(ulong serverId, string toggleName) Parameters serverId ulong The Discord server ID to check the toggle for. toggleName string The name of the toggle to check. Returns Task<bool> True if the toggle is enabled; otherwise, false. SetServerToggleAsync(ulong, string, bool, string?) Sets the state of a specific toggle for a server. public Task SetServerToggleAsync(ulong serverId, string toggleName, bool isEnabled, string? description = null) Parameters serverId ulong The Discord server ID to set the toggle for. toggleName string The name of the toggle to set. isEnabled bool Whether the toggle should be enabled or disabled. description string Optional description for the toggle. Returns Task SetServerTogglesBulkAsync(ulong, Dictionary<string, (bool IsEnabled, string? Description)>) Sets multiple toggles for a server in a single operation. public Task SetServerTogglesBulkAsync(ulong serverId, Dictionary<string, (bool IsEnabled, string? Description)> toggles) Parameters serverId ulong The Discord server ID to set toggles for. toggles Dictionary<string, (bool IsEnabled, string Description)> Dictionary of toggle names with their enabled state and description. Returns Task UpdateAllTogglesAsync(string, bool, string?) Updates a specific toggle across all servers in the system. public Task<bool> UpdateAllTogglesAsync(string toggleName, bool isEnabled, string? description = null) Parameters toggleName string The name of the toggle to update. isEnabled bool Whether the toggle should be enabled or disabled. description string Optional description for the toggle. Returns Task<bool> True if the operation was successful; otherwise, false."
  },
  "api/Amiquin.Core.Services.Chat.Toggle.html": {
    "href": "api/Amiquin.Core.Services.Chat.Toggle.html",
    "title": "Namespace Amiquin.Core.Services.Chat.Toggle | Amiquin Documentation",
    "summary": "Namespace Amiquin.Core.Services.Chat.Toggle Classes ToggleService Service implementation for managing server toggle operations. Handles toggle state management, default toggle creation, and server-specific toggle configurations. Interfaces IToggleService Service interface for managing server toggle operations. Provides methods for creating, retrieving, updating toggle states and configurations."
  },
  "api/Amiquin.Core.Services.Chat.html": {
    "href": "api/Amiquin.Core.Services.Chat.html",
    "title": "Namespace Amiquin.Core.Services.Chat | Amiquin Documentation",
    "summary": "Namespace Amiquin.Core.Services.Chat Classes ChatCoreService Service implementation for core chat operations using OpenAI models. Handles chat completions, message exchange, and semaphore-based concurrency control for chat instances. ChatSemaphoreManager Manager implementation for handling semaphore-based synchronization for chat and voice operations. Uses concurrent dictionaries to manage semaphores per instance, ensuring thread-safe operations. HistoryOptimizerService PersonaChatService Interfaces IChatCoreService Service interface for core chat operations using AI models. Provides methods for chat completion and message exchange functionality. IChatSemaphoreManager Manager interface for handling semaphore-based synchronization for chat and voice operations. Provides methods for creating and managing semaphores to prevent concurrent operations. IHistoryOptimizerService Service interface for optimizing chat message history to manage token usage. Provides methods for analyzing and reducing message history when token limits are approached. IPersonaChatService"
  },
  "api/Amiquin.Core.Services.CommandHandler.CommandHandlerService.html": {
    "href": "api/Amiquin.Core.Services.CommandHandler.CommandHandlerService.html",
    "title": "Class CommandHandlerService | Amiquin Documentation",
    "summary": "Class CommandHandlerService Namespace Amiquin.Core.Services.CommandHandler Assembly Amiquin.Core.dll Implementation of the ICommandHandlerService interface. Handles Discord bot commands and interactions. public class CommandHandlerService : ICommandHandlerService Inheritance object CommandHandlerService Implements ICommandHandlerService Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors CommandHandlerService(ILogger<ICommandHandlerService>, IServiceScopeFactory, IServiceProvider, DiscordShardedClient, InteractionService) Initializes a new instance of the CommandHandlerService class. public CommandHandlerService(ILogger<ICommandHandlerService> logger, IServiceScopeFactory scopeFactory, IServiceProvider serviceProvider, DiscordShardedClient discordClient, InteractionService interactionService) Parameters logger ILogger<ICommandHandlerService> The logger for this service. scopeFactory IServiceScopeFactory The factory for creating service scopes. serviceProvider IServiceProvider The service provider. discordClient DiscordShardedClient The Discord sharded client. interactionService InteractionService The interaction service for handling Discord interactions. Properties Commands Gets a read-only collection of all registered slash commands. public IReadOnlyCollection<SlashCommandInfo> Commands { get; } Property Value IReadOnlyCollection<SlashCommandInfo> EphemeralCommands Gets a read-only collection of command names that should be handled as ephemeral (visible only to the user). public IReadOnlyCollection<string> EphemeralCommands { get; } Property Value IReadOnlyCollection<string> Methods HandleCommandAsync(SocketInteraction) Handles incoming command interactions from Discord. public Task HandleCommandAsync(SocketInteraction interaction) Parameters interaction SocketInteraction The socket interaction to handle. Returns Task HandleSlashCommandExecutedAsync(SlashCommandInfo, IInteractionContext, IResult) Handles the completion of slash command execution. public Task HandleSlashCommandExecutedAsync(SlashCommandInfo slashCommandInfo, IInteractionContext interactionContext, IResult result) Parameters slashCommandInfo SlashCommandInfo Information about the executed slash command. interactionContext IInteractionContext The context of the interaction. result IResult The result of the command execution. Returns Task InitializeAsync() Initializes the command handler service and registers commands. public Task InitializeAsync() Returns Task"
  },
  "api/Amiquin.Core.Services.CommandHandler.ICommandHandlerService.html": {
    "href": "api/Amiquin.Core.Services.CommandHandler.ICommandHandlerService.html",
    "title": "Interface ICommandHandlerService | Amiquin Documentation",
    "summary": "Interface ICommandHandlerService Namespace Amiquin.Core.Services.CommandHandler Assembly Amiquin.Core.dll Service interface for handling Discord bot commands and interactions. Provides methods for command initialization, execution, and management. public interface ICommandHandlerService Properties Commands Gets a read-only collection of all registered slash commands. IReadOnlyCollection<SlashCommandInfo> Commands { get; } Property Value IReadOnlyCollection<SlashCommandInfo> EphemeralCommands Gets a read-only collection of command names that should be handled as ephemeral (visible only to the user). IReadOnlyCollection<string> EphemeralCommands { get; } Property Value IReadOnlyCollection<string> Methods HandleCommandAsync(SocketInteraction) Handles incoming command interactions from Discord. Task HandleCommandAsync(SocketInteraction interaction) Parameters interaction SocketInteraction The socket interaction to handle. Returns Task HandleSlashCommandExecutedAsync(SlashCommandInfo, IInteractionContext, IResult) Handles the completion of slash command execution. Task HandleSlashCommandExecutedAsync(SlashCommandInfo slashCommandInfo, IInteractionContext interactionContext, IResult result) Parameters slashCommandInfo SlashCommandInfo Information about the executed slash command. interactionContext IInteractionContext The context of the interaction. result IResult The result of the command execution. Returns Task InitializeAsync() Initializes the command handler service and registers commands. Task InitializeAsync() Returns Task"
  },
  "api/Amiquin.Core.Services.CommandHandler.html": {
    "href": "api/Amiquin.Core.Services.CommandHandler.html",
    "title": "Namespace Amiquin.Core.Services.CommandHandler | Amiquin Documentation",
    "summary": "Namespace Amiquin.Core.Services.CommandHandler Classes CommandHandlerService Implementation of the ICommandHandlerService interface. Handles Discord bot commands and interactions. Interfaces ICommandHandlerService Service interface for handling Discord bot commands and interactions. Provides methods for command initialization, execution, and management."
  },
  "api/Amiquin.Core.Services.EventHandler.EventHandlerService.html": {
    "href": "api/Amiquin.Core.Services.EventHandler.EventHandlerService.html",
    "title": "Class EventHandlerService | Amiquin Documentation",
    "summary": "Class EventHandlerService Namespace Amiquin.Core.Services.EventHandler Assembly Amiquin.Core.dll Implementation of the IEventHandlerService interface. Handles Discord bot events and interactions. public class EventHandlerService : IEventHandlerService Inheritance object EventHandlerService Implements IEventHandlerService Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors EventHandlerService(ILogger<EventHandlerService>, ICommandHandlerService, IServiceScopeFactory) Initializes a new instance of the EventHandlerService class. public EventHandlerService(ILogger<EventHandlerService> logger, ICommandHandlerService commandHandlerService, IServiceScopeFactory serviceScopeFactory) Parameters logger ILogger<EventHandlerService> The logger for this service. commandHandlerService ICommandHandlerService The service for handling commands. serviceScopeFactory IServiceScopeFactory The factory for creating service scopes. Methods OnBotJoinedAsync(SocketGuild) Handles the event when the bot joins a new guild. public Task OnBotJoinedAsync(SocketGuild guild) Parameters guild SocketGuild The guild that the bot joined. Returns Task OnClientLogAsync(LogMessage) Handles Discord client log messages. public Task OnClientLogAsync(LogMessage logMessage) Parameters logMessage LogMessage The log message from the Discord client. Returns Task OnCommandCreatedAsync(SocketInteraction) Handles the event when a command interaction is created. public Task OnCommandCreatedAsync(SocketInteraction interaction) Parameters interaction SocketInteraction The socket interaction that was created. Returns Task OnShardReadyAsync(DiscordSocketClient) Handles the event when a Discord shard becomes ready. public Task OnShardReadyAsync(DiscordSocketClient shard) Parameters shard DiscordSocketClient The Discord socket client shard that became ready. Returns Task OnShashCommandExecutedAsync(SlashCommandInfo, IInteractionContext, IResult) Handles the event when a slash command is executed. public Task OnShashCommandExecutedAsync(SlashCommandInfo slashCommandInfo, IInteractionContext interactionContext, IResult result) Parameters slashCommandInfo SlashCommandInfo Information about the executed slash command. interactionContext IInteractionContext The context of the interaction. result IResult The result of the command execution. Returns Task"
  },
  "api/Amiquin.Core.Services.EventHandler.IEventHandlerService.html": {
    "href": "api/Amiquin.Core.Services.EventHandler.IEventHandlerService.html",
    "title": "Interface IEventHandlerService | Amiquin Documentation",
    "summary": "Interface IEventHandlerService Namespace Amiquin.Core.Services.EventHandler Assembly Amiquin.Core.dll Service interface for handling Discord bot events and interactions. Provides methods for managing bot lifecycle events, commands, and guild interactions. public interface IEventHandlerService Methods OnBotJoinedAsync(SocketGuild) Handles the event when the bot joins a new guild. Task OnBotJoinedAsync(SocketGuild guild) Parameters guild SocketGuild The guild that the bot joined. Returns Task OnClientLogAsync(LogMessage) Handles Discord client log messages. Task OnClientLogAsync(LogMessage logMessage) Parameters logMessage LogMessage The log message from the Discord client. Returns Task OnCommandCreatedAsync(SocketInteraction) Handles the event when a command interaction is created. Task OnCommandCreatedAsync(SocketInteraction interaction) Parameters interaction SocketInteraction The socket interaction that was created. Returns Task OnShardReadyAsync(DiscordSocketClient) Handles the event when a Discord shard becomes ready. Task OnShardReadyAsync(DiscordSocketClient shard) Parameters shard DiscordSocketClient The Discord socket client shard that became ready. Returns Task OnShashCommandExecutedAsync(SlashCommandInfo, IInteractionContext, IResult) Handles the event when a slash command is executed. Task OnShashCommandExecutedAsync(SlashCommandInfo slashCommandInfo, IInteractionContext interactionContext, IResult result) Parameters slashCommandInfo SlashCommandInfo Information about the executed slash command. interactionContext IInteractionContext The context of the interaction. result IResult The result of the command execution. Returns Task"
  },
  "api/Amiquin.Core.Services.EventHandler.html": {
    "href": "api/Amiquin.Core.Services.EventHandler.html",
    "title": "Namespace Amiquin.Core.Services.EventHandler | Amiquin Documentation",
    "summary": "Namespace Amiquin.Core.Services.EventHandler Classes EventHandlerService Implementation of the IEventHandlerService interface. Handles Discord bot events and interactions. Interfaces IEventHandlerService Service interface for handling Discord bot events and interactions. Provides methods for managing bot lifecycle events, commands, and guild interactions."
  },
  "api/Amiquin.Core.Services.ExternalProcessRunner.ExternalProcessRunnerService.html": {
    "href": "api/Amiquin.Core.Services.ExternalProcessRunner.ExternalProcessRunnerService.html",
    "title": "Class ExternalProcessRunnerService | Amiquin Documentation",
    "summary": "Class ExternalProcessRunnerService Namespace Amiquin.Core.Services.ExternalProcessRunner Assembly Amiquin.Core.dll Implementation of the IExternalProcessRunnerService interface. Manages creation and execution of external processes for audio processing. public class ExternalProcessRunnerService : IExternalProcessRunnerService Inheritance object ExternalProcessRunnerService Implements IExternalProcessRunnerService Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ExternalProcessRunnerService(ILogger<ExternalProcessRunnerService>) Initializes a new instance of the ExternalProcessRunnerService class. public ExternalProcessRunnerService(ILogger<ExternalProcessRunnerService> logger) Parameters logger ILogger<ExternalProcessRunnerService> The logger for this service. Methods CreateFfmpegProcess(string) Creates an FFmpeg process for audio conversion and streaming. public Process CreateFfmpegProcess(string audioPath) Parameters audioPath string The path to the input audio file. Returns Process A configured Process instance for FFmpeg. CreatePiperProcess(string, string, string) Creates a Piper process for text-to-speech conversion. public Process CreatePiperProcess(string piperCommand, string modelPath, string ttsOutputPath) Parameters piperCommand string The Piper command to execute. modelPath string The path to the TTS model file. ttsOutputPath string The output path for the generated audio file. Returns Process A configured Process instance for Piper."
  },
  "api/Amiquin.Core.Services.ExternalProcessRunner.IExternalProcessRunnerService.html": {
    "href": "api/Amiquin.Core.Services.ExternalProcessRunner.IExternalProcessRunnerService.html",
    "title": "Interface IExternalProcessRunnerService | Amiquin Documentation",
    "summary": "Interface IExternalProcessRunnerService Namespace Amiquin.Core.Services.ExternalProcessRunner Assembly Amiquin.Core.dll Service interface for creating and managing external processes. Provides methods for creating FFmpeg and Piper processes for audio processing. public interface IExternalProcessRunnerService Methods CreateFfmpegProcess(string) Creates an FFmpeg process for audio conversion and streaming. Process CreateFfmpegProcess(string audioPath) Parameters audioPath string The path to the input audio file. Returns Process A configured Process instance for FFmpeg. CreatePiperProcess(string, string, string) Creates a Piper process for text-to-speech conversion. Process CreatePiperProcess(string piperCommand, string modelPath, string ttsOutputPath) Parameters piperCommand string The Piper command to execute. modelPath string The path to the TTS model file. ttsOutputPath string The output path for the generated audio file. Returns Process A configured Process instance for Piper."
  },
  "api/Amiquin.Core.Services.ExternalProcessRunner.html": {
    "href": "api/Amiquin.Core.Services.ExternalProcessRunner.html",
    "title": "Namespace Amiquin.Core.Services.ExternalProcessRunner | Amiquin Documentation",
    "summary": "Namespace Amiquin.Core.Services.ExternalProcessRunner Classes ExternalProcessRunnerService Implementation of the IExternalProcessRunnerService interface. Manages creation and execution of external processes for audio processing. Interfaces IExternalProcessRunnerService Service interface for creating and managing external processes. Provides methods for creating FFmpeg and Piper processes for audio processing."
  },
  "api/Amiquin.Core.Services.MessageCache.IMessageCacheService.html": {
    "href": "api/Amiquin.Core.Services.MessageCache.IMessageCacheService.html",
    "title": "Interface IMessageCacheService | Amiquin Documentation",
    "summary": "Interface IMessageCacheService Namespace Amiquin.Core.Services.MessageCache Assembly Amiquin.Core.dll Service interface for managing message caching operations. Provides methods for caching chat messages, persona messages, and managing message history. public interface IMessageCacheService Methods AddChatExchangeAsync(ulong, List<ChatMessage>, List<Message>) Adds a chat exchange to the message cache for a specific server. Task AddChatExchangeAsync(ulong serverId, List<ChatMessage> messages, List<Message> modelMessages) Parameters serverId ulong The Discord server ID to add the exchange for. messages List<ChatMessage> The chat messages to add. modelMessages List<Message> The corresponding model messages to store. Returns Task ClearMessageCachce() Clears all cached messages. void ClearMessageCachce() ClearOldMessages(ulong, int) Clears old messages for a specific instance to manage memory usage. void ClearOldMessages(ulong instanceId, int range) Parameters instanceId ulong The instance ID to clear messages for. range int The number of messages to keep from the most recent. GetChatMessageCount(ulong) Gets the count of cached chat messages for a specific instance. int GetChatMessageCount(ulong instanceId) Parameters instanceId ulong The instance ID to get the message count for. Returns int The number of cached messages for the instance. GetOrCreateChatMessagesAsync(ulong) Retrieves existing chat messages for a server or creates a new message collection. Task<List<ChatMessage>?> GetOrCreateChatMessagesAsync(ulong serverId) Parameters serverId ulong The Discord server ID to get or create messages for. Returns Task<List<ChatMessage>> A list of chat messages for the specified server. GetPersonaCoreMessageAsync() Retrieves the core persona message from cache. Task<string?> GetPersonaCoreMessageAsync() Returns Task<string> The persona core message if available; otherwise, null. GetServerJoinMessage() Retrieves the server join message from cache. Task<string?> GetServerJoinMessage() Returns Task<string> The server join message if available; otherwise, null. ModifyMessage(string, string, int) Modifies or sets a message in the cache with a specified expiration time. void ModifyMessage(string key, string message, int minutes = 30) Parameters key string The cache key for the message. message string The message content to cache. minutes int The expiration time in minutes."
  },
  "api/Amiquin.Core.Services.MessageCache.MessageCacheService.html": {
    "href": "api/Amiquin.Core.Services.MessageCache.MessageCacheService.html",
    "title": "Class MessageCacheService | Amiquin Documentation",
    "summary": "Class MessageCacheService Namespace Amiquin.Core.Services.MessageCache Assembly Amiquin.Core.dll Service implementation for managing message caching operations. Handles in-memory caching of chat messages, persona messages, and database operations for message persistence. public class MessageCacheService : IMessageCacheService Inheritance object MessageCacheService Implements IMessageCacheService Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors MessageCacheService(IMemoryCache, IMessageRepository, IOptions<BotOptions>, IConfiguration) Initializes a new instance of the MessageCacheService. public MessageCacheService(IMemoryCache memoryCache, IMessageRepository messageRepository, IOptions<BotOptions> botOptions, IConfiguration configuration) Parameters memoryCache IMemoryCache Memory cache for storing messages temporarily. messageRepository IMessageRepository Repository for database operations on messages. botOptions IOptions<BotOptions> Bot configuration options. configuration IConfiguration Application configuration. Methods AddChatExchangeAsync(ulong, List<ChatMessage>, List<Message>) Adds a chat exchange to the message cache for a specific server. public Task AddChatExchangeAsync(ulong instanceId, List<ChatMessage> messages, List<Message> modelMessages) Parameters instanceId ulong messages List<ChatMessage> The chat messages to add. modelMessages List<Message> The corresponding model messages to store. Returns Task ClearMessageCachce() Clears all cached messages. public void ClearMessageCachce() ClearOldMessages(ulong, int) Clears old messages for a specific instance to manage memory usage. public void ClearOldMessages(ulong instanceId, int range) Parameters instanceId ulong The instance ID to clear messages for. range int The number of messages to keep from the most recent. GetChatMessageCount(ulong) Gets the count of cached chat messages for a specific instance. public int GetChatMessageCount(ulong serverId) Parameters serverId ulong Returns int The number of cached messages for the instance. GetOrCreateChatMessagesAsync(ulong) Retrieves existing chat messages for a server or creates a new message collection. public Task<List<ChatMessage>?> GetOrCreateChatMessagesAsync(ulong serverId) Parameters serverId ulong The Discord server ID to get or create messages for. Returns Task<List<ChatMessage>> A list of chat messages for the specified server. GetPersonaCoreMessageAsync() Retrieves the core persona message from cache. public Task<string?> GetPersonaCoreMessageAsync() Returns Task<string> The persona core message if available; otherwise, null. GetServerJoinMessage() Retrieves the server join message from cache. public Task<string?> GetServerJoinMessage() Returns Task<string> The server join message if available; otherwise, null. ModifyMessage(string, string, int) Modifies or sets a message in the cache with a specified expiration time. public void ModifyMessage(string key, string message, int minutes = 30) Parameters key string The cache key for the message. message string The message content to cache. minutes int The expiration time in minutes."
  },
  "api/Amiquin.Core.Services.MessageCache.html": {
    "href": "api/Amiquin.Core.Services.MessageCache.html",
    "title": "Namespace Amiquin.Core.Services.MessageCache | Amiquin Documentation",
    "summary": "Namespace Amiquin.Core.Services.MessageCache Classes MessageCacheService Service implementation for managing message caching operations. Handles in-memory caching of chat messages, persona messages, and database operations for message persistence. Interfaces IMessageCacheService Service interface for managing message caching operations. Provides methods for caching chat messages, persona messages, and managing message history."
  },
  "api/Amiquin.Core.Services.Meta.IServerMetaService.html": {
    "href": "api/Amiquin.Core.Services.Meta.IServerMetaService.html",
    "title": "Interface IServerMetaService | Amiquin Documentation",
    "summary": "Interface IServerMetaService Namespace Amiquin.Core.Services.Meta Assembly Amiquin.Core.dll Service interface for managing server metadata operations. Provides methods for creating, retrieving, updating, and deleting server-specific configuration and state data. public interface IServerMetaService Methods CreateServerMetaAsync(ulong, string) Creates new server metadata for the specified server. Task<ServerMeta> CreateServerMetaAsync(ulong serverId, string serverName) Parameters serverId ulong The Discord server ID to create metadata for. serverName string The name of the Discord server. Returns Task<ServerMeta> The newly created or existing server metadata. Exceptions ArgumentException Thrown when the server ID is zero. DeleteServerMetaAsync(ulong) Permanently deletes server metadata and all associated data for the specified server. Task DeleteServerMetaAsync(ulong serverId) Parameters serverId ulong The Discord server ID to delete metadata for. Returns Task Exceptions Exception Thrown when the server metadata is not found. GetAllServerMetasAsync() Retrieves metadata for all servers in the database. Task<List<ServerMeta>> GetAllServerMetasAsync() Returns Task<List<ServerMeta>> A list of all server metadata records. GetOrCreateServerMetaAsync(ExtendedShardedInteractionContext) Retrieves existing server metadata or creates new metadata if it doesn't exist. Task<ServerMeta> GetOrCreateServerMetaAsync(ExtendedShardedInteractionContext context) Parameters context ExtendedShardedInteractionContext The Discord interaction context containing server information. Returns Task<ServerMeta> The existing or newly created server metadata. Exceptions ArgumentException Thrown when the server ID cannot be determined from the context. GetServerMetaAsync(ulong) Retrieves server metadata for the specified server ID. Task<ServerMeta?> GetServerMetaAsync(ulong serverId) Parameters serverId ulong The Discord server ID to retrieve metadata for. Returns Task<ServerMeta> The server metadata if found; otherwise, null. GetServerMetaAsync(ulong, bool) Retrieves server metadata for the specified server ID with optional toggle inclusion. Task<ServerMeta?> GetServerMetaAsync(ulong serverId, bool includeToggles = false) Parameters serverId ulong The Discord server ID to retrieve metadata for. includeToggles bool Whether to include server toggles in the response. Default is false. Returns Task<ServerMeta> The server metadata if found; otherwise, null. UpdateServerMetaAsync(ServerMeta) Updates existing server metadata with new values. Task UpdateServerMetaAsync(ServerMeta serverMeta) Parameters serverMeta ServerMeta The server metadata object containing updated values. Returns Task Exceptions ArgumentException Thrown when the server ID is not set. Exception Thrown when the server metadata is not found in the database."
  },
  "api/Amiquin.Core.Services.Meta.ServerMetaService.html": {
    "href": "api/Amiquin.Core.Services.Meta.ServerMetaService.html",
    "title": "Class ServerMetaService | Amiquin Documentation",
    "summary": "Class ServerMetaService Namespace Amiquin.Core.Services.Meta Assembly Amiquin.Core.dll Service implementation for managing server metadata operations. Handles caching, database operations, and server-specific configuration management. Implements thread-safe operations using semaphores for concurrent access control. public class ServerMetaService : IServerMetaService Inheritance object ServerMetaService Implements IServerMetaService Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ServerMetaService(ILogger<IServerMetaService>, IMemoryCache, IServerMetaRepository) Initializes a new instance of the ServerMetaService. public ServerMetaService(ILogger<IServerMetaService> logger, IMemoryCache memoryCache, IServerMetaRepository serverMetaRepository) Parameters logger ILogger<IServerMetaService> Logger instance for recording service operations. memoryCache IMemoryCache Memory cache for storing frequently accessed server metadata. serverMetaRepository IServerMetaRepository Repository for database operations on server metadata. Methods CreateServerMetaAsync(ulong, string) Creates new server metadata for the specified server. public Task<ServerMeta> CreateServerMetaAsync(ulong serverId, string serverName) Parameters serverId ulong The Discord server ID to create metadata for. serverName string The name of the Discord server. Returns Task<ServerMeta> The newly created or existing server metadata. Exceptions ArgumentException Thrown when the server ID is zero. DeleteServerMetaAsync(ulong) Permanently deletes server metadata and all associated data for the specified server. public Task DeleteServerMetaAsync(ulong serverId) Parameters serverId ulong The Discord server ID to delete metadata for. Returns Task Exceptions Exception Thrown when the server metadata is not found. GetAllServerMetasAsync() Retrieves metadata for all servers in the database. public Task<List<ServerMeta>> GetAllServerMetasAsync() Returns Task<List<ServerMeta>> A list of all server metadata records. GetOrCreateServerMetaAsync(ExtendedShardedInteractionContext) Retrieves existing server metadata or creates new metadata if it doesn't exist. public Task<ServerMeta> GetOrCreateServerMetaAsync(ExtendedShardedInteractionContext context) Parameters context ExtendedShardedInteractionContext The Discord interaction context containing server information. Returns Task<ServerMeta> The existing or newly created server metadata. Exceptions ArgumentException Thrown when the server ID cannot be determined from the context. GetServerMetaAsync(ulong) Retrieves server metadata for the specified server ID. public Task<ServerMeta?> GetServerMetaAsync(ulong serverId) Parameters serverId ulong The Discord server ID to retrieve metadata for. Returns Task<ServerMeta> The server metadata if found; otherwise, null. GetServerMetaAsync(ulong, bool) Retrieves server metadata for the specified server ID with optional toggle inclusion. public Task<ServerMeta?> GetServerMetaAsync(ulong serverId, bool includeToggles) Parameters serverId ulong The Discord server ID to retrieve metadata for. includeToggles bool Whether to include server toggles in the response. Default is false. Returns Task<ServerMeta> The server metadata if found; otherwise, null. UpdateServerMetaAsync(ServerMeta) Updates existing server metadata with new values. public Task UpdateServerMetaAsync(ServerMeta serverMeta) Parameters serverMeta ServerMeta The server metadata object containing updated values. Returns Task Exceptions ArgumentException Thrown when the server ID is not set. Exception Thrown when the server metadata is not found in the database."
  },
  "api/Amiquin.Core.Services.Meta.html": {
    "href": "api/Amiquin.Core.Services.Meta.html",
    "title": "Namespace Amiquin.Core.Services.Meta | Amiquin Documentation",
    "summary": "Namespace Amiquin.Core.Services.Meta Classes ServerMetaService Service implementation for managing server metadata operations. Handles caching, database operations, and server-specific configuration management. Implements thread-safe operations using semaphores for concurrent access control. Interfaces IServerMetaService Service interface for managing server metadata operations. Provides methods for creating, retrieving, updating, and deleting server-specific configuration and state data."
  },
  "api/Amiquin.Core.Services.Nacho.INachoService.html": {
    "href": "api/Amiquin.Core.Services.Nacho.INachoService.html",
    "title": "Interface INachoService | Amiquin Documentation",
    "summary": "Interface INachoService Namespace Amiquin.Core.Services.Nacho Assembly Amiquin.Core.dll Service interface for managing nacho operations. Handles nacho counting, addition, removal, and statistics tracking for users and servers. public interface INachoService Methods AddNachoAsync(ulong, ulong, int) Adds nacho count to a user in a specific server. Task AddNachoAsync(ulong userId, ulong serverId, int nachoCount = 1) Parameters userId ulong The Discord user ID to add nachos for. serverId ulong The Discord server ID where the nachos are being added. nachoCount int The number of nachos to add. Default is 1. Returns Task GetServerNachoCountAsync(ulong) Retrieves the total nacho count for a specific server. Task<int> GetServerNachoCountAsync(ulong serverId) Parameters serverId ulong The Discord server ID to get the nacho count for. Returns Task<int> The total number of nachos in the server. GetTotalNachoCountAsync() Retrieves the total nacho count across all servers. Task<int> GetTotalNachoCountAsync() Returns Task<int> The total number of nachos across all servers. GetUserNachoCountAsync(ulong) Retrieves the total nacho count for a specific user across all servers. Task<int> GetUserNachoCountAsync(ulong userId) Parameters userId ulong The Discord user ID to get the nacho count for. Returns Task<int> The total number of nachos for the user. RemoveAllNachoAsync(ulong) Removes all nachos for a specific user across all servers. Task RemoveAllNachoAsync(ulong userId) Parameters userId ulong The Discord user ID to remove nachos for. Returns Task RemoveAllServerNachoAsync(ulong) Removes all nachos for a specific server. Task RemoveAllServerNachoAsync(ulong serverId) Parameters serverId ulong The Discord server ID to remove nachos for. Returns Task RemoveNachoAsync(ulong, ulong) Removes nacho records for a specific user in a specific server. Task RemoveNachoAsync(ulong userId, ulong serverId) Parameters userId ulong The Discord user ID to remove nachos for. serverId ulong The Discord server ID to remove nachos from. Returns Task"
  },
  "api/Amiquin.Core.Services.Nacho.NachoService.html": {
    "href": "api/Amiquin.Core.Services.Nacho.NachoService.html",
    "title": "Class NachoService | Amiquin Documentation",
    "summary": "Class NachoService Namespace Amiquin.Core.Services.Nacho Assembly Amiquin.Core.dll Service implementation for managing nacho operations. Handles database operations for nacho counting, statistics, and management across users and servers. public class NachoService : INachoService Inheritance object NachoService Implements INachoService Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors NachoService(INachoRepository) Initializes a new instance of the NachoService. public NachoService(INachoRepository nachoRepository) Parameters nachoRepository INachoRepository Repository for database operations on nacho records. Fields _nachoRepository public readonly INachoRepository _nachoRepository Field Value INachoRepository Methods AddNachoAsync(ulong, ulong, int) Adds nacho count to a user in a specific server. public Task AddNachoAsync(ulong userId, ulong serverId, int nachoCount = 1) Parameters userId ulong The Discord user ID to add nachos for. serverId ulong The Discord server ID where the nachos are being added. nachoCount int The number of nachos to add. Default is 1. Returns Task GetServerNachoCountAsync(ulong) Retrieves the total nacho count for a specific server. public Task<int> GetServerNachoCountAsync(ulong serverId) Parameters serverId ulong The Discord server ID to get the nacho count for. Returns Task<int> The total number of nachos in the server. GetTotalNachoCountAsync() Retrieves the total nacho count across all servers. public Task<int> GetTotalNachoCountAsync() Returns Task<int> The total number of nachos across all servers. GetUserNachoCountAsync(ulong) Retrieves the total nacho count for a specific user across all servers. public Task<int> GetUserNachoCountAsync(ulong userId) Parameters userId ulong The Discord user ID to get the nacho count for. Returns Task<int> The total number of nachos for the user. RemoveAllNachoAsync(ulong) Removes all nachos for a specific user across all servers. public Task RemoveAllNachoAsync(ulong userId) Parameters userId ulong The Discord user ID to remove nachos for. Returns Task RemoveAllServerNachoAsync(ulong) Removes all nachos for a specific server. public Task RemoveAllServerNachoAsync(ulong serverId) Parameters serverId ulong The Discord server ID to remove nachos for. Returns Task RemoveNachoAsync(ulong, ulong) Removes nacho records for a specific user in a specific server. public Task RemoveNachoAsync(ulong userId, ulong serverId) Parameters userId ulong The Discord user ID to remove nachos for. serverId ulong The Discord server ID to remove nachos from. Returns Task"
  },
  "api/Amiquin.Core.Services.Nacho.html": {
    "href": "api/Amiquin.Core.Services.Nacho.html",
    "title": "Namespace Amiquin.Core.Services.Nacho | Amiquin Documentation",
    "summary": "Namespace Amiquin.Core.Services.Nacho Classes NachoService Service implementation for managing nacho operations. Handles database operations for nacho counting, statistics, and management across users and servers. Interfaces INachoService Service interface for managing nacho operations. Handles nacho counting, addition, removal, and statistics tracking for users and servers."
  },
  "api/Amiquin.Core.Services.Persona.IPersonaService.html": {
    "href": "api/Amiquin.Core.Services.Persona.IPersonaService.html",
    "title": "Interface IPersonaService | Amiquin Documentation",
    "summary": "Interface IPersonaService Namespace Amiquin.Core.Services.Persona Assembly Amiquin.Core.dll Service interface for managing server persona operations. Handles persona creation, updates, and retrieval for Discord servers. public interface IPersonaService Methods AddSummaryAsync(ulong, string) Adds a summary update to the server's persona. Task AddSummaryAsync(ulong serverId, string updateMessage) Parameters serverId ulong The Discord server ID to update the persona for. updateMessage string The summary message to add to the persona. Returns Task GetPersonaAsync(ulong) Retrieves the current persona for a server. Task<string> GetPersonaAsync(ulong serverId) Parameters serverId ulong The Discord server ID to retrieve the persona for. Returns Task<string> The server's persona string."
  },
  "api/Amiquin.Core.Services.Persona.PersonaService.html": {
    "href": "api/Amiquin.Core.Services.Persona.PersonaService.html",
    "title": "Class PersonaService | Amiquin Documentation",
    "summary": "Class PersonaService Namespace Amiquin.Core.Services.Persona Assembly Amiquin.Core.dll Service implementation for managing server persona operations. Handles persona creation, updates, caching, and AI-powered persona generation for Discord servers. public class PersonaService : IPersonaService Inheritance object PersonaService Implements IPersonaService Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors PersonaService(ILogger<PersonaService>, IMessageCacheService, IChatCoreService, INewsApiClient, IMemoryCache, IChatSemaphoreManager, IServerMetaService, BotContextAccessor, IConfiguration) Initializes a new instance of the PersonaService. public PersonaService(ILogger<PersonaService> logger, IMessageCacheService messageCacheService, IChatCoreService chatService, INewsApiClient newsApiClient, IMemoryCache memoryCache, IChatSemaphoreManager chatSemaphoreManager, IServerMetaService serverMetaService, BotContextAccessor botContextAccessor, IConfiguration configuration) Parameters logger ILogger<PersonaService> Logger instance for recording service operations. messageCacheService IMessageCacheService Service for managing message cache operations. chatService IChatCoreService Core chat service for AI interactions. newsApiClient INewsApiClient Client for accessing news API services. memoryCache IMemoryCache Memory cache for storing frequently accessed data. chatSemaphoreManager IChatSemaphoreManager Manager for controlling concurrent chat operations. serverMetaService IServerMetaService Service for managing server metadata. botContextAccessor BotContextAccessor Accessor for bot context information. configuration IConfiguration Application configuration settings. Methods AddSummaryAsync(ulong, string) Adds a summary update to the server's persona. public Task AddSummaryAsync(ulong serverId, string updateMessage) Parameters serverId ulong The Discord server ID to update the persona for. updateMessage string The summary message to add to the persona. Returns Task GetPersonaAsync(ulong) Retrieves the current persona for a server. public Task<string> GetPersonaAsync(ulong serverId) Parameters serverId ulong The Discord server ID to retrieve the persona for. Returns Task<string> The server's persona string."
  },
  "api/Amiquin.Core.Services.Persona.html": {
    "href": "api/Amiquin.Core.Services.Persona.html",
    "title": "Namespace Amiquin.Core.Services.Persona | Amiquin Documentation",
    "summary": "Namespace Amiquin.Core.Services.Persona Classes PersonaService Service implementation for managing server persona operations. Handles persona creation, updates, caching, and AI-powered persona generation for Discord servers. Interfaces IPersonaService Service interface for managing server persona operations. Handles persona creation, updates, and retrieval for Discord servers."
  },
  "api/Amiquin.Core.Services.ServerInteraction.IServerInteractionService.html": {
    "href": "api/Amiquin.Core.Services.ServerInteraction.IServerInteractionService.html",
    "title": "Interface IServerInteractionService | Amiquin Documentation",
    "summary": "Interface IServerInteractionService Namespace Amiquin.Core.Services.ServerInteraction Assembly Amiquin.Core.dll Service interface for interacting with Discord servers. Provides methods for sending messages when the bot joins a server. public interface IServerInteractionService Methods SendJoinMessageAsync(SocketGuild) Sends a welcome message when the bot joins a new Discord server. Task SendJoinMessageAsync(SocketGuild guild) Parameters guild SocketGuild The Discord guild (server) that the bot joined. Returns Task A task representing the asynchronous operation."
  },
  "api/Amiquin.Core.Services.ServerInteraction.ServerInteractionService.html": {
    "href": "api/Amiquin.Core.Services.ServerInteraction.ServerInteractionService.html",
    "title": "Class ServerInteractionService | Amiquin Documentation",
    "summary": "Class ServerInteractionService Namespace Amiquin.Core.Services.ServerInteraction Assembly Amiquin.Core.dll Implementation of the IServerInteractionService interface. Handles interactions with Discord servers. public class ServerInteractionService : IServerInteractionService Inheritance object ServerInteractionService Implements IServerInteractionService Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ServerInteractionService(IMessageCacheService, ILogger<ServerInteractionService>, IConfiguration) Initializes a new instance of the ServerInteractionService class. public ServerInteractionService(IMessageCacheService messageCacheService, ILogger<ServerInteractionService> logger, IConfiguration configuration) Parameters messageCacheService IMessageCacheService The service used to retrieve cached messages. logger ILogger<ServerInteractionService> The logger for this service. configuration IConfiguration The application configuration. Methods SendJoinMessageAsync(SocketGuild) Sends a welcome message when the bot joins a new Discord server. public Task SendJoinMessageAsync(SocketGuild guild) Parameters guild SocketGuild The Discord guild (server) that the bot joined. Returns Task A task representing the asynchronous operation."
  },
  "api/Amiquin.Core.Services.ServerInteraction.html": {
    "href": "api/Amiquin.Core.Services.ServerInteraction.html",
    "title": "Namespace Amiquin.Core.Services.ServerInteraction | Amiquin Documentation",
    "summary": "Namespace Amiquin.Core.Services.ServerInteraction Classes ServerInteractionService Implementation of the IServerInteractionService interface. Handles interactions with Discord servers. Interfaces IServerInteractionService Service interface for interacting with Discord servers. Provides methods for sending messages when the bot joins a server."
  },
  "api/Amiquin.Core.Services.StatisticsCollector.IStatisticsCollector.html": {
    "href": "api/Amiquin.Core.Services.StatisticsCollector.IStatisticsCollector.html",
    "title": "Interface IStatisticsCollector | Amiquin Documentation",
    "summary": "Interface IStatisticsCollector Namespace Amiquin.Core.Services.StatisticsCollector Assembly Amiquin.Core.dll public interface IStatisticsCollector : IRunnableJob Inherited Members IRunnableJob.FrequencyInSeconds IRunnableJob.RunAsync(IServiceScopeFactory, CancellationToken)"
  },
  "api/Amiquin.Core.Services.StatisticsCollector.StatisticsCollector.html": {
    "href": "api/Amiquin.Core.Services.StatisticsCollector.StatisticsCollector.html",
    "title": "Class StatisticsCollector | Amiquin Documentation",
    "summary": "Class StatisticsCollector Namespace Amiquin.Core.Services.StatisticsCollector Assembly Amiquin.Core.dll public class StatisticsCollector : IStatisticsCollector, IRunnableJob Inheritance object StatisticsCollector Implements IStatisticsCollector IRunnableJob Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties FrequencyInSeconds public int FrequencyInSeconds { get; set; } Property Value int Methods RunAsync(IServiceScopeFactory, CancellationToken) public Task RunAsync(IServiceScopeFactory serviceScopeFactory, CancellationToken cancellationToken) Parameters serviceScopeFactory IServiceScopeFactory cancellationToken CancellationToken Returns Task"
  },
  "api/Amiquin.Core.Services.StatisticsCollector.html": {
    "href": "api/Amiquin.Core.Services.StatisticsCollector.html",
    "title": "Namespace Amiquin.Core.Services.StatisticsCollector | Amiquin Documentation",
    "summary": "Namespace Amiquin.Core.Services.StatisticsCollector Classes StatisticsCollector Interfaces IStatisticsCollector"
  },
  "api/Amiquin.Core.Services.Voice.IVoiceService.html": {
    "href": "api/Amiquin.Core.Services.Voice.IVoiceService.html",
    "title": "Interface IVoiceService | Amiquin Documentation",
    "summary": "Interface IVoiceService Namespace Amiquin.Core.Services.Voice Assembly Amiquin.Core.dll Service interface for managing voice operations in Discord channels. Provides methods for text-to-speech, audio streaming, and voice channel management. public interface IVoiceService Methods CreateTextToSpeechAudioAsync(string) Creates an audio file from text using text-to-speech conversion. Task<string> CreateTextToSpeechAudioAsync(string text) Parameters text string The text to convert to speech. Returns Task<string> The file path of the generated audio file. JoinAsync(IVoiceChannel) Joins the specified voice channel. Task JoinAsync(IVoiceChannel channel) Parameters channel IVoiceChannel The Discord voice channel to join. Returns Task LeaveAsync(IVoiceChannel) Leaves the specified voice channel. Task LeaveAsync(IVoiceChannel channel) Parameters channel IVoiceChannel The Discord voice channel to leave. Returns Task SpeakAsync(IVoiceChannel, string) Converts text to speech and plays it in the specified voice channel. Task SpeakAsync(IVoiceChannel voiceChannel, string text) Parameters voiceChannel IVoiceChannel The Discord voice channel to speak in. text string The text to convert to speech and play. Returns Task StreamAudioAsync(IVoiceChannel, string) Streams an audio file to the specified voice channel. Task StreamAudioAsync(IVoiceChannel voiceChannel, string filePath) Parameters voiceChannel IVoiceChannel The Discord voice channel to stream audio to. filePath string The path to the audio file to stream. Returns Task"
  },
  "api/Amiquin.Core.Services.Voice.IVoiceStateManager.html": {
    "href": "api/Amiquin.Core.Services.Voice.IVoiceStateManager.html",
    "title": "Interface IVoiceStateManager | Amiquin Documentation",
    "summary": "Interface IVoiceStateManager Namespace Amiquin.Core.Services.Voice Assembly Amiquin.Core.dll Manager interface for handling Discord voice channel state and connections. Provides methods for connecting to, disconnecting from, and managing voice channels. public interface IVoiceStateManager Methods ConnectVoiceChannelAsync(IVoiceChannel) Connects to the specified Discord voice channel. Task ConnectVoiceChannelAsync(IVoiceChannel channel) Parameters channel IVoiceChannel The Discord voice channel to connect to. Returns Task DisconnectVoiceChannelAsync(IVoiceChannel?) Disconnects from the specified Discord voice channel. Task DisconnectVoiceChannelAsync(IVoiceChannel? channel) Parameters channel IVoiceChannel The Discord voice channel to disconnect from. Can be null. Returns Task GetAmiquinVoice(ulong) Retrieves the AmiquinVoice instance for the specified guild. AmiquinVoice? GetAmiquinVoice(ulong guildId) Parameters guildId ulong The Discord guild ID to get the voice instance for. Returns AmiquinVoice The AmiquinVoice instance if connected; otherwise, null."
  },
  "api/Amiquin.Core.Services.Voice.Models.AmiquinVoice.html": {
    "href": "api/Amiquin.Core.Services.Voice.Models.AmiquinVoice.html",
    "title": "Class AmiquinVoice | Amiquin Documentation",
    "summary": "Class AmiquinVoice Namespace Amiquin.Core.Services.Voice.Models Assembly Amiquin.Core.dll public class AmiquinVoice Inheritance object AmiquinVoice Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties AudioClient public IAudioClient? AudioClient { get; set; } Property Value IAudioClient AudioOutStream public AudioOutStream? AudioOutStream { get; set; } Property Value AudioOutStream VoiceChannel public IVoiceChannel? VoiceChannel { get; set; } Property Value IVoiceChannel"
  },
  "api/Amiquin.Core.Services.Voice.Models.TTSMessage.html": {
    "href": "api/Amiquin.Core.Services.Voice.Models.TTSMessage.html",
    "title": "Class TTSMessage | Amiquin Documentation",
    "summary": "Class TTSMessage Namespace Amiquin.Core.Services.Voice.Models Assembly Amiquin.Core.dll public class TTSMessage Inheritance object TTSMessage Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Text public string Text { get; set; } Property Value string"
  },
  "api/Amiquin.Core.Services.Voice.Models.html": {
    "href": "api/Amiquin.Core.Services.Voice.Models.html",
    "title": "Namespace Amiquin.Core.Services.Voice.Models | Amiquin Documentation",
    "summary": "Namespace Amiquin.Core.Services.Voice.Models Classes AmiquinVoice TTSMessage"
  },
  "api/Amiquin.Core.Services.Voice.VoiceService.html": {
    "href": "api/Amiquin.Core.Services.Voice.VoiceService.html",
    "title": "Class VoiceService | Amiquin Documentation",
    "summary": "Class VoiceService Namespace Amiquin.Core.Services.Voice Assembly Amiquin.Core.dll Service implementation for managing voice operations in Discord channels. Handles text-to-speech conversion, audio streaming, and voice channel management using external tools like Piper and FFmpeg. public class VoiceService : IVoiceService Inheritance object VoiceService Implements IVoiceService Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors VoiceService(ILogger<VoiceService>, IVoiceStateManager, IConfiguration, IChatSemaphoreManager, IOptions<ExternalOptions>, IExternalProcessRunnerService) Initializes a new instance of the VoiceService. public VoiceService(ILogger<VoiceService> logger, IVoiceStateManager voiceStateManager, IConfiguration configuration, IChatSemaphoreManager chatSemaphoreManager, IOptions<ExternalOptions> externalOptions, IExternalProcessRunnerService externalProcessRunner) Parameters logger ILogger<VoiceService> Logger instance for recording service operations. voiceStateManager IVoiceStateManager Manager for handling voice channel state. configuration IConfiguration Configuration for accessing application settings. chatSemaphoreManager IChatSemaphoreManager Manager for handling voice operation synchronization. externalOptions IOptions<ExternalOptions> Options for external tool configurations. externalProcessRunner IExternalProcessRunnerService Service for running external processes like Piper and FFmpeg. Methods CreateTextToSpeechAudioAsync(string) Creates an audio file from text using text-to-speech conversion. public Task<string> CreateTextToSpeechAudioAsync(string text) Parameters text string The text to convert to speech. Returns Task<string> The file path of the generated audio file. JoinAsync(IVoiceChannel) Joins the specified voice channel. public Task JoinAsync(IVoiceChannel channel) Parameters channel IVoiceChannel The Discord voice channel to join. Returns Task LeaveAsync(IVoiceChannel) Leaves the specified voice channel. public Task LeaveAsync(IVoiceChannel channel) Parameters channel IVoiceChannel The Discord voice channel to leave. Returns Task SpeakAsync(IVoiceChannel, string) Converts text to speech and plays it in the specified voice channel. public Task SpeakAsync(IVoiceChannel voiceChannel, string text) Parameters voiceChannel IVoiceChannel The Discord voice channel to speak in. text string The text to convert to speech and play. Returns Task StreamAudioAsync(IVoiceChannel, string) Streams an audio file to the specified voice channel. public Task StreamAudioAsync(IVoiceChannel voiceChannel, string filePath) Parameters voiceChannel IVoiceChannel The Discord voice channel to stream audio to. filePath string The path to the audio file to stream. Returns Task"
  },
  "api/Amiquin.Core.Services.Voice.VoiceStateManager.html": {
    "href": "api/Amiquin.Core.Services.Voice.VoiceStateManager.html",
    "title": "Class VoiceStateManager | Amiquin Documentation",
    "summary": "Class VoiceStateManager Namespace Amiquin.Core.Services.Voice Assembly Amiquin.Core.dll Implementation of the IVoiceStateManager interface. Manages Discord voice channel connections and state. public class VoiceStateManager : IVoiceStateManager Inheritance object VoiceStateManager Implements IVoiceStateManager Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors VoiceStateManager(ILogger<VoiceStateManager>) Initializes a new instance of the VoiceStateManager class. public VoiceStateManager(ILogger<VoiceStateManager> logger) Parameters logger ILogger<VoiceStateManager> The logger for this manager. Methods ConnectVoiceChannelAsync(IVoiceChannel) Connects to the specified Discord voice channel. public Task ConnectVoiceChannelAsync(IVoiceChannel channel) Parameters channel IVoiceChannel The Discord voice channel to connect to. Returns Task DisconnectVoiceChannelAsync(IVoiceChannel?) Disconnects from the specified Discord voice channel. public Task DisconnectVoiceChannelAsync(IVoiceChannel? channel) Parameters channel IVoiceChannel The Discord voice channel to disconnect from. Can be null. Returns Task GetAmiquinVoice(ulong) Retrieves the AmiquinVoice instance for the specified guild. public AmiquinVoice? GetAmiquinVoice(ulong guildId) Parameters guildId ulong The Discord guild ID to get the voice instance for. Returns AmiquinVoice The AmiquinVoice instance if connected; otherwise, null."
  },
  "api/Amiquin.Core.Services.Voice.html": {
    "href": "api/Amiquin.Core.Services.Voice.html",
    "title": "Namespace Amiquin.Core.Services.Voice | Amiquin Documentation",
    "summary": "Namespace Amiquin.Core.Services.Voice Classes VoiceService Service implementation for managing voice operations in Discord channels. Handles text-to-speech conversion, audio streaming, and voice channel management using external tools like Piper and FFmpeg. VoiceStateManager Implementation of the IVoiceStateManager interface. Manages Discord voice channel connections and state. Interfaces IVoiceService Service interface for managing voice operations in Discord channels. Provides methods for text-to-speech, audio streaming, and voice channel management. IVoiceStateManager Manager interface for handling Discord voice channel state and connections. Provides methods for connecting to, disconnecting from, and managing voice channels."
  },
  "api/Amiquin.Core.Utilities.DiscordUtilities.html": {
    "href": "api/Amiquin.Core.Utilities.DiscordUtilities.html",
    "title": "Class DiscordUtilities | Amiquin Documentation",
    "summary": "Class DiscordUtilities Namespace Amiquin.Core.Utilities Assembly Amiquin.Core.dll public static class DiscordUtilities Inheritance object DiscordUtilities Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods ChunkMessage(string, Func<string, int, int, Embed>) public static IEnumerable<Embed> ChunkMessage(string message, Func<string, int, int, Embed> embedBuilder) Parameters message string embedBuilder Func<string, int, int, Embed> Returns IEnumerable<Embed>"
  },
  "api/Amiquin.Core.Utilities.GeneralUtilities.html": {
    "href": "api/Amiquin.Core.Utilities.GeneralUtilities.html",
    "title": "Class GeneralUtilities | Amiquin Documentation",
    "summary": "Class GeneralUtilities Namespace Amiquin.Core.Utilities Assembly Amiquin.Core.dll public class GeneralUtilities Inheritance object GeneralUtilities Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods GetFormattedDateTime(DateTime) public static string GetFormattedDateTime(DateTime dateTime) Parameters dateTime DateTime Returns string GetFormattedTimeSpan(TimeSpan) public static string GetFormattedTimeSpan(TimeSpan timeSpan) Parameters timeSpan TimeSpan Returns string IsDebugMode() public static bool IsDebugMode() Returns bool IsLinux() public static bool IsLinux() Returns bool"
  },
  "api/Amiquin.Core.Utilities.ProgressUtilities.html": {
    "href": "api/Amiquin.Core.Utilities.ProgressUtilities.html",
    "title": "Class ProgressUtilities | Amiquin Documentation",
    "summary": "Class ProgressUtilities Namespace Amiquin.Core.Utilities Assembly Amiquin.Core.dll public class ProgressUtilities Inheritance object ProgressUtilities Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods GenerateConsoleProgressBar(double, int) public static string GenerateConsoleProgressBar(double completion, int barLength = 50) Parameters completion double barLength int Returns string GenerateNachoProgressBar(double, int) public static string GenerateNachoProgressBar(double completion, int barLength = 50) Parameters completion double barLength int Returns string GetCompletionPercentage(int, int) public static double GetCompletionPercentage(int current, int total) Parameters current int total int Returns double"
  },
  "api/Amiquin.Core.Utilities.Reflection.html": {
    "href": "api/Amiquin.Core.Utilities.Reflection.html",
    "title": "Class Reflection | Amiquin Documentation",
    "summary": "Class Reflection Namespace Amiquin.Core.Utilities Assembly Amiquin.Core.dll public class Reflection Inheritance object Reflection Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods ConvertTo(PropertyInfo, string) public static object ConvertTo(PropertyInfo property, string input) Parameters property PropertyInfo input string Returns object ConvertTo<T>(string) public static T? ConvertTo<T>(string input) Parameters input string Returns T Type Parameters T GetAllEphemeralCommands() public static HashSet<string> GetAllEphemeralCommands() Returns HashSet<string> GetOptionTypes() public static Type[] GetOptionTypes() Returns Type[] IsExtendedPrimitiveType(object) public static bool IsExtendedPrimitiveType(object obj) Parameters obj object Returns bool IsExtendedPrimitiveType(PropertyInfo) public static bool IsExtendedPrimitiveType(PropertyInfo property) Parameters property PropertyInfo Returns bool"
  },
  "api/Amiquin.Core.Utilities.StringModifier.html": {
    "href": "api/Amiquin.Core.Utilities.StringModifier.html",
    "title": "Class StringModifier | Amiquin Documentation",
    "summary": "Class StringModifier Namespace Amiquin.Core.Utilities Assembly Amiquin.Core.dll public class StringModifier Inheritance object StringModifier Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Anomify(string, int) public static string Anomify(string input, int anonimyPercentage = 50) Parameters input string anonimyPercentage int Returns string Chunkify(string, int) Splits the input string into chunks, each with at most maxLength characters. Words are kept intact (not broken in the middle). public static List<string> Chunkify(string input, int maxLength) Parameters input string The input string to split. maxLength int The maximum allowed length of each chunk. Returns List<string> A list of string chunks. CreateCacheKey(string, string) public static string CreateCacheKey(string category, string key) Parameters category string key string Returns string"
  },
  "api/Amiquin.Core.Utilities.Tokenizer.html": {
    "href": "api/Amiquin.Core.Utilities.Tokenizer.html",
    "title": "Class Tokenizer | Amiquin Documentation",
    "summary": "Class Tokenizer Namespace Amiquin.Core.Utilities Assembly Amiquin.Core.dll public class Tokenizer Inheritance object Tokenizer Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods CountTokensAsync(string) public static Task<int> CountTokensAsync(string input) Parameters input string Returns Task<int>"
  },
  "api/Amiquin.Core.Utilities.html": {
    "href": "api/Amiquin.Core.Utilities.html",
    "title": "Namespace Amiquin.Core.Utilities | Amiquin Documentation",
    "summary": "Namespace Amiquin.Core.Utilities Classes DiscordUtilities GeneralUtilities ProgressUtilities Reflection StringModifier Tokenizer"
  },
  "api/Amiquin.Core.html": {
    "href": "api/Amiquin.Core.html",
    "title": "Namespace Amiquin.Core | Amiquin Documentation",
    "summary": "Namespace Amiquin.Core Classes Constants Constants.AI Constants.APIs Constants.APIs.NewsApi Constants.CacheKeys Constants.Emoji Constants.Environment Constants.Paths Constants.PersonaKeywordsCache Constants.ToggleNames Constants.ToggleNames.SystemExclusiveToggles"
  },
  "api/Amiquin.Infrastructure.AmiquinContext.html": {
    "href": "api/Amiquin.Infrastructure.AmiquinContext.html",
    "title": "Class AmiquinContext | Amiquin Documentation",
    "summary": "Class AmiquinContext Namespace Amiquin.Infrastructure Assembly Amiquin.Infrastructure.dll public class AmiquinContext : DbContext, IInfrastructure<IServiceProvider>, IDbContextDependencies, IDbSetCache, IDbContextPoolable, IResettableService, IDisposable, IAsyncDisposable Inheritance object DbContext AmiquinContext Implements IInfrastructure<IServiceProvider> IDbContextDependencies IDbSetCache IDbContextPoolable IResettableService IDisposable IAsyncDisposable Inherited Members DbContext.Set<TEntity>() DbContext.Set<TEntity>(string) DbContext.ConfigureConventions(ModelConfigurationBuilder) DbContext.SaveChanges() DbContext.SaveChanges(bool) DbContext.SaveChangesAsync(CancellationToken) DbContext.SaveChangesAsync(bool, CancellationToken) DbContext.Dispose() DbContext.DisposeAsync() DbContext.Entry<TEntity>(TEntity) DbContext.Entry(object) DbContext.Add<TEntity>(TEntity) DbContext.AddAsync<TEntity>(TEntity, CancellationToken) DbContext.Attach<TEntity>(TEntity) DbContext.Update<TEntity>(TEntity) DbContext.Remove<TEntity>(TEntity) DbContext.Add(object) DbContext.AddAsync(object, CancellationToken) DbContext.Attach(object) DbContext.Update(object) DbContext.Remove(object) DbContext.AddRange(params object[]) DbContext.AddRangeAsync(params object[]) DbContext.AttachRange(params object[]) DbContext.UpdateRange(params object[]) DbContext.RemoveRange(params object[]) DbContext.AddRange(IEnumerable<object>) DbContext.AddRangeAsync(IEnumerable<object>, CancellationToken) DbContext.AttachRange(IEnumerable<object>) DbContext.UpdateRange(IEnumerable<object>) DbContext.RemoveRange(IEnumerable<object>) DbContext.Find(Type, params object[]) DbContext.FindAsync(Type, params object[]) DbContext.FindAsync(Type, object[], CancellationToken) DbContext.Find<TEntity>(params object[]) DbContext.FindAsync<TEntity>(params object[]) DbContext.FindAsync<TEntity>(object[], CancellationToken) DbContext.FromExpression<TResult>(Expression<Func<IQueryable<TResult>>>) DbContext.Database DbContext.ChangeTracker DbContext.Model DbContext.ContextId DbContext.SavingChanges DbContext.SavedChanges DbContext.SaveChangesFailed object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors AmiquinContext() public AmiquinContext() AmiquinContext(DbContextOptions<AmiquinContext>) public AmiquinContext(DbContextOptions<AmiquinContext> options) Parameters options DbContextOptions<AmiquinContext> Properties BotStatistics public DbSet<BotStatistics> BotStatistics { get; set; } Property Value DbSet<BotStatistics> CommandLogs public DbSet<CommandLog> CommandLogs { get; set; } Property Value DbSet<CommandLog> Messages public DbSet<Message> Messages { get; set; } Property Value DbSet<Message> NachoPacks public DbSet<NachoPack> NachoPacks { get; set; } Property Value DbSet<NachoPack> ServerMetas public DbSet<ServerMeta> ServerMetas { get; set; } Property Value DbSet<ServerMeta> Toggles public DbSet<Toggle> Toggles { get; set; } Property Value DbSet<Toggle> Methods OnConfiguring(DbContextOptionsBuilder) Override this method to configure the database (and other options) to be used for this context. This method is called for each instance of the context that is created. The base implementation does nothing. protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder) Parameters optionsBuilder DbContextOptionsBuilder A builder used to create or modify options for this context. Databases (and other extensions) typically define extension methods on this object that allow you to configure the context. Remarks In situations where an instance of DbContextOptions may or may not have been passed to the constructor, you can use IsConfigured to determine if the options have already been set, and skip some or all of the logic in OnConfiguring(DbContextOptionsBuilder). See DbContext lifetime, configuration, and initialization for more information and examples. OnModelCreating(ModelBuilder) Override this method to further configure the model that was discovered by convention from the entity types exposed in DbSet<TEntity> properties on your derived context. The resulting model may be cached and re-used for subsequent instances of your derived context. protected override void OnModelCreating(ModelBuilder builder) Parameters builder ModelBuilder Remarks If a model is explicitly set on the options for this context (via UseModel(IModel)) then this method will not be run. However, it will still run when creating a compiled model. See Modeling entity types and relationships for more information and examples."
  },
  "api/Amiquin.Infrastructure.Repositories.BotStatisticsRepository.html": {
    "href": "api/Amiquin.Infrastructure.Repositories.BotStatisticsRepository.html",
    "title": "Class BotStatisticsRepository | Amiquin Documentation",
    "summary": "Class BotStatisticsRepository Namespace Amiquin.Infrastructure.Repositories Assembly Amiquin.Infrastructure.dll public class BotStatisticsRepository : QueryableBaseRepository<string, BotStatistics, AmiquinContext>, IBotStatisticsRepository, IQueryableRepository<string, BotStatistics>, IRepository<string, BotStatistics> Inheritance object BaseRepository<string, BotStatistics, AmiquinContext> QueryableBaseRepository<string, BotStatistics, AmiquinContext> BotStatisticsRepository Implements IBotStatisticsRepository IQueryableRepository<string, BotStatistics> IRepository<string, BotStatistics> Inherited Members QueryableBaseRepository<string, BotStatistics, AmiquinContext>.AsQueryable() BaseRepository<string, BotStatistics, AmiquinContext>._context BaseRepository<string, BotStatistics, AmiquinContext>.AddAsync(BotStatistics) BaseRepository<string, BotStatistics, AmiquinContext>.AddRangeAsync(IEnumerable<BotStatistics>) BaseRepository<string, BotStatistics, AmiquinContext>.GetAsync(string) BaseRepository<string, BotStatistics, AmiquinContext>.RemoveAsync(string) BaseRepository<string, BotStatistics, AmiquinContext>.RemoveAsync(BotStatistics) BaseRepository<string, BotStatistics, AmiquinContext>.UpdateAsync(BotStatistics) BaseRepository<string, BotStatistics, AmiquinContext>.UpdateRange(IEnumerable<BotStatistics>) BaseRepository<string, BotStatistics, AmiquinContext>.SaveChangesAsync() BaseRepository<string, BotStatistics, AmiquinContext>.RemoveRangeAsync(IEnumerable<BotStatistics>) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors BotStatisticsRepository(AmiquinContext) public BotStatisticsRepository(AmiquinContext context) Parameters context AmiquinContext"
  },
  "api/Amiquin.Infrastructure.Repositories.CommandLogRepository.html": {
    "href": "api/Amiquin.Infrastructure.Repositories.CommandLogRepository.html",
    "title": "Class CommandLogRepository | Amiquin Documentation",
    "summary": "Class CommandLogRepository Namespace Amiquin.Infrastructure.Repositories Assembly Amiquin.Infrastructure.dll public class CommandLogRepository : QueryableBaseRepository<int, CommandLog, AmiquinContext>, ICommandLogRepository, IQueryableRepository<int, CommandLog>, IRepository<int, CommandLog> Inheritance object BaseRepository<int, CommandLog, AmiquinContext> QueryableBaseRepository<int, CommandLog, AmiquinContext> CommandLogRepository Implements ICommandLogRepository IQueryableRepository<int, CommandLog> IRepository<int, CommandLog> Inherited Members QueryableBaseRepository<int, CommandLog, AmiquinContext>.AsQueryable() BaseRepository<int, CommandLog, AmiquinContext>._context BaseRepository<int, CommandLog, AmiquinContext>.AddAsync(CommandLog) BaseRepository<int, CommandLog, AmiquinContext>.AddRangeAsync(IEnumerable<CommandLog>) BaseRepository<int, CommandLog, AmiquinContext>.GetAsync(int) BaseRepository<int, CommandLog, AmiquinContext>.RemoveAsync(int) BaseRepository<int, CommandLog, AmiquinContext>.RemoveAsync(CommandLog) BaseRepository<int, CommandLog, AmiquinContext>.UpdateAsync(CommandLog) BaseRepository<int, CommandLog, AmiquinContext>.UpdateRange(IEnumerable<CommandLog>) BaseRepository<int, CommandLog, AmiquinContext>.SaveChangesAsync() BaseRepository<int, CommandLog, AmiquinContext>.RemoveRangeAsync(IEnumerable<CommandLog>) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors CommandLogRepository(AmiquinContext) public CommandLogRepository(AmiquinContext context) Parameters context AmiquinContext"
  },
  "api/Amiquin.Infrastructure.Repositories.MessageRepository.html": {
    "href": "api/Amiquin.Infrastructure.Repositories.MessageRepository.html",
    "title": "Class MessageRepository | Amiquin Documentation",
    "summary": "Class MessageRepository Namespace Amiquin.Infrastructure.Repositories Assembly Amiquin.Infrastructure.dll public class MessageRepository : QueryableBaseRepository<string, Message, AmiquinContext>, IMessageRepository, IQueryableRepository<string, Message>, IRepository<string, Message> Inheritance object BaseRepository<string, Message, AmiquinContext> QueryableBaseRepository<string, Message, AmiquinContext> MessageRepository Implements IMessageRepository IQueryableRepository<string, Message> IRepository<string, Message> Inherited Members QueryableBaseRepository<string, Message, AmiquinContext>.AsQueryable() BaseRepository<string, Message, AmiquinContext>._context BaseRepository<string, Message, AmiquinContext>.AddAsync(Message) BaseRepository<string, Message, AmiquinContext>.AddRangeAsync(IEnumerable<Message>) BaseRepository<string, Message, AmiquinContext>.GetAsync(string) BaseRepository<string, Message, AmiquinContext>.RemoveAsync(string) BaseRepository<string, Message, AmiquinContext>.RemoveAsync(Message) BaseRepository<string, Message, AmiquinContext>.UpdateAsync(Message) BaseRepository<string, Message, AmiquinContext>.UpdateRange(IEnumerable<Message>) BaseRepository<string, Message, AmiquinContext>.SaveChangesAsync() BaseRepository<string, Message, AmiquinContext>.RemoveRangeAsync(IEnumerable<Message>) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors MessageRepository(AmiquinContext) public MessageRepository(AmiquinContext context) Parameters context AmiquinContext"
  },
  "api/Amiquin.Infrastructure.Repositories.NachoRepository.html": {
    "href": "api/Amiquin.Infrastructure.Repositories.NachoRepository.html",
    "title": "Class NachoRepository | Amiquin Documentation",
    "summary": "Class NachoRepository Namespace Amiquin.Infrastructure.Repositories Assembly Amiquin.Infrastructure.dll public class NachoRepository : QueryableBaseRepository<int, NachoPack, AmiquinContext>, INachoRepository, IQueryableRepository<int, NachoPack>, IRepository<int, NachoPack> Inheritance object BaseRepository<int, NachoPack, AmiquinContext> QueryableBaseRepository<int, NachoPack, AmiquinContext> NachoRepository Implements INachoRepository IQueryableRepository<int, NachoPack> IRepository<int, NachoPack> Inherited Members QueryableBaseRepository<int, NachoPack, AmiquinContext>.AsQueryable() BaseRepository<int, NachoPack, AmiquinContext>._context BaseRepository<int, NachoPack, AmiquinContext>.AddAsync(NachoPack) BaseRepository<int, NachoPack, AmiquinContext>.AddRangeAsync(IEnumerable<NachoPack>) BaseRepository<int, NachoPack, AmiquinContext>.GetAsync(int) BaseRepository<int, NachoPack, AmiquinContext>.RemoveAsync(int) BaseRepository<int, NachoPack, AmiquinContext>.RemoveAsync(NachoPack) BaseRepository<int, NachoPack, AmiquinContext>.UpdateAsync(NachoPack) BaseRepository<int, NachoPack, AmiquinContext>.UpdateRange(IEnumerable<NachoPack>) BaseRepository<int, NachoPack, AmiquinContext>.SaveChangesAsync() BaseRepository<int, NachoPack, AmiquinContext>.RemoveRangeAsync(IEnumerable<NachoPack>) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors NachoRepository(AmiquinContext) public NachoRepository(AmiquinContext context) Parameters context AmiquinContext"
  },
  "api/Amiquin.Infrastructure.Repositories.ServerMetaRepository.html": {
    "href": "api/Amiquin.Infrastructure.Repositories.ServerMetaRepository.html",
    "title": "Class ServerMetaRepository | Amiquin Documentation",
    "summary": "Class ServerMetaRepository Namespace Amiquin.Infrastructure.Repositories Assembly Amiquin.Infrastructure.dll public class ServerMetaRepository : QueryableBaseRepository<ulong, ServerMeta, AmiquinContext>, IServerMetaRepository, IQueryableRepository<ulong, ServerMeta>, IRepository<ulong, ServerMeta> Inheritance object BaseRepository<ulong, ServerMeta, AmiquinContext> QueryableBaseRepository<ulong, ServerMeta, AmiquinContext> ServerMetaRepository Implements IServerMetaRepository IQueryableRepository<ulong, ServerMeta> IRepository<ulong, ServerMeta> Inherited Members QueryableBaseRepository<ulong, ServerMeta, AmiquinContext>.AsQueryable() BaseRepository<ulong, ServerMeta, AmiquinContext>._context BaseRepository<ulong, ServerMeta, AmiquinContext>.AddAsync(ServerMeta) BaseRepository<ulong, ServerMeta, AmiquinContext>.AddRangeAsync(IEnumerable<ServerMeta>) BaseRepository<ulong, ServerMeta, AmiquinContext>.GetAsync(ulong) BaseRepository<ulong, ServerMeta, AmiquinContext>.RemoveAsync(ulong) BaseRepository<ulong, ServerMeta, AmiquinContext>.RemoveAsync(ServerMeta) BaseRepository<ulong, ServerMeta, AmiquinContext>.UpdateAsync(ServerMeta) BaseRepository<ulong, ServerMeta, AmiquinContext>.UpdateRange(IEnumerable<ServerMeta>) BaseRepository<ulong, ServerMeta, AmiquinContext>.SaveChangesAsync() BaseRepository<ulong, ServerMeta, AmiquinContext>.RemoveRangeAsync(IEnumerable<ServerMeta>) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ServerMetaRepository(AmiquinContext) public ServerMetaRepository(AmiquinContext context) Parameters context AmiquinContext"
  },
  "api/Amiquin.Infrastructure.Repositories.ToggleRepository.html": {
    "href": "api/Amiquin.Infrastructure.Repositories.ToggleRepository.html",
    "title": "Class ToggleRepository | Amiquin Documentation",
    "summary": "Class ToggleRepository Namespace Amiquin.Infrastructure.Repositories Assembly Amiquin.Infrastructure.dll public class ToggleRepository : QueryableBaseRepository<string, Toggle, AmiquinContext>, IToggleRepository, IQueryableRepository<string, Toggle>, IRepository<string, Toggle> Inheritance object BaseRepository<string, Toggle, AmiquinContext> QueryableBaseRepository<string, Toggle, AmiquinContext> ToggleRepository Implements IToggleRepository IQueryableRepository<string, Toggle> IRepository<string, Toggle> Inherited Members QueryableBaseRepository<string, Toggle, AmiquinContext>.AsQueryable() BaseRepository<string, Toggle, AmiquinContext>._context BaseRepository<string, Toggle, AmiquinContext>.AddAsync(Toggle) BaseRepository<string, Toggle, AmiquinContext>.AddRangeAsync(IEnumerable<Toggle>) BaseRepository<string, Toggle, AmiquinContext>.GetAsync(string) BaseRepository<string, Toggle, AmiquinContext>.RemoveAsync(string) BaseRepository<string, Toggle, AmiquinContext>.RemoveAsync(Toggle) BaseRepository<string, Toggle, AmiquinContext>.UpdateAsync(Toggle) BaseRepository<string, Toggle, AmiquinContext>.UpdateRange(IEnumerable<Toggle>) BaseRepository<string, Toggle, AmiquinContext>.SaveChangesAsync() BaseRepository<string, Toggle, AmiquinContext>.RemoveRangeAsync(IEnumerable<Toggle>) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ToggleRepository(AmiquinContext) public ToggleRepository(AmiquinContext context) Parameters context AmiquinContext"
  },
  "api/Amiquin.Infrastructure.Repositories.html": {
    "href": "api/Amiquin.Infrastructure.Repositories.html",
    "title": "Namespace Amiquin.Infrastructure.Repositories | Amiquin Documentation",
    "summary": "Namespace Amiquin.Infrastructure.Repositories Classes BotStatisticsRepository CommandLogRepository MessageRepository NachoRepository ServerMetaRepository ToggleRepository"
  },
  "api/Amiquin.Infrastructure.Setup.html": {
    "href": "api/Amiquin.Infrastructure.Setup.html",
    "title": "Class Setup | Amiquin Documentation",
    "summary": "Class Setup Namespace Amiquin.Infrastructure Assembly Amiquin.Infrastructure.dll public static class Setup Inheritance object Setup Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods AddAmiquinContext(IServiceCollection, IConfiguration) Adds the SQLite database context to the service collection. public static IServiceCollection AddAmiquinContext(this IServiceCollection services, IConfiguration configuration) Parameters services IServiceCollection The service collection to add to. configuration IConfiguration The application configuration from which to read the connection string. Returns IServiceCollection The updated service collection. AddAmiquinMySqlContext(IServiceCollection, IConfiguration) Adds the MySQL database context to the service collection. public static IServiceCollection AddAmiquinMySqlContext(this IServiceCollection services, IConfiguration configuration) Parameters services IServiceCollection The service collection to add to. configuration IConfiguration The application configuration from which to read the connection string. Returns IServiceCollection The updated service collection."
  },
  "api/Amiquin.Infrastructure.html": {
    "href": "api/Amiquin.Infrastructure.html",
    "title": "Namespace Amiquin.Infrastructure | Amiquin Documentation",
    "summary": "Namespace Amiquin.Infrastructure Classes AmiquinContext Setup"
  },
  "api/Amiquin.IntegrationTests.Fixtures.DatabaseFixture.html": {
    "href": "api/Amiquin.IntegrationTests.Fixtures.DatabaseFixture.html",
    "title": "Class DatabaseFixture | Amiquin Documentation",
    "summary": "Class DatabaseFixture Namespace Amiquin.IntegrationTests.Fixtures Assembly Amiquin.IntegrationTests.dll public class DatabaseFixture : IDisposable Inheritance object DatabaseFixture Implements IDisposable Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors DatabaseFixture() public DatabaseFixture() Properties DbContext public AmiquinContext DbContext { get; } Property Value AmiquinContext ServiceProvider public IServiceProvider ServiceProvider { get; } Property Value IServiceProvider Methods CleanupAsync() public Task CleanupAsync() Returns Task Dispose() Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources. public void Dispose() SeedTestDataAsync() public Task SeedTestDataAsync() Returns Task"
  },
  "api/Amiquin.IntegrationTests.Fixtures.html": {
    "href": "api/Amiquin.IntegrationTests.Fixtures.html",
    "title": "Namespace Amiquin.IntegrationTests.Fixtures | Amiquin Documentation",
    "summary": "Namespace Amiquin.IntegrationTests.Fixtures Classes DatabaseFixture"
  },
  "api/Amiquin.IntegrationTests.Services.MessageCacheServiceIntegrationTests.html": {
    "href": "api/Amiquin.IntegrationTests.Services.MessageCacheServiceIntegrationTests.html",
    "title": "Class MessageCacheServiceIntegrationTests | Amiquin Documentation",
    "summary": "Class MessageCacheServiceIntegrationTests Namespace Amiquin.IntegrationTests.Services Assembly Amiquin.IntegrationTests.dll public class MessageCacheServiceIntegrationTests : IClassFixture<DatabaseFixture> Inheritance object MessageCacheServiceIntegrationTests Implements IClassFixture<DatabaseFixture> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors MessageCacheServiceIntegrationTests(DatabaseFixture) public MessageCacheServiceIntegrationTests(DatabaseFixture fixture) Parameters fixture DatabaseFixture Methods AddChatExchangeAsync_ShouldPersistMessagesToDatabase() [Fact] public Task AddChatExchangeAsync_ShouldPersistMessagesToDatabase() Returns Task ClearMessageCachce_ShouldRemoveSpecificCacheKeys() [Fact] public void ClearMessageCachce_ShouldRemoveSpecificCacheKeys() ClearOldMessages_ShouldRemoveOldestMessagesFromCache() [Fact] public void ClearOldMessages_ShouldRemoveOldestMessagesFromCache() GetChatMessageCount_WithCachedMessages_ShouldReturnCorrectCount() [Fact] public void GetChatMessageCount_WithCachedMessages_ShouldReturnCorrectCount() GetChatMessageCount_WithNoCachedMessages_ShouldReturnZero() [Fact] public void GetChatMessageCount_WithNoCachedMessages_ShouldReturnZero() GetOrCreateChatMessagesAsync_WithExistingMessages_ShouldReturnMessagesFromDatabase() [Fact] public Task GetOrCreateChatMessagesAsync_WithExistingMessages_ShouldReturnMessagesFromDatabase() Returns Task GetOrCreateChatMessagesAsync_WithNoExistingMessages_ShouldReturnEmptyList() [Fact] public Task GetOrCreateChatMessagesAsync_WithNoExistingMessages_ShouldReturnEmptyList() Returns Task MessagePersistence_ShouldWorkAcrossServiceInstances() [Fact] public Task MessagePersistence_ShouldWorkAcrossServiceInstances() Returns Task ModifyMessage_ShouldUpdateCacheWithNewValue() [Fact] public void ModifyMessage_ShouldUpdateCacheWithNewValue()"
  },
  "api/Amiquin.IntegrationTests.Services.NachoServiceIntegrationTests.html": {
    "href": "api/Amiquin.IntegrationTests.Services.NachoServiceIntegrationTests.html",
    "title": "Class NachoServiceIntegrationTests | Amiquin Documentation",
    "summary": "Class NachoServiceIntegrationTests Namespace Amiquin.IntegrationTests.Services Assembly Amiquin.IntegrationTests.dll public class NachoServiceIntegrationTests : IClassFixture<DatabaseFixture> Inheritance object NachoServiceIntegrationTests Implements IClassFixture<DatabaseFixture> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors NachoServiceIntegrationTests(DatabaseFixture) public NachoServiceIntegrationTests(DatabaseFixture fixture) Parameters fixture DatabaseFixture Methods AddNachoAsync_ExceedingDailyLimit_ShouldThrowException() [Fact] public Task AddNachoAsync_ExceedingDailyLimit_ShouldThrowException() Returns Task AddNachoAsync_ShouldAddNachoAndIncrementCount() [Fact] public Task AddNachoAsync_ShouldAddNachoAndIncrementCount() Returns Task AddNachoAsync_WithDefaultCount_ShouldAddOneNacho() [Fact] public Task AddNachoAsync_WithDefaultCount_ShouldAddOneNacho() Returns Task AddNachoAsync_WithNegativeCount_ShouldThrowException() [Fact] public Task AddNachoAsync_WithNegativeCount_ShouldThrowException() Returns Task DailyLimitReset_ShouldAllowNewNachosNextDay() [Fact] public Task DailyLimitReset_ShouldAllowNewNachosNextDay() Returns Task GetServerNachoCountAsync_WithMultipleUsers_ShouldReturnTotalForServer() [Fact] public Task GetServerNachoCountAsync_WithMultipleUsers_ShouldReturnTotalForServer() Returns Task GetTotalNachoCountAsync_ShouldReturnSumOfAllNachos() [Fact] public Task GetTotalNachoCountAsync_ShouldReturnSumOfAllNachos() Returns Task GetUserNachoCountAsync_WithMultipleServers_ShouldReturnTotalForUser() [Fact] public Task GetUserNachoCountAsync_WithMultipleServers_ShouldReturnTotalForUser() Returns Task RemoveAllNachoAsync_ShouldRemoveAllNachosForUser() [Fact] public Task RemoveAllNachoAsync_ShouldRemoveAllNachosForUser() Returns Task RemoveAllServerNachoAsync_ShouldRemoveAllNachosForServer() [Fact] public Task RemoveAllServerNachoAsync_ShouldRemoveAllNachosForServer() Returns Task RemoveNachoAsync_WithExistingNacho_ShouldRemoveNacho() [Fact] public Task RemoveNachoAsync_WithExistingNacho_ShouldRemoveNacho() Returns Task RemoveNachoAsync_WithNonExistentNacho_ShouldNotThrow() [Fact] public Task RemoveNachoAsync_WithNonExistentNacho_ShouldNotThrow() Returns Task"
  },
  "api/Amiquin.IntegrationTests.Services.ServerMetaServiceIntegrationTests.html": {
    "href": "api/Amiquin.IntegrationTests.Services.ServerMetaServiceIntegrationTests.html",
    "title": "Class ServerMetaServiceIntegrationTests | Amiquin Documentation",
    "summary": "Class ServerMetaServiceIntegrationTests Namespace Amiquin.IntegrationTests.Services Assembly Amiquin.IntegrationTests.dll public class ServerMetaServiceIntegrationTests : IClassFixture<DatabaseFixture> Inheritance object ServerMetaServiceIntegrationTests Implements IClassFixture<DatabaseFixture> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ServerMetaServiceIntegrationTests(DatabaseFixture) public ServerMetaServiceIntegrationTests(DatabaseFixture fixture) Parameters fixture DatabaseFixture Methods CreateServerMetaAsync_ShouldCreateAndReturnNewServerMeta() [Fact] public Task CreateServerMetaAsync_ShouldCreateAndReturnNewServerMeta() Returns Task DeleteServerMetaAsync_ShouldRemoveServerMeta() [Fact] public Task DeleteServerMetaAsync_ShouldRemoveServerMeta() Returns Task GetAllServerMetasAsync_ShouldReturnAllServerMetas() [Fact] public Task GetAllServerMetasAsync_ShouldReturnAllServerMetas() Returns Task GetServerMetaAsync_WithExistingServer_ShouldReturnServerMeta() [Fact] public Task GetServerMetaAsync_WithExistingServer_ShouldReturnServerMeta() Returns Task GetServerMetaAsync_WithIncludeToggles_ShouldLoadToggles() [Fact] public Task GetServerMetaAsync_WithIncludeToggles_ShouldLoadToggles() Returns Task GetServerMetaAsync_WithNonExistentServer_ShouldReturnNull() [Fact] public Task GetServerMetaAsync_WithNonExistentServer_ShouldReturnNull() Returns Task UpdateServerMetaAsync_ShouldUpdateExistingServerMeta() [Fact] public Task UpdateServerMetaAsync_ShouldUpdateExistingServerMeta() Returns Task"
  },
  "api/Amiquin.IntegrationTests.Services.ServiceIntegrationTests.html": {
    "href": "api/Amiquin.IntegrationTests.Services.ServiceIntegrationTests.html",
    "title": "Class ServiceIntegrationTests | Amiquin Documentation",
    "summary": "Class ServiceIntegrationTests Namespace Amiquin.IntegrationTests.Services Assembly Amiquin.IntegrationTests.dll public class ServiceIntegrationTests : IClassFixture<DatabaseFixture> Inheritance object ServiceIntegrationTests Implements IClassFixture<DatabaseFixture> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ServiceIntegrationTests(DatabaseFixture) public ServiceIntegrationTests(DatabaseFixture fixture) Parameters fixture DatabaseFixture Methods BulkOperations_ShouldMaintainDataConsistency() [Fact] public Task BulkOperations_ShouldMaintainDataConsistency() Returns Task CompleteServerWorkflow_ShouldWorkEndToEnd() [Fact] public Task CompleteServerWorkflow_ShouldWorkEndToEnd() Returns Task MultiServerScenario_ShouldIsolateDataCorrectly() [Fact] public Task MultiServerScenario_ShouldIsolateDataCorrectly() Returns Task ServerDeactivation_ShouldAffectToggleBehavior() [Fact] public Task ServerDeactivation_ShouldAffectToggleBehavior() Returns Task"
  },
  "api/Amiquin.IntegrationTests.Services.ToggleServiceIntegrationTests.html": {
    "href": "api/Amiquin.IntegrationTests.Services.ToggleServiceIntegrationTests.html",
    "title": "Class ToggleServiceIntegrationTests | Amiquin Documentation",
    "summary": "Class ToggleServiceIntegrationTests Namespace Amiquin.IntegrationTests.Services Assembly Amiquin.IntegrationTests.dll public class ToggleServiceIntegrationTests : IClassFixture<DatabaseFixture> Inheritance object ToggleServiceIntegrationTests Implements IClassFixture<DatabaseFixture> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ToggleServiceIntegrationTests(DatabaseFixture) public ToggleServiceIntegrationTests(DatabaseFixture fixture) Parameters fixture DatabaseFixture Methods CreateServerTogglesIfNotExistsAsync_WithExistingToggles_ShouldNotDuplicate() [Fact] public Task CreateServerTogglesIfNotExistsAsync_WithExistingToggles_ShouldNotDuplicate() Returns Task GetTogglesByServerId_ShouldReturnAllServerToggles() [Fact] public Task GetTogglesByServerId_ShouldReturnAllServerToggles() Returns Task IsEnabledAsync_WithActiveServerAndDisabledToggle_ShouldReturnFalse() [Fact] public Task IsEnabledAsync_WithActiveServerAndDisabledToggle_ShouldReturnFalse() Returns Task IsEnabledAsync_WithActiveServerAndEnabledToggle_ShouldReturnTrue() [Fact] public Task IsEnabledAsync_WithActiveServerAndEnabledToggle_ShouldReturnTrue() Returns Task IsEnabledAsync_WithInactiveServer_ShouldReturnFalse() [Fact] public Task IsEnabledAsync_WithInactiveServer_ShouldReturnFalse() Returns Task IsEnabledAsync_WithNonExistentServer_ShouldReturnTrue() [Fact] public Task IsEnabledAsync_WithNonExistentServer_ShouldReturnTrue() Returns Task SetServerToggleAsync_WithExistingToggle_ShouldUpdateToggle() [Fact] public Task SetServerToggleAsync_WithExistingToggle_ShouldUpdateToggle() Returns Task SetServerToggleAsync_WithNewToggle_ShouldCreateToggle() [Fact] public Task SetServerToggleAsync_WithNewToggle_ShouldCreateToggle() Returns Task SetServerTogglesBulkAsync_ShouldCreateMultipleToggles() [Fact] public Task SetServerTogglesBulkAsync_ShouldCreateMultipleToggles() Returns Task"
  },
  "api/Amiquin.IntegrationTests.Services.html": {
    "href": "api/Amiquin.IntegrationTests.Services.html",
    "title": "Namespace Amiquin.IntegrationTests.Services | Amiquin Documentation",
    "summary": "Namespace Amiquin.IntegrationTests.Services Classes MessageCacheServiceIntegrationTests NachoServiceIntegrationTests ServerMetaServiceIntegrationTests ServiceIntegrationTests ToggleServiceIntegrationTests"
  },
  "api/Amiquin.MySql.Migrations.Init_MySql.html": {
    "href": "api/Amiquin.MySql.Migrations.Init_MySql.html",
    "title": "Class Init_MySql | Amiquin Documentation",
    "summary": "Class Init_MySql Namespace Amiquin.MySql.Migrations Assembly Amiquin.MySql.dll A base class inherited by each EF Core migration. [DbContext(typeof(AmiquinContext))] [Migration(\"20250623030309_Init_MySql\")] public class Init_MySql : Migration Inheritance object Migration Init_MySql Inherited Members Migration.InitialDatabase Migration.TargetModel Migration.UpOperations Migration.DownOperations Migration.ActiveProvider object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Remarks See Database migrations for more information and examples. Methods BuildTargetModel(ModelBuilder) Implemented to build the TargetModel. protected override void BuildTargetModel(ModelBuilder modelBuilder) Parameters modelBuilder ModelBuilder The ModelBuilder to use to build the model. Remarks See Database migrations for more information and examples. Down(MigrationBuilder) Builds the operations that will migrate the database 'down'. protected override void Down(MigrationBuilder migrationBuilder) Parameters migrationBuilder MigrationBuilder The MigrationBuilder that will build the operations. Remarks That is, builds the operations that will take the database from the state left in by this migration so that it returns to the state that it was in before this migration was applied. This method must be overridden in each class that inherits from Migration if both 'up' and 'down' migrations are to be supported. If it is not overridden, then calling it will throw and it will not be possible to migrate in the 'down' direction. See Database migrations for more information and examples. Up(MigrationBuilder) Builds the operations that will migrate the database 'up'. protected override void Up(MigrationBuilder migrationBuilder) Parameters migrationBuilder MigrationBuilder The MigrationBuilder that will build the operations. Remarks That is, builds the operations that will take the database from the state left in by the previous migration so that it is up-to-date with regard to this migration. This method must be overridden in each class that inherits from Migration. See Database migrations for more information and examples."
  },
  "api/Amiquin.MySql.Migrations.RemovedToggleScope_MySql.html": {
    "href": "api/Amiquin.MySql.Migrations.RemovedToggleScope_MySql.html",
    "title": "Class RemovedToggleScope_MySql | Amiquin Documentation",
    "summary": "Class RemovedToggleScope_MySql Namespace Amiquin.MySql.Migrations Assembly Amiquin.MySql.dll A base class inherited by each EF Core migration. [DbContext(typeof(AmiquinContext))] [Migration(\"20250623052315_RemovedToggleScope_MySql\")] public class RemovedToggleScope_MySql : Migration Inheritance object Migration RemovedToggleScope_MySql Inherited Members Migration.InitialDatabase Migration.TargetModel Migration.UpOperations Migration.DownOperations Migration.ActiveProvider object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Remarks See Database migrations for more information and examples. Methods BuildTargetModel(ModelBuilder) Implemented to build the TargetModel. protected override void BuildTargetModel(ModelBuilder modelBuilder) Parameters modelBuilder ModelBuilder The ModelBuilder to use to build the model. Remarks See Database migrations for more information and examples. Down(MigrationBuilder) Builds the operations that will migrate the database 'down'. protected override void Down(MigrationBuilder migrationBuilder) Parameters migrationBuilder MigrationBuilder The MigrationBuilder that will build the operations. Remarks That is, builds the operations that will take the database from the state left in by this migration so that it returns to the state that it was in before this migration was applied. This method must be overridden in each class that inherits from Migration if both 'up' and 'down' migrations are to be supported. If it is not overridden, then calling it will throw and it will not be possible to migrate in the 'down' direction. See Database migrations for more information and examples. Up(MigrationBuilder) Builds the operations that will migrate the database 'up'. protected override void Up(MigrationBuilder migrationBuilder) Parameters migrationBuilder MigrationBuilder The MigrationBuilder that will build the operations. Remarks That is, builds the operations that will take the database from the state left in by the previous migration so that it is up-to-date with regard to this migration. This method must be overridden in each class that inherits from Migration. See Database migrations for more information and examples."
  },
  "api/Amiquin.MySql.Migrations.html": {
    "href": "api/Amiquin.MySql.Migrations.html",
    "title": "Namespace Amiquin.MySql.Migrations | Amiquin Documentation",
    "summary": "Namespace Amiquin.MySql.Migrations Classes Init_MySql A base class inherited by each EF Core migration. RemovedToggleScope_MySql A base class inherited by each EF Core migration."
  },
  "api/Amiquin.Sqlite.Migrations.Init_SQLite.html": {
    "href": "api/Amiquin.Sqlite.Migrations.Init_SQLite.html",
    "title": "Class Init_SQLite | Amiquin Documentation",
    "summary": "Class Init_SQLite Namespace Amiquin.Sqlite.Migrations Assembly Amiquin.Sqlite.dll A base class inherited by each EF Core migration. [DbContext(typeof(AmiquinContext))] [Migration(\"20250623030304_Init_SQLite\")] public class Init_SQLite : Migration Inheritance object Migration Init_SQLite Inherited Members Migration.InitialDatabase Migration.TargetModel Migration.UpOperations Migration.DownOperations Migration.ActiveProvider object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Remarks See Database migrations for more information and examples. Methods BuildTargetModel(ModelBuilder) Implemented to build the TargetModel. protected override void BuildTargetModel(ModelBuilder modelBuilder) Parameters modelBuilder ModelBuilder The ModelBuilder to use to build the model. Remarks See Database migrations for more information and examples. Down(MigrationBuilder) Builds the operations that will migrate the database 'down'. protected override void Down(MigrationBuilder migrationBuilder) Parameters migrationBuilder MigrationBuilder The MigrationBuilder that will build the operations. Remarks That is, builds the operations that will take the database from the state left in by this migration so that it returns to the state that it was in before this migration was applied. This method must be overridden in each class that inherits from Migration if both 'up' and 'down' migrations are to be supported. If it is not overridden, then calling it will throw and it will not be possible to migrate in the 'down' direction. See Database migrations for more information and examples. Up(MigrationBuilder) Builds the operations that will migrate the database 'up'. protected override void Up(MigrationBuilder migrationBuilder) Parameters migrationBuilder MigrationBuilder The MigrationBuilder that will build the operations. Remarks That is, builds the operations that will take the database from the state left in by the previous migration so that it is up-to-date with regard to this migration. This method must be overridden in each class that inherits from Migration. See Database migrations for more information and examples."
  },
  "api/Amiquin.Sqlite.Migrations.RemovedToggleScope_SQLite.html": {
    "href": "api/Amiquin.Sqlite.Migrations.RemovedToggleScope_SQLite.html",
    "title": "Class RemovedToggleScope_SQLite | Amiquin Documentation",
    "summary": "Class RemovedToggleScope_SQLite Namespace Amiquin.Sqlite.Migrations Assembly Amiquin.Sqlite.dll A base class inherited by each EF Core migration. [DbContext(typeof(AmiquinContext))] [Migration(\"20250623052308_RemovedToggleScope_SQLite\")] public class RemovedToggleScope_SQLite : Migration Inheritance object Migration RemovedToggleScope_SQLite Inherited Members Migration.InitialDatabase Migration.TargetModel Migration.UpOperations Migration.DownOperations Migration.ActiveProvider object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Remarks See Database migrations for more information and examples. Methods BuildTargetModel(ModelBuilder) Implemented to build the TargetModel. protected override void BuildTargetModel(ModelBuilder modelBuilder) Parameters modelBuilder ModelBuilder The ModelBuilder to use to build the model. Remarks See Database migrations for more information and examples. Down(MigrationBuilder) Builds the operations that will migrate the database 'down'. protected override void Down(MigrationBuilder migrationBuilder) Parameters migrationBuilder MigrationBuilder The MigrationBuilder that will build the operations. Remarks That is, builds the operations that will take the database from the state left in by this migration so that it returns to the state that it was in before this migration was applied. This method must be overridden in each class that inherits from Migration if both 'up' and 'down' migrations are to be supported. If it is not overridden, then calling it will throw and it will not be possible to migrate in the 'down' direction. See Database migrations for more information and examples. Up(MigrationBuilder) Builds the operations that will migrate the database 'up'. protected override void Up(MigrationBuilder migrationBuilder) Parameters migrationBuilder MigrationBuilder The MigrationBuilder that will build the operations. Remarks That is, builds the operations that will take the database from the state left in by the previous migration so that it is up-to-date with regard to this migration. This method must be overridden in each class that inherits from Migration. See Database migrations for more information and examples."
  },
  "api/Amiquin.Sqlite.Migrations.html": {
    "href": "api/Amiquin.Sqlite.Migrations.html",
    "title": "Namespace Amiquin.Sqlite.Migrations | Amiquin Documentation",
    "summary": "Namespace Amiquin.Sqlite.Migrations Classes Init_SQLite A base class inherited by each EF Core migration. RemovedToggleScope_SQLite A base class inherited by each EF Core migration."
  },
  "api/Amiquin.Tests.Services.ExternalProcessRunner.ExternalProcessRunnerServiceTests.html": {
    "href": "api/Amiquin.Tests.Services.ExternalProcessRunner.ExternalProcessRunnerServiceTests.html",
    "title": "Class ExternalProcessRunnerServiceTests | Amiquin Documentation",
    "summary": "Class ExternalProcessRunnerServiceTests Namespace Amiquin.Tests.Services.ExternalProcessRunner Assembly Amiquin.Tests.dll public class ExternalProcessRunnerServiceTests Inheritance object ExternalProcessRunnerServiceTests Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ExternalProcessRunnerServiceTests() public ExternalProcessRunnerServiceTests() Methods CreateFfmpegProcess_ShouldLogCorrectInformation() [Fact] public void CreateFfmpegProcess_ShouldLogCorrectInformation() CreateFfmpegProcess_ShouldReturnProcessWithCorrectConfiguration() [Fact] public void CreateFfmpegProcess_ShouldReturnProcessWithCorrectConfiguration() CreateFfmpegProcess_WithEmptyOrNullPath_ShouldStillCreateProcess(string?) [Theory] [InlineData(new object[] { \"\" })] [InlineData(null)] public void CreateFfmpegProcess_WithEmptyOrNullPath_ShouldStillCreateProcess(string? nullOrEmptyValue) Parameters nullOrEmptyValue string CreateFfmpegProcess_WithSpecialCharactersInPath_ShouldHandleCorrectly() [Fact] public void CreateFfmpegProcess_WithSpecialCharactersInPath_ShouldHandleCorrectly() CreatePiperProcess_ShouldLogCorrectInformation() [Fact] public void CreatePiperProcess_ShouldLogCorrectInformation() CreatePiperProcess_ShouldReturnProcessWithCorrectConfiguration() [Fact] public void CreatePiperProcess_ShouldReturnProcessWithCorrectConfiguration() CreatePiperProcess_WithEmptyOrNullPaths_ShouldStillCreateProcess(string?) [Theory] [InlineData(new object[] { \"\" })] [InlineData(null)] public void CreatePiperProcess_WithEmptyOrNullPaths_ShouldStillCreateProcess(string? nullOrEmptyValue) Parameters nullOrEmptyValue string CreatePiperProcess_WithSpecialCharactersInPaths_ShouldHandleCorrectly() [Fact] public void CreatePiperProcess_WithSpecialCharactersInPaths_ShouldHandleCorrectly()"
  },
  "api/Amiquin.Tests.Services.ExternalProcessRunner.html": {
    "href": "api/Amiquin.Tests.Services.ExternalProcessRunner.html",
    "title": "Namespace Amiquin.Tests.Services.ExternalProcessRunner | Amiquin Documentation",
    "summary": "Namespace Amiquin.Tests.Services.ExternalProcessRunner Classes ExternalProcessRunnerServiceTests"
  },
  "api/Amiquin.Tests.Services.MessageCacheServiceTests.html": {
    "href": "api/Amiquin.Tests.Services.MessageCacheServiceTests.html",
    "title": "Class MessageCacheServiceTests | Amiquin Documentation",
    "summary": "Class MessageCacheServiceTests Namespace Amiquin.Tests.Services Assembly Amiquin.Tests.dll public class MessageCacheServiceTests Inheritance object MessageCacheServiceTests Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors MessageCacheServiceTests() public MessageCacheServiceTests() Methods AddChatExchangeAsync_WithExistingCache_ShouldReplaceMessages() [Fact] public Task AddChatExchangeAsync_WithExistingCache_ShouldReplaceMessages() Returns Task ClearMessageCache_ShouldRemoveAllCachedMessages() [Fact] public void ClearMessageCache_ShouldRemoveAllCachedMessages() ClearOldMessages_WithCachedMessages_ShouldKeepOnlyRecentMessages() [Fact] public void ClearOldMessages_WithCachedMessages_ShouldKeepOnlyRecentMessages() ClearOldMessages_WithNoCachedMessages_ShouldNotThrow() [Fact] public void ClearOldMessages_WithNoCachedMessages_ShouldNotThrow() GetChatMessageCount_WithCachedMessages_ShouldReturnCount() [Fact] public void GetChatMessageCount_WithCachedMessages_ShouldReturnCount() GetChatMessageCount_WithNoCachedMessages_ShouldReturnZero() [Fact] public void GetChatMessageCount_WithNoCachedMessages_ShouldReturnZero() GetChatMessageCount_WithNullCachedMessages_ShouldReturnZero() [Fact] public void GetChatMessageCount_WithNullCachedMessages_ShouldReturnZero() GetOrCreateChatMessagesAsync_ShouldCreateAndCacheMessages() [Fact] public Task GetOrCreateChatMessagesAsync_ShouldCreateAndCacheMessages() Returns Task GetPersonaCoreMessageAsync_ShouldReturnCachedMessage() [Fact] public Task GetPersonaCoreMessageAsync_ShouldReturnCachedMessage() Returns Task GetPersonaCoreMessageAsync_WithNoCache_ShouldReturnNull() [Fact] public Task GetPersonaCoreMessageAsync_WithNoCache_ShouldReturnNull() Returns Task GetServerJoinMessage_ShouldReturnCachedMessage() [Fact] public Task GetServerJoinMessage_ShouldReturnCachedMessage() Returns Task"
  },
  "api/Amiquin.Tests.Services.NachoServiceTests.html": {
    "href": "api/Amiquin.Tests.Services.NachoServiceTests.html",
    "title": "Class NachoServiceTests | Amiquin Documentation",
    "summary": "Class NachoServiceTests Namespace Amiquin.Tests.Services Assembly Amiquin.Tests.dll public class NachoServiceTests Inheritance object NachoServiceTests Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors NachoServiceTests() public NachoServiceTests() Methods AddNachoAsync_ExceedingDailyLimit_ShouldThrowException() [Fact] public Task AddNachoAsync_ExceedingDailyLimit_ShouldThrowException() Returns Task AddNachoAsync_WithPreviousDayNachos_ShouldNotCountTowardsLimit() [Fact] public Task AddNachoAsync_WithPreviousDayNachos_ShouldNotCountTowardsLimit() Returns Task AddNachoAsync_WithValidInput_ShouldAddNacho() [Fact] public Task AddNachoAsync_WithValidInput_ShouldAddNacho() Returns Task AddNachoAsync_WithZeroCount_ShouldThrowException() [Fact] public Task AddNachoAsync_WithZeroCount_ShouldThrowException() Returns Task GetServerNachoCountAsync_ShouldReturnCorrectCount() [Fact] public Task GetServerNachoCountAsync_ShouldReturnCorrectCount() Returns Task GetTotalNachoCountAsync_ShouldReturnTotalCount() [Fact] public Task GetTotalNachoCountAsync_ShouldReturnTotalCount() Returns Task GetUserNachoCountAsync_ShouldReturnCorrectCount() [Fact] public Task GetUserNachoCountAsync_ShouldReturnCorrectCount() Returns Task RemoveAllNachoAsync_WithExistingNachos_ShouldRemoveAll() [Fact] public Task RemoveAllNachoAsync_WithExistingNachos_ShouldRemoveAll() Returns Task RemoveAllServerNachoAsync_WithExistingNachos_ShouldRemoveAll() [Fact] public Task RemoveAllServerNachoAsync_WithExistingNachos_ShouldRemoveAll() Returns Task RemoveNachoAsync_WithExistingNacho_ShouldRemoveNacho() [Fact] public Task RemoveNachoAsync_WithExistingNacho_ShouldRemoveNacho() Returns Task RemoveNachoAsync_WithNonExistingNacho_ShouldNotCallRemove() [Fact] public Task RemoveNachoAsync_WithNonExistingNacho_ShouldNotCallRemove() Returns Task"
  },
  "api/Amiquin.Tests.Services.Persona.PersonaServiceTests.html": {
    "href": "api/Amiquin.Tests.Services.Persona.PersonaServiceTests.html",
    "title": "Class PersonaServiceTests | Amiquin Documentation",
    "summary": "Class PersonaServiceTests Namespace Amiquin.Tests.Services.Persona Assembly Amiquin.Tests.dll public class PersonaServiceTests Inheritance object PersonaServiceTests Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors PersonaServiceTests() public PersonaServiceTests() Methods AddSummaryAsync_WithExistingPersona_ShouldAppendSummary() [Fact] public Task AddSummaryAsync_WithExistingPersona_ShouldAppendSummary() Returns Task AddSummaryAsync_WithNoExistingPersona_ShouldCreateAndAppendSummary() [Fact] public Task AddSummaryAsync_WithNoExistingPersona_ShouldCreateAndAppendSummary() Returns Task GetPersonaAsync_WithCachedPersona_ShouldReturnCachedValue() [Fact] public Task GetPersonaAsync_WithCachedPersona_ShouldReturnCachedValue() Returns Task GetPersonaAsync_WithNewsApiError_ShouldHandleGracefully() [Fact] public Task GetPersonaAsync_WithNewsApiError_ShouldHandleGracefully() Returns Task GetPersonaAsync_WithNoServerPersona_ShouldReturnDefaultPersona() [Fact] public Task GetPersonaAsync_WithNoServerPersona_ShouldReturnDefaultPersona() Returns Task GetPersonaAsync_WithServerPersona_ShouldReturnServerPersonaWithMood() [Fact] public Task GetPersonaAsync_WithServerPersona_ShouldReturnServerPersonaWithMood() Returns Task"
  },
  "api/Amiquin.Tests.Services.Persona.html": {
    "href": "api/Amiquin.Tests.Services.Persona.html",
    "title": "Namespace Amiquin.Tests.Services.Persona | Amiquin Documentation",
    "summary": "Namespace Amiquin.Tests.Services.Persona Classes PersonaServiceTests"
  },
  "api/Amiquin.Tests.Services.ServerMeta.ServerMetaServiceTests.html": {
    "href": "api/Amiquin.Tests.Services.ServerMeta.ServerMetaServiceTests.html",
    "title": "Class ServerMetaServiceTests | Amiquin Documentation",
    "summary": "Class ServerMetaServiceTests Namespace Amiquin.Tests.Services.ServerMeta Assembly Amiquin.Tests.dll public class ServerMetaServiceTests Inheritance object ServerMetaServiceTests Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ServerMetaServiceTests() public ServerMetaServiceTests() Methods DeleteServerMetaAsync_ShouldRemoveServerMetaAndClearCache() [Fact] public Task DeleteServerMetaAsync_ShouldRemoveServerMetaAndClearCache() Returns Task GetOrCreateServerMetaAsync_WithExistingServerMeta_ShouldReturnExistingData() [Fact] public Task GetOrCreateServerMetaAsync_WithExistingServerMeta_ShouldReturnExistingData() Returns Task GetOrCreateServerMetaAsync_WithNoExistingServerMeta_ShouldCreateNewServerMeta() [Fact] public Task GetOrCreateServerMetaAsync_WithNoExistingServerMeta_ShouldCreateNewServerMeta() Returns Task GetServerMetaAsync_WithCachedData_ShouldReturnCachedData() [Fact] public Task GetServerMetaAsync_WithCachedData_ShouldReturnCachedData() Returns Task GetServerMetaAsync_WithIncludeToggles_ShouldLoadToggles() [Fact] public Task GetServerMetaAsync_WithIncludeToggles_ShouldLoadToggles() Returns Task GetServerMetaAsync_WithNoCachedData_ShouldFetchFromRepository() [Fact] public Task GetServerMetaAsync_WithNoCachedData_ShouldFetchFromRepository() Returns Task"
  },
  "api/Amiquin.Tests.Services.ServerMeta.html": {
    "href": "api/Amiquin.Tests.Services.ServerMeta.html",
    "title": "Namespace Amiquin.Tests.Services.ServerMeta | Amiquin Documentation",
    "summary": "Namespace Amiquin.Tests.Services.ServerMeta Classes ServerMetaServiceTests"
  },
  "api/Amiquin.Tests.Services.Voice.MockVoiceService.html": {
    "href": "api/Amiquin.Tests.Services.Voice.MockVoiceService.html",
    "title": "Class MockVoiceService | Amiquin Documentation",
    "summary": "Class MockVoiceService Namespace Amiquin.Tests.Services.Voice Assembly Amiquin.Tests.dll Mock implementation of IVoiceService for testing purposes. This helps verify that the interface contract is sound and can be implemented. public class MockVoiceService : IVoiceService Inheritance object MockVoiceService Implements IVoiceService Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties CreateTextToSpeechAudioAsyncCallCount public int CreateTextToSpeechAudioAsyncCallCount { get; } Property Value int JoinAsyncCallCount public int JoinAsyncCallCount { get; } Property Value int LastFilePath public string? LastFilePath { get; } Property Value string LastText public string? LastText { get; } Property Value string LastVoiceChannel public IVoiceChannel? LastVoiceChannel { get; } Property Value IVoiceChannel LeaveAsyncCallCount public int LeaveAsyncCallCount { get; } Property Value int SpeakAsyncCallCount public int SpeakAsyncCallCount { get; } Property Value int StreamAudioAsyncCallCount public int StreamAudioAsyncCallCount { get; } Property Value int Methods CreateTextToSpeechAudioAsync(string) Creates an audio file from text using text-to-speech conversion. public Task<string> CreateTextToSpeechAudioAsync(string text) Parameters text string The text to convert to speech. Returns Task<string> The file path of the generated audio file. IsConnectedTo(ulong) public bool IsConnectedTo(ulong guildId) Parameters guildId ulong Returns bool JoinAsync(IVoiceChannel) Joins the specified voice channel. public Task JoinAsync(IVoiceChannel channel) Parameters channel IVoiceChannel The Discord voice channel to join. Returns Task LeaveAsync(IVoiceChannel) Leaves the specified voice channel. public Task LeaveAsync(IVoiceChannel channel) Parameters channel IVoiceChannel The Discord voice channel to leave. Returns Task Reset() public void Reset() SpeakAsync(IVoiceChannel, string) Converts text to speech and plays it in the specified voice channel. public Task SpeakAsync(IVoiceChannel voiceChannel, string text) Parameters voiceChannel IVoiceChannel The Discord voice channel to speak in. text string The text to convert to speech and play. Returns Task StreamAudioAsync(IVoiceChannel, string) Streams an audio file to the specified voice channel. public Task StreamAudioAsync(IVoiceChannel voiceChannel, string filePath) Parameters voiceChannel IVoiceChannel The Discord voice channel to stream audio to. filePath string The path to the audio file to stream. Returns Task"
  },
  "api/Amiquin.Tests.Services.Voice.MockVoiceServiceTests.html": {
    "href": "api/Amiquin.Tests.Services.Voice.MockVoiceServiceTests.html",
    "title": "Class MockVoiceServiceTests | Amiquin Documentation",
    "summary": "Class MockVoiceServiceTests Namespace Amiquin.Tests.Services.Voice Assembly Amiquin.Tests.dll public class MockVoiceServiceTests Inheritance object MockVoiceServiceTests Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors MockVoiceServiceTests() public MockVoiceServiceTests() Methods CreateTextToSpeechAudioAsync_ShouldReturnFakePathAndIncrementCounter() [Fact] public Task CreateTextToSpeechAudioAsync_ShouldReturnFakePathAndIncrementCounter() Returns Task IsConnectedTo_ShouldReturnCorrectConnectionState() [Fact] public Task IsConnectedTo_ShouldReturnCorrectConnectionState() Returns Task JoinAsync_ShouldTrackChannelAndIncrementCounter() [Fact] public Task JoinAsync_ShouldTrackChannelAndIncrementCounter() Returns Task LeaveAsync_ShouldRemoveChannelAndIncrementCounter() [Fact] public Task LeaveAsync_ShouldRemoveChannelAndIncrementCounter() Returns Task Reset_ShouldClearAllCountersAndTrackedValues() [Fact] public Task Reset_ShouldClearAllCountersAndTrackedValues() Returns Task SpeakAsync_ShouldCallCreateAndStreamAudioMethods() [Fact] public Task SpeakAsync_ShouldCallCreateAndStreamAudioMethods() Returns Task StreamAudioAsync_ShouldTrackParametersAndIncrementCounter() [Fact] public Task StreamAudioAsync_ShouldTrackParametersAndIncrementCounter() Returns Task"
  },
  "api/Amiquin.Tests.Services.Voice.VoiceServiceTests.html": {
    "href": "api/Amiquin.Tests.Services.Voice.VoiceServiceTests.html",
    "title": "Class VoiceServiceTests | Amiquin Documentation",
    "summary": "Class VoiceServiceTests Namespace Amiquin.Tests.Services.Voice Assembly Amiquin.Tests.dll public class VoiceServiceTests Inheritance object VoiceServiceTests Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors VoiceServiceTests() public VoiceServiceTests() Methods CreateTextToSpeechAudioAsync_ShouldCreateAudioFile() [Fact] public Task CreateTextToSpeechAudioAsync_ShouldCreateAudioFile() Returns Task JoinAsync_ShouldCallConnectVoiceChannelAsync() [Fact] public Task JoinAsync_ShouldCallConnectVoiceChannelAsync() Returns Task LeaveAsync_ShouldCallDisconnectVoiceChannelAsync() [Fact] public Task LeaveAsync_ShouldCallDisconnectVoiceChannelAsync() Returns Task SpeakAsync_ShouldCreateAudioAndStreamIt() [Fact] public Task SpeakAsync_ShouldCreateAudioAndStreamIt() Returns Task StreamAudioAsync_FailedToCreateFfmpegProcess_ShouldLogErrorAndReturn() [Fact] public Task StreamAudioAsync_FailedToCreateFfmpegProcess_ShouldLogErrorAndReturn() Returns Task StreamAudioAsync_FfmpegStartThrowsException_ShouldLogErrorAndReturn() [Fact] public Task StreamAudioAsync_FfmpegStartThrowsException_ShouldLogErrorAndReturn() Returns Task StreamAudioAsync_NullFfmpegOutputStream_ShouldLogErrorAndReturn() [Fact] public Task StreamAudioAsync_NullFfmpegOutputStream_ShouldLogErrorAndReturn() Returns Task StreamAudioAsync_WithNullAmiquinVoice_ShouldLogErrorAndReturn() [Fact] public Task StreamAudioAsync_WithNullAmiquinVoice_ShouldLogErrorAndReturn() Returns Task StreamAudioAsync_WithNullAudioClient_ShouldLogErrorAndReturn() [Fact] public Task StreamAudioAsync_WithNullAudioClient_ShouldLogErrorAndReturn() Returns Task StreamAudioAsync_WithValidAudioClient_ShouldStreamAudio() [Fact] public Task StreamAudioAsync_WithValidAudioClient_ShouldStreamAudio() Returns Task"
  },
  "api/Amiquin.Tests.Services.Voice.html": {
    "href": "api/Amiquin.Tests.Services.Voice.html",
    "title": "Namespace Amiquin.Tests.Services.Voice | Amiquin Documentation",
    "summary": "Namespace Amiquin.Tests.Services.Voice Classes MockVoiceService Mock implementation of IVoiceService for testing purposes. This helps verify that the interface contract is sound and can be implemented. MockVoiceServiceTests VoiceServiceTests"
  },
  "api/Amiquin.Tests.Services.html": {
    "href": "api/Amiquin.Tests.Services.html",
    "title": "Namespace Amiquin.Tests.Services | Amiquin Documentation",
    "summary": "Namespace Amiquin.Tests.Services Classes MessageCacheServiceTests NachoServiceTests"
  },
  "api/index.html": {
    "href": "api/index.html",
    "title": "API Reference | Amiquin Documentation",
    "summary": "API Reference This section contains the complete API documentation for the Amiquin bot project. Namespaces Amiquin.Bot - Bot-related functionality and commands Amiquin.Core - Core services, models, and utilities Amiquin.Infrastructure - Data access and repository implementations Browse the API documentation using the navigation on the left to explore classes, interfaces, and methods."
  },
  "docs/architecture.html": {
    "href": "docs/architecture.html",
    "title": "Architecture Overview | Amiquin Documentation",
    "summary": "Architecture Overview This document provides an overview of Amiquin's architecture and design principles. High-Level Architecture Amiquin follows a clean architecture approach with clear separation of concerns: ┌─────────────────────────────────────────────────────────────┐ │ Presentation Layer │ │ (Amiquin.Bot) │ ├─────────────────────────────────────────────────────────────┤ │ Business Logic Layer │ │ (Amiquin.Core) │ ├─────────────────────────────────────────────────────────────┤ │ Data Access Layer │ │ (Amiquin.Infrastructure) │ ├─────────────────────────────────────────────────────────────┤ │ Database Layer │ │ (SQLite/MySQL) │ └─────────────────────────────────────────────────────────────┘ Project Structure Amiquin.Bot (Presentation Layer) The main bot application responsible for: Discord API Integration: Handling Discord events and responses Command Processing: Slash commands and interaction handling User Interface: Message formatting and user interaction Configuration: Bot settings and dependency injection Key Components: Commands/ - Slash command implementations Configurators/ - Dependency injection setup Messages/ - Bot personality and response templates Preconditions/ - Command validation and authorization Console/ - Logging and console output Amiquin.Core (Business Logic Layer) Contains the core business logic and domain models: Domain Models: Entities and value objects Business Services: Core functionality implementation Repository Interfaces: Data access abstractions Utilities: Helper functions and extensions Key Components: Models/ - Domain entities (User, Server, Settings, etc.) Services/ - Business logic implementation IRepositories/ - Repository contracts Utilities/ - Helper classes and extensions Abstraction/ - Base classes and interfaces Amiquin.Infrastructure (Data Access Layer) Handles data persistence and external service integration: Repository Implementations: Data access logic Database Context: Entity Framework configuration External APIs: Third-party service integrations Caching: Performance optimization Key Components: Repositories/ - Repository implementations AmiquinContext.cs - Database context Setup.cs - Infrastructure configuration Migrations Database schema management: Amiquin.Sqlite/ - SQLite migrations Amiquin.MySql/ - MySQL migrations Design Principles 1. Dependency Inversion All dependencies flow inward toward the core business logic: // Core defines interfaces public interface IUserRepository { Task<User> GetUserAsync(ulong discordId); } // Infrastructure implements public class UserRepository : IUserRepository { // Implementation details } // Bot layer uses abstraction public class UserCommands { private readonly IUserRepository _userRepository; public UserCommands(IUserRepository userRepository) { _userRepository = userRepository; } } 2. Single Responsibility Each class has a single, well-defined responsibility: Commands handle Discord interactions only Services contain business logic Repositories manage data access Models represent domain concepts 3. Open/Closed Principle The system is designed for extension without modification: New commands can be added without changing existing code New features extend existing interfaces Configuration allows runtime behavior changes Key Patterns Repository Pattern Data access is abstracted through repository interfaces: public interface IRepository<T> where T : DbModel { Task<T> GetByIdAsync(int id); Task<T> AddAsync(T entity); Task UpdateAsync(T entity); Task DeleteAsync(T entity); } Service Layer Pattern Business logic is encapsulated in service classes: public interface IUserService { Task<UserDto> GetUserProfileAsync(ulong discordId); Task UpdateUserSettingsAsync(ulong discordId, UserSettings settings); } Command Pattern Discord commands are implemented as separate command classes: [Group(\"user\", \"User management commands\")] public class UserCommands : InteractionModuleBase<ExtendedShardedInteractionContext> { [SlashCommand(\"profile\", \"View user profile\")] public async Task ProfileCommand(IUser user = null) { // Command implementation } } Data Flow Command Execution Flow Discord Event → Bot receives slash command Command Handler → Routes to appropriate command class Service Layer → Executes business logic Repository Layer → Persists/retrieves data Response → Sends result back to Discord Example Flow User types: /user profile @someone ↓ Discord.Net receives interaction ↓ UserCommands.ProfileCommand() called ↓ IUserService.GetUserProfileAsync() called ↓ IUserRepository.GetUserAsync() called ↓ Database query executed ↓ Result formatted and sent to Discord Database Design Core Entities Users: Discord user information and preferences Servers: Discord server settings and configuration Commands: Command usage logging and statistics Messages: Bot messages and templates Relationships Server (1) ←→ (N) Users Server (1) ←→ (N) Settings User (1) ←→ (N) CommandLogs Configuration Management Hierarchical Configuration Configuration is loaded in order of precedence: Environment Variables (highest) appsettings.json appsettings.Development.json Default values (lowest) Configuration Sections Discord: Bot token and client configuration Database: Connection strings and provider settings Logging: Log levels and output configuration Features: Feature flags and toggles Error Handling Centralized Error Handling Command Errors: Handled by Discord.Net command framework Service Errors: Wrapped in custom exceptions Database Errors: Logged and converted to user-friendly messages Logging Strategy Structured Logging: Using Serilog for consistent log format Log Levels: Appropriate levels for different scenarios Log Sinks: Console, file, and external logging services Performance Considerations Caching Strategy In-Memory Caching: For frequently accessed data Distributed Caching: For scalability (Redis) Cache Invalidation: Event-driven cache updates Database Optimization Connection Pooling: Efficient database connections Query Optimization: Proper indexing and query design Lazy Loading: Load data only when needed Discord API Optimization Rate Limiting: Respect Discord API limits Bulk Operations: Batch requests when possible Event Filtering: Process only relevant events Security Considerations Data Protection Sensitive Data: Encrypt tokens and API keys User Privacy: Minimal data collection Data Retention: Automatic cleanup of old data Access Control Permission System: Discord role-based permissions Command Preconditions: Validate user authorization Rate Limiting: Prevent abuse and spam Deployment Architecture Container Strategy Multi-Stage Builds: Optimized Docker images Health Checks: Container health monitoring Resource Limits: CPU and memory constraints Scalability Horizontal Scaling: Multiple bot instances Database Scaling: Read replicas and sharding Load Balancing: Distribute connections This architecture ensures maintainability, scalability, and extensibility while providing a solid foundation for Amiquin's features."
  },
  "docs/commands.html": {
    "href": "docs/commands.html",
    "title": "Commands Reference | Amiquin Documentation",
    "summary": "Commands Reference This document lists all available Amiquin commands and their usage. General Commands /help Description: Display help information and available commands Usage: /help [command] Parameters: command (optional): Get help for a specific command Examples: /help /help ping /ping Description: Check bot responsiveness and latency Usage: /ping Response: Shows bot latency and API response time /info Description: Display bot information and statistics Usage: /info Response: Bot version, uptime, server count, and system info /about Description: Learn about Amiquin and its features Usage: /about Response: Bot description, links, and credits User Commands /user profile Description: View user profile and statistics Usage: /user profile [user] Parameters: user (optional): User to view profile for (defaults to yourself) /user settings Description: Manage your personal bot settings Usage: /user settings Response: Interactive settings menu Server Commands Note: These commands require appropriate permissions /config Description: Server configuration management Usage: /config <setting> <value> Available Settings: prefix: Set command prefix (deprecated in favor of slash commands) welcome_channel: Set welcome message channel log_channel: Set bot logging channel auto_role: Set automatic role for new members Examples: /config welcome_channel #general /config log_channel #bot-logs /config auto_role @Member Moderation Commands Note: Requires appropriate moderation permissions* /kick Description: Kick a user from the server Usage: /kick <user> [reason] Parameters: user: User to kick reason (optional): Reason for the kick /ban Description: Ban a user from the server Usage: /ban <user> [reason] [days] Parameters: user: User to ban reason (optional): Reason for the ban days (optional): Days of messages to delete (0-7) /unban Description: Unban a user from the server Usage: /unban <user_id> [reason] Parameters: user_id: ID of the user to unban reason (optional): Reason for the unban /timeout Description: Timeout a user (mute them temporarily) Usage: /timeout <user> <duration> [reason] Parameters: user: User to timeout duration: Duration (e.g., \"10m\", \"1h\", \"1d\") reason (optional): Reason for the timeout /warn Description: Issue a warning to a user Usage: /warn <user> <reason> Parameters: user: User to warn reason: Reason for the warning Utility Commands /remind Description: Set a reminder Usage: /remind <time> <message> Parameters: time: When to remind (e.g., \"in 30m\", \"tomorrow at 9am\") message: Reminder message /poll Description: Create a poll Usage: /poll <question> <option1> <option2> [option3] [option4] Parameters: question: Poll question option1-4: Poll options (2-4 options supported) /weather Description: Get weather information Usage: /weather <location> Parameters: location: City name or location Fun Commands /8ball Description: Ask the magic 8-ball a question Usage: /8ball <question> Parameters: question: Your yes/no question /dice Description: Roll dice Usage: /dice [sides] [count] Parameters: sides (optional): Number of sides (default: 6) count (optional): Number of dice (default: 1) /flip Description: Flip a coin Usage: /flip Response: Heads or tails /random Description: Generate random numbers or pick from options Usage: /random <min> <max> or /random <option1,option2,option3> Parameters: min: Minimum number max: Maximum number OR comma-separated list of options Music Commands Note: Bot must be in a voice channel* /play Description: Play music from various sources Usage: /play <query> Parameters: query: YouTube URL, search term, or Spotify link /pause Description: Pause current playback Usage: /pause /resume Description: Resume paused playback Usage: /resume /stop Description: Stop playback and clear queue Usage: /stop /skip Description: Skip current track Usage: /skip /queue Description: View current music queue Usage: /queue /volume Description: Adjust playback volume Usage: /volume <level> Parameters: level: Volume level (0-100) Admin Commands Note: These commands require administrator permissions* /admin purge Description: Delete multiple messages Usage: /admin purge <count> [user] Parameters: count: Number of messages to delete (1-100) user (optional): Only delete messages from this user /admin reload Description: Reload bot configuration Usage: /admin reload [module] Parameters: module (optional): Specific module to reload /admin stats Description: View detailed bot statistics Usage: /admin stats Response: Comprehensive bot statistics and performance metrics Permission Requirements Command Category Required Permissions General None User None Server Config Manage Server Moderation Various moderation permissions Utility None Fun None Music Connect, Speak (Voice) Admin Administrator Command Aliases Some commands have shorter aliases: Full Command Alias /user profile /profile /admin stats /stats /8ball /8b Error Messages Common error messages and their meanings: \"Missing permissions\": You don't have the required permissions \"Bot missing permissions\": The bot lacks necessary permissions \"User not found\": The specified user doesn't exist or isn't in the server \"Invalid duration\": Time format is incorrect (use formats like \"1h\", \"30m\") \"Command on cooldown\": Command is rate-limited, try again later Getting Help If you need help with a specific command: Use /help <command> for detailed information Check this documentation Ask in our support server Create an issue on GitHub For command suggestions or feature requests, please use our GitHub repository or join our Discord server."
  },
  "docs/configuration.html": {
    "href": "docs/configuration.html",
    "title": "Configuration Guide | Amiquin Documentation",
    "summary": "Configuration Guide This guide covers how to configure Amiquin for your Discord server and customize its behavior. Bot Configuration Environment Variables Amiquin uses environment variables for configuration. Create a .env file or set these in your hosting environment: # Required DISCORD_TOKEN=your_bot_token_here # Database (choose one) DATABASE_TYPE=sqlite DATABASE_CONNECTION=Data Source=amiquin.db # OR for MySQL # DATABASE_TYPE=mysql # DATABASE_CONNECTION=Server=localhost;Database=amiquin;User=amiquin;Password=your_password; # Optional LOG_LEVEL=Information ENVIRONMENT=Production PREFIX=! Configuration Files appsettings.json { \"Discord\": { \"Token\": \"your_token_here\", \"Prefix\": \"!\", \"ActivityType\": \"Playing\", \"ActivityName\": \"with Discord.Net\" }, \"Database\": { \"Type\": \"sqlite\", \"ConnectionString\": \"Data Source=amiquin.db\" }, \"Logging\": { \"LogLevel\": { \"Default\": \"Information\", \"Microsoft\": \"Warning\", \"System\": \"Warning\" } } } Server Settings Basic Setup After inviting Amiquin to your server, configure basic settings: /config welcome_channel #general /config log_channel #bot-logs /config prefix ! Available Settings Setting Description Default welcome_channel Channel for welcome messages None log_channel Channel for bot logs None prefix Command prefix (legacy) ! auto_role Automatic role for new members None modlog_channel Channel for moderation logs None Permission Setup Required Bot Permissions Send Messages - Basic functionality Use Slash Commands - Modern command interface Embed Links - Rich message formatting Read Message History - Context awareness Optional Permissions Manage Messages - Moderation features Kick Members - Kick command Ban Members - Ban/unban commands Manage Roles - Role management Connect - Voice features Speak - Voice features Role Configuration Setting Up Moderation Roles Create moderation roles in your server Assign appropriate permissions to roles Configure bot to recognize these roles: /config mod_role @Moderator /config admin_role @Administrator Feature Configuration Welcome Messages Configure automatic welcome messages for new members: /config welcome_channel #general /config welcome_message \"Welcome {user} to {server}! Please read #rules\" Available Variables: {user} - User mention {username} - Username {server} - Server name {membercount} - Current member count Auto Moderation Enable automatic moderation features: /config automod_enabled true /config automod_spam_detection true /config automod_link_filter true /config automod_bad_words true Logging Configure what events to log: /config log_joins true /config log_leaves true /config log_bans true /config log_kicks true /config log_message_edits true /config log_message_deletes true Advanced Configuration Database Configuration SQLite (Default) SQLite requires no additional setup: DATABASE_TYPE=sqlite DATABASE_CONNECTION=Data Source=amiquin.db MySQL For MySQL, set up the database first: CREATE DATABASE amiquin; CREATE USER 'amiquin'@'%' IDENTIFIED BY 'your_password'; GRANT ALL PRIVILEGES ON amiquin.* TO 'amiquin'@'%'; FLUSH PRIVILEGES; Then configure: DATABASE_TYPE=mysql DATABASE_CONNECTION=Server=localhost;Database=amiquin;User=amiquin;Password=your_password; Custom Commands Create custom commands for your server: /custom add greet \"Hello {user}, welcome to our awesome server!\" /custom add rules \"Please read our rules in #rules channel\" Scheduled Tasks Configure recurring tasks: /schedule add daily \"Good morning everyone!\" #general 09:00 /schedule add weekly \"Weekly server update!\" #announcements monday 18:00 Troubleshooting Common Issues Bot Not Responding Symptoms: Bot appears online but doesn't respond to commands Solutions: Check bot permissions in the channel Verify bot has \"Use Slash Commands\" permission Check if bot is rate-limited Restart the bot Permission Errors Symptoms: \"Missing permissions\" errors Solutions: Check bot role hierarchy (bot role should be above managed roles) Verify channel-specific permissions Grant necessary permissions in server settings Database Errors Symptoms: Commands fail with database errors Solutions: Check database connection string Verify database permissions Check disk space (for SQLite) Restart bot to reset connections Getting Help Check bot logs in your configured log channel Use the help command: /help Join support server: [Discord Server Link] Create GitHub issue: GitHub Issues Debug Mode Enable debug mode for detailed logging: LOG_LEVEL=Debug Warning: Debug mode generates lots of logs. Only use for troubleshooting. Migration From Other Bots When migrating from other Discord bots: Export settings from your previous bot (if possible) Configure Amiquin with similar settings Test functionality before removing the old bot Update documentation and inform users Backup and Restore Backing Up Configuration # Backup SQLite database cp amiquin.db amiquin.db.backup # Backup configuration cp appsettings.json appsettings.json.backup Restoring Configuration # Restore database cp amiquin.db.backup amiquin.db # Restore configuration cp appsettings.json.backup appsettings.json Performance Optimization Large Servers For servers with many members: Enable database indexing Use MySQL instead of SQLite Configure caching: CACHE_ENABLED=true CACHE_EXPIRY=3600 Resource Limits Monitor and configure resource usage: MAX_MEMORY_MB=512 MAX_CPU_PERCENT=80 RATE_LIMIT_PER_USER=5 RATE_LIMIT_WINDOW=60 This completes the basic configuration guide. For more advanced configurations, check the Development Guide or consult the API documentation."
  },
  "docs/contributing.html": {
    "href": "docs/contributing.html",
    "title": "Contributing to Amiquin | Amiquin Documentation",
    "summary": "Contributing to Amiquin Thank you for your interest in contributing to Amiquin! This guide will help you get started with contributing to the project. Code of Conduct By participating in this project, you agree to abide by our Code of Conduct: Be respectful to all community members Be constructive in discussions and feedback Be helpful to newcomers and fellow contributors Be patient with questions and different skill levels Ways to Contribute 1. Reporting Bugs Help us improve by reporting bugs you encounter: Check existing issues to avoid duplicates Use the bug report template when creating issues Provide detailed information: Steps to reproduce Expected vs actual behavior Environment details (OS, .NET version) Error messages or logs 2. Suggesting Features We welcome feature suggestions: Check the roadmap for planned features Use the feature request template Explain the use case and benefits Consider implementation complexity 3. Contributing Code Prerequisites Before contributing code, ensure you have: .NET 9.0 SDK installed Git for version control Discord bot for testing Development environment set up (see Development Guide) Getting Started Fork the repository on GitHub Clone your fork locally: git clone https://github.com/YOUR_USERNAME/Amiquin.git cd Amiquin Set up the development environment (see Development Guide) Create a feature branch: git checkout -b feature/your-feature-name Making Changes Follow coding standards (see Code Style section) Write tests for new functionality Update documentation as needed Test your changes thoroughly Submitting Changes Commit your changes with descriptive messages: git add . git commit -m \"feat: add new command for user management\" Push to your fork: git push origin feature/your-feature-name Create a pull request with: Clear title and description Reference to related issues Screenshots if applicable 4. Documentation Help improve our documentation: Fix typos and grammatical errors Add examples and clarifications Update outdated information Translate documentation to other languages 5. Testing Contribute to test coverage: Write unit tests for existing code Add integration tests for new features Test edge cases and error scenarios Performance testing for optimization Code Style Guidelines General Principles Consistency: Follow existing code patterns Readability: Write self-documenting code Simplicity: Prefer simple, clear solutions Performance: Consider performance implications C# Style Guidelines Naming Conventions // Classes: PascalCase public class UserService { } // Methods: PascalCase public async Task GetUserAsync() { } // Properties: PascalCase public string UserName { get; set; } // Fields: camelCase with underscore prefix for private private readonly IUserRepository _userRepository; // Constants: PascalCase public const string DefaultPrefix = \"!\"; // Parameters and local variables: camelCase public void ProcessUser(User user, string userName) { } Code Organization // Using statements at the top using System; using System.Threading.Tasks; using Discord; namespace Amiquin.Bot.Commands { // Class summary documentation /// <summary> /// Handles user-related commands and interactions. /// </summary> public class UserCommands : InteractionModuleBase<ExtendedShardedInteractionContext> { // Fields first private readonly IUserService _userService; // Constructor public UserCommands(IUserService userService) { _userService = userService; } // Methods [SlashCommand(\"profile\", \"View user profile\")] public async Task ProfileCommand(IUser user = null) { // Implementation } } } Formatting Use EditorConfig: The project includes .editorconfig for consistent formatting Run formatter: Use dotnet format before committing Indentation: 4 spaces (no tabs) Line length: Aim for 120 characters or less Braces: Opening brace on same line for methods, new line for classes Commit Message Format Use Conventional Commits format: <type>[optional scope]: <description> [optional body] [optional footer(s)] Types feat: New feature fix: Bug fix docs: Documentation changes style: Code style changes (formatting, etc.) refactor: Code refactoring test: Adding or updating tests chore: Build process or auxiliary tool changes Examples feat(commands): add user profile command Add new slash command to display user profiles with statistics and customizable display options. Closes #123 fix(database): resolve connection timeout issues Increase connection timeout and add retry logic for database operations to handle temporary network issues. Fixes #456 Pull Request Process Before Submitting Ensure tests pass: Run dotnet test locally Format code: Run dotnet format Update documentation: Include relevant docs updates Test thoroughly: Test your changes in various scenarios Pull Request Guidelines Clear title: Use descriptive title following conventional commits Detailed description: Explain what changes were made and why Link issues: Reference related issues using keywords (Fixes #123) Screenshots: Include screenshots for UI changes Breaking changes: Clearly mark any breaking changes Review Process Automated checks: Ensure CI/CD passes Code review: Address reviewer feedback promptly Testing: Reviewers will test functionality Approval: At least one maintainer approval required Merge: Maintainers will merge approved PRs Development Workflow Branch Strategy main: Stable, production-ready code develop: Integration branch for features feature/: Feature development branches hotfix/: Critical bug fixes release/: Release preparation branches Testing Strategy Unit Tests [Fact] public async Task GetUserAsync_ValidId_ReturnsUser() { // Arrange var userId = 123456789; var expectedUser = new User { DiscordId = userId }; _mockRepository.Setup(r => r.GetUserAsync(userId)) .ReturnsAsync(expectedUser); // Act var result = await _userService.GetUserAsync(userId); // Assert Assert.Equal(expectedUser, result); } Integration Tests Test complete workflows including database interactions and external services. Documentation Updates When contributing, update relevant documentation: Code comments: Add XML documentation for public APIs README files: Update setup and usage instructions API docs: Update DocFX documentation Change logs: Add entries for significant changes Getting Help Resources Documentation: Check existing docs first Issues: Search existing issues for similar problems Discussions: Use GitHub Discussions for questions Discord: Join our development Discord server Asking Questions When asking for help: Search first: Check if the question was already answered Be specific: Provide context and details Include code: Share relevant code snippets Describe attempts: What have you already tried? Mentoring New contributors can get help from experienced developers: Good first issues: Look for issues labeled \"good first issue\" Pair programming: Request help with complex features Code reviews: Learn from feedback on your PRs Recognition We appreciate all contributions! Contributors are recognized through: Contributors section in README Release notes mention significant contributions Discord roles for active contributors Maintainer status for long-term contributors License By contributing to Amiquin, you agree that your contributions will be licensed under the MIT License. Thank you for contributing to Amiquin! \uD83E\uDD16"
  },
  "docs/development.html": {
    "href": "docs/development.html",
    "title": "Development Guide | Amiquin Documentation",
    "summary": "Development Guide This guide covers setting up a local development environment for Amiquin and contributing to the project. Prerequisites Before you begin, ensure you have the following installed: .NET 9.0 SDK - Download here Git - Download here Docker (optional) - Download here IDE/Editor - Visual Studio, VS Code, or JetBrains Rider Setting Up Development Environment 1. Clone the Repository git clone https://github.com/huebyte/Amiquin.git cd Amiquin 2. Configure Environment # Copy example configuration cp source/Amiquin.Bot/appsettings.example.json source/Amiquin.Bot/appsettings.json cp .env.example .env # Edit configuration files with your settings 3. Install Dependencies # Restore NuGet packages dotnet restore source/source.sln 4. Create Discord Bot Application Go to Discord Developer Portal Create a new application Navigate to the \"Bot\" section Create a bot and copy the token Update your appsettings.json or .env file with the token 5. Database Setup Option A: SQLite (Default) No additional setup required. The database will be created automatically. Option B: MySQL (Docker) # Start MySQL container docker-compose up -d mysql # Update your configuration to use MySQL 6. Build and Run # Build the solution dotnet build source/source.sln # Run the bot dotnet run --project source/Amiquin.Bot Project Structure Amiquin/ ├── source/ │ ├── Amiquin.Bot/ # Main bot application │ │ ├── Commands/ # Slash commands and command handlers │ │ ├── Configurators/ # Dependency injection setup │ │ ├── Messages/ # Bot personality and messages │ │ └── Preconditions/ # Command preconditions │ ├── Amiquin.Core/ # Core business logic │ │ ├── Models/ # Domain models │ │ ├── Services/ # Business services │ │ └── IRepositories/ # Repository interfaces │ ├── Amiquin.Infrastructure/ # Data access layer │ │ └── Repositories/ # Repository implementations │ └── Migrations/ # Database migrations ├── docs/ # Documentation ├── .github/ # CI/CD workflows └── docker-compose.yml # Docker setup Development Workflow 1. Creating a New Feature # Create a feature branch git checkout -b feature/your-feature-name # Make your changes # ... code changes ... # Commit your changes git add . git commit -m \"feat: add new feature\" # Push to GitHub git push origin feature/your-feature-name 2. Adding New Commands Create a new command class in source/Amiquin.Bot/Commands/ Inherit from InteractionModuleBase<ExtendedShardedInteractionContext> Use [SlashCommand] attribute for slash commands Add any required services via dependency injection Example: [Group(\"example\", \"Example command group\")] public class ExampleCommands : InteractionModuleBase<ExtendedShardedInteractionContext> { [SlashCommand(\"hello\", \"Say hello\")] public async Task HelloCommand() { await RespondAsync(\"Hello, world!\"); } } 3. Adding New Services Create interface in source/Amiquin.Core/Services/ Implement service in source/Amiquin.Core/Services/ Register in source/Amiquin.Bot/Configurators/InjectionConfigurator.cs 4. Database Changes Update models in source/Amiquin.Core/Models/ Create migration: dotnet ef migrations add YourMigrationName --project source/Migrations/Amiquin.Sqlite Update database: dotnet ef database update --project source/Migrations/Amiquin.Sqlite Code Style Guidelines General Principles Follow C# naming conventions Use meaningful variable and method names Write clear, concise comments Keep methods focused and small Use dependency injection for services Formatting The project uses .editorconfig for consistent formatting. Run: dotnet format source/source.sln Commit Messages Use Conventional Commits: feat: for new features fix: for bug fixes docs: for documentation changes refactor: for code refactoring test: for adding tests Testing Running Tests # Run all tests dotnet test source/source.sln # Run with coverage dotnet test source/source.sln --collect:\"XPlat Code Coverage\" Writing Tests Create test classes in appropriate test projects Use xUnit framework Follow AAA pattern (Arrange, Act, Assert) Mock external dependencies Debugging Visual Studio/VS Code Set breakpoints in your code Press F5 to start debugging The bot will start with debugger attached Docker Debugging # Build debug image docker build -t amiquin:debug . # Run with debug ports exposed docker run -p 5000:5000 amiquin:debug Contributing Fork the repository on GitHub Create a feature branch from main Make your changes following the style guidelines Add tests for new functionality Ensure all tests pass and code is formatted Create a pull request with a clear description Pull Request Process Update documentation if needed Add tests for new features Ensure CI/CD passes Request review from maintainers Address any feedback Merge after approval Useful Commands # Build solution dotnet build source/source.sln # Run bot locally dotnet run --project source/Amiquin.Bot # Format code dotnet format source/source.sln # Run tests dotnet test source/source.sln # Create migration dotnet ef migrations add MigrationName --project source/Migrations/Amiquin.Sqlite # Update database dotnet ef database update --project source/Migrations/Amiquin.Sqlite # Build Docker image docker build -t amiquin . # Run with Docker Compose docker-compose up -d Getting Help Documentation: Check this documentation and inline code comments Issues: Create an issue on GitHub for bugs or feature requests Discussions: Use GitHub Discussions for questions and ideas Discord: Join our development Discord server for real-time help"
  },
  "docs/getting-started.html": {
    "href": "docs/getting-started.html",
    "title": "Getting Started with Amiquin | Amiquin Documentation",
    "summary": "Getting Started with Amiquin This guide will help you get Amiquin up and running in your Discord server quickly. Prerequisites Before you begin, make sure you have: A Discord server where you have administrative permissions The ability to add bots to your Discord server Quick Setup Step 1: Invite Amiquin to Your Server Click on the Amiquin Invite Link Select the Discord server you want to add Amiquin to Grant the requested permissions Click \"Authorize\" Step 2: Verify Installation Once Amiquin is added to your server: Look for Amiquin in your server's member list Type /help in any text channel to see available commands The bot should respond with a list of commands Step 3: Basic Configuration Configure Amiquin for your server: /config set welcome_channel #general /config set log_channel #bot-logs First Commands to Try Here are some basic commands to test Amiquin: /help - Show all available commands /ping - Check if the bot is responsive /info - Display bot information /about - Learn about Amiquin Next Steps Learn about all available commands Configure advanced settings Set up logging and moderation Need Help? If you encounter any issues: Check the troubleshooting guide Join our support Discord server Create an issue on GitHub"
  },
  "docs/git-setup.html": {
    "href": "docs/git-setup.html",
    "title": "Git Configuration Setup for Cross-Platform Development | Amiquin Documentation",
    "summary": "Git Configuration Setup for Cross-Platform Development This document explains how to configure Git for consistent line endings across different operating systems. TL;DR: We use LF line endings for ALL files in the repository. This is the modern standard and works perfectly on all platforms including Windows. Automatic Setup (Recommended) Run the appropriate command for your operating system: Windows (PowerShell) git config --global core.autocrlf false git config --global core.eol lf macOS/Linux (Bash) git config --global core.autocrlf false git config --global core.eol lf Manual Configuration Alternatively, you can manually configure Git by adding these lines to your global .gitconfig file: [core] autocrlf = false eol = lf Why LF for Everything? Universal: Works on Windows, macOS, and Linux Standard: Git, GitHub, and most tools expect LF Smaller: LF is 1 byte vs CRLF's 2 bytes No Conversion: Eliminates line ending issues completely Modern: All modern Windows tools handle LF perfectly What This Does .gitattributes: Forces LF line endings for all text files in the repository .editorconfig: Configures your editor to use LF line endings Git config: Disables automatic conversion, uses LF everywhere Troubleshooting If you still see line ending issues after setup: Reset line endings in existing files: git rm --cached -r . git reset --hard Check current Git configuration: git config --list | grep -E \"(autocrlf|eol)\" Verify file line endings: file -b path/to/file.cs"
  },
  "docs/index.html": {
    "href": "docs/index.html",
    "title": "Documentation Overview | Amiquin Documentation",
    "summary": "Documentation Overview Welcome to the Amiquin documentation! This section contains comprehensive guides for users and developers. User Documentation Learn how to use and configure Amiquin for your Discord server: Getting Started - Quick start guide Installation - How to add the bot to your server Configuration - Setting up bot preferences Commands - Complete command reference Developer Documentation Technical documentation for contributors and developers: Development Setup - Local development environment Architecture - System design overview Contributing - How to contribute to the project API Reference For detailed API documentation, see the API Reference section."
  },
  "docs/installation.html": {
    "href": "docs/installation.html",
    "title": "Installation Guide | Amiquin Documentation",
    "summary": "Installation Guide This guide covers different ways to install and deploy Amiquin. For Discord Server Owners Option 1: Invite Public Bot (Recommended) The easiest way to get Amiquin in your server: Use the invite link: Add Amiquin to your server Select your server from the dropdown Review permissions and click \"Authorize\" Verify the bot appears in your member list Required Permissions Amiquin needs these permissions to function properly: Send Messages - To respond to commands Embed Links - To send rich message embeds Use Slash Commands - For modern Discord commands Read Message History - For context-aware features Manage Messages - For moderation features (optional) Connect & Speak - For voice features (optional) For Self-Hosting Option 2: Docker (Recommended for Self-Hosting) Run Amiquin using Docker: # Pull the latest image docker pull ghcr.io/huebyte/amiquin:latest # Run with environment variables docker run -d \\ --name amiquin \\ -e DISCORD_TOKEN=your_bot_token \\ -e DATABASE_CONNECTION=your_db_connection \\ ghcr.io/huebyte/amiquin:latest Option 3: Docker Compose Use the provided docker-compose.yml: # Copy environment file cp .env.example .env # Edit environment variables nano .env # Start the services docker-compose up -d Option 4: Manual Installation For development or custom deployments: Prerequisites .NET 9.0 SDK Git Database (MySQL/SQLite) Steps Clone the repository: git clone https://github.com/huebyte/Amiquin.git cd Amiquin Configure settings: cp source/Amiquin.Bot/appsettings.example.json source/Amiquin.Bot/appsettings.json # Edit appsettings.json with your configuration Build and run: dotnet restore dotnet build dotnet run --project source/Amiquin.Bot Environment Configuration Required Environment Variables # Discord Bot Token (Required) DISCORD_TOKEN=your_discord_bot_token # Database Configuration DATABASE_TYPE=sqlite # or mysql DATABASE_CONNECTION=Data Source=amiquin.db # Optional Configuration LOG_LEVEL=Information ENVIRONMENT=Production Creating a Discord Bot To get a Discord bot token: Go to Discord Developer Portal Click \"New Application\" Navigate to \"Bot\" section Click \"Add Bot\" Copy the token from \"Token\" section Enable necessary Privileged Gateway Intents if needed Database Setup SQLite (Default) No additional setup required. The database file will be created automatically. MySQL Create database: CREATE DATABASE amiquin; CREATE USER 'amiquin'@'%' IDENTIFIED BY 'your_password'; GRANT ALL PRIVILEGES ON amiquin.* TO 'amiquin'@'%'; Update connection string: DATABASE_TYPE=mysql DATABASE_CONNECTION=Server=localhost;Database=amiquin;User=amiquin;Password=your_password; Verification After installation, verify Amiquin is working: Check bot status - Bot should appear online in Discord Test basic command - Try /ping or /help Check logs - Review application logs for any errors Troubleshooting Common Issues Bot appears offline: Check Discord token and internet connection Commands not working: Verify bot permissions and slash command registration Database errors: Check database connection string and permissions Getting Help Check configuration guide Join our Discord server Create an issue on GitHub"
  },
  "index.html": {
    "href": "index.html",
    "title": "Amiquin Documentation | Amiquin Documentation",
    "summary": "Amiquin Documentation Welcome to the official documentation for Amiquin, a Discord bot built with .NET 9.0 and Discord.Net. \uD83E\uDD16 What is Amiquin? Amiquin is a feature-rich Discord bot designed to enhance your server experience with various utilities, entertainment features, and administrative tools. Built with modern .NET technology, it provides reliable and efficient performance for Discord communities. \uD83D\uDE80 Quick Start For Users Getting Started Commands Reference Configuration Guide For Developers API Reference Development Setup Contributing Guidelines \uD83D\uDCDA Documentation Sections User Guides Installation - How to add Amiquin to your Discord server Configuration - Setting up bot preferences and permissions Commands - Complete list of available commands and features Developer Documentation API Reference - Detailed API documentation Architecture - System design and component overview Development Setup - Local development environment setup Contributing - How to contribute to the project \uD83C\uDFD7️ Architecture Overview Amiquin is built with a clean architecture approach: Amiquin.Bot - Main bot application and command handlers Amiquin.Core - Core business logic and domain models Amiquin.Infrastructure - Data access and external service integrations \uD83D\uDD27 Technology Stack .NET 9.0 - Modern .NET runtime Discord.Net - Discord API wrapper Entity Framework Core - Database ORM Serilog - Structured logging Docker - Containerization support \uD83D\uDCDE Support & Community GitHub Issues - Report bugs or request features Discussions - Community discussions and support Discord Server - Join our community \uD83D\uDCC4 License This project is licensed under the MIT License. Last updated: July 2025"
  }
}