#!/usr/bin/env pwsh
<#
.SYNOPSIS
    Setup script for Amiquin project configuration
.DESCRIPTION
    Interactive setup script that prompts for critical configuration values and sets up the Amiquin project
#>

param(
    [switch]$Help,
    [switch]$NonInteractive,
    [switch]$Default
)

if ($Help) {
    Write-Host "Amiquin Project Setup Script" -ForegroundColor Cyan
    Write-Host ""
    Write-Host "This script will configure your Amiquin project by:"
    Write-Host "  - Creating configuration files from templates"
    Write-Host "  - Prompting for OpenAI API Key (optional)"
    Write-Host "  - Setting up data directories"
    Write-Host "  - Building the solution"
    Write-Host ""
    Write-Host "Usage:"
    Write-Host "  ./setup-project.ps1           # Interactive mode (recommended)"
    Write-Host "  ./setup-project.ps1 -Default  # Interactive with sensible defaults"
    Write-Host "  ./setup-project.ps1 -NonInteractive  # Automated setup with defaults"
    Write-Host "  ./setup-project.ps1 -Help     # Show this help"
    exit 0
}

Write-Host "=== Amiquin Project Setup ===" -ForegroundColor Cyan
Write-Host ""

# Configuration values
$config = @{
    # Chat configuration
    ChatAuthToken = ""
    ChatSystemMessage = "I want you to act as personal assistant called Amiquin. You are friendly, helpful and professional."
    ChatTokenLimit = 2000
    ChatEnabled = $true
    ChatModel = "gpt-4o-mini"
    
    # Database
    DatabaseConnection = "Data Source=Data/Database/amiquin.db"
    
    # Data paths
    LogsPath = "Data/Logs"
    MessagesPath = "Data/Messages"
    SessionsPath = "Data/Sessions"
    PluginsPath = "Data/Plugins"
    ConfigurationPath = "Configuration"
}

# Generate secure defaults
function New-SecureString {
    param([int]$Length = 32)
    $chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789!@#$%^&*'
    $random = New-Object System.Random
    $result = ""
    for ($i = 0; $i -lt $Length; $i++) {
        $result += $chars[$random.Next($chars.Length)]
    }
    return $result
}

# Create directories
function Ensure-Directory {
    param([string]$Path)
    if (!(Test-Path $Path)) {
        New-Item -ItemType Directory -Path $Path -Force | Out-Null
        Write-Host "Created directory: $Path" -ForegroundColor Green
    }
}

if ($NonInteractive) {
    Write-Host "Running in non-interactive mode with default values" -ForegroundColor Yellow
} else {
    Write-Host "This script will configure your Amiquin project with the necessary settings." -ForegroundColor Green
    Write-Host "Press Enter to use default values shown in [brackets]" -ForegroundColor Gray
    Write-Host ""
    
    # OpenAI Configuration
    Write-Host "=== AI Configuration ===" -ForegroundColor Cyan
    $chatAuthToken = Read-Host "Enter OpenAI API Key (required for AI features) [leave empty to configure later]"
    if ($chatAuthToken) { 
        $config.ChatAuthToken = $chatAuthToken 
        Write-Host "OpenAI API key configured successfully" -ForegroundColor Green
    } else {
        Write-Host "OpenAI API key will need to be configured later for AI features to work" -ForegroundColor Yellow
    }
    
    # System Message
    if ($Default) {
        Write-Host "Using default system message for Amiquin" -ForegroundColor Gray
    } else {
        $systemMessage = Read-Host "Enter AI system message [$($config.ChatSystemMessage)]"
        if ($systemMessage) { $config.ChatSystemMessage = $systemMessage }
    }
    
    # Model selection
    if (!$NonInteractive -and !$Default) {
        Write-Host ""
        Write-Host "Select AI Model:" -ForegroundColor Cyan
        Write-Host "1. gpt-4o-mini (default - faster, cheaper)"
        Write-Host "2. gpt-4o (more capable, more expensive)"
        Write-Host "3. gpt-3.5-turbo (legacy, cheapest)"
        $modelChoice = Read-Host "Enter choice [1]"
        
        switch ($modelChoice) {
            "2" { $config.ChatModel = "gpt-4o" }
            "3" { $config.ChatModel = "gpt-3.5-turbo" }
            default { $config.ChatModel = "gpt-4o-mini" }
        }
    }
}

# Create .env file
Write-Host ""
Write-Host "Creating .env file..." -ForegroundColor Cyan

$envContent = @"
# Amiquin Environment Configuration
# Generated by setup script on $(Get-Date -Format "yyyy-MM-dd HH:mm:ss")
# All configuration values can override appsettings.json using AMIQUIN_ prefix

# ======================
# OpenAI Configuration (for AI features)
# ======================
$(if ($config.ChatAuthToken) { "OPENAI_API_KEY=$($config.ChatAuthToken)" } else { "# OPENAI_API_KEY=sk-your-openai-api-key-here" })
$(if ($config.ChatAuthToken) { "AMIQUIN_Chat__AuthToken=$($config.ChatAuthToken)" } else { "# AMIQUIN_Chat__AuthToken=sk-your-openai-api-key-here" })
AMIQUIN_Chat__SystemMessage=$($config.ChatSystemMessage)
AMIQUIN_Chat__TokenLimit=$($config.ChatTokenLimit)
AMIQUIN_Chat__Enabled=$($config.ChatEnabled.ToString().ToLower())
AMIQUIN_Chat__Model=$($config.ChatModel)

# ======================
# Database Configuration (SQLite default)
# ======================
AMIQUIN_ConnectionStrings__AmiquinContext=$($config.DatabaseConnection)

# ======================
# Data Paths Configuration
# ======================
AMIQUIN_DataPaths__Logs=$($config.LogsPath)
AMIQUIN_DataPaths__Messages=$($config.MessagesPath)
AMIQUIN_DataPaths__Sessions=$($config.SessionsPath)
AMIQUIN_DataPaths__Plugins=$($config.PluginsPath)
AMIQUIN_DataPaths__Configuration=$($config.ConfigurationPath)

# ======================
# Session Management Configuration
# ======================
AMIQUIN_SessionManagement__MaxSessionsPerUser=5
AMIQUIN_SessionManagement__InactivityTimeoutMinutes=120
AMIQUIN_SessionManagement__CleanupIntervalMinutes=30
AMIQUIN_SessionManagement__MaxHistoryLength=50

# ======================
# Logging Configuration
# ======================
AMIQUIN_Serilog__MinimumLevel__Default=Information
AMIQUIN_Serilog__WriteTo__1__Args__path=$($config.LogsPath)/amiquin-.log
AMIQUIN_Serilog__WriteTo__1__Args__rollingInterval=Day
AMIQUIN_Serilog__WriteTo__1__Args__retainedFileCountLimit=7
AMIQUIN_Serilog__Properties__Application=Amiquin

# ======================
# Optional Configuration Overrides
# ======================
# Uncomment and customize as needed:

# Custom logging levels
# AMIQUIN_Serilog__MinimumLevel__Override__System=Warning
# AMIQUIN_Serilog__MinimumLevel__Override__Microsoft=Warning
"@

$envPath = Join-Path $PSScriptRoot ".." ".env"
Set-Content -Path $envPath -Value $envContent -Encoding UTF8
Write-Host "Created .env file" -ForegroundColor Green

# Create appsettings.json in the proper location
Write-Host "Creating appsettings.json..." -ForegroundColor Cyan

$configDir = Join-Path $PSScriptRoot ".." "source" "Amiquin.Bot" "Configuration"
Ensure-Directory $configDir

$appSettingsPath = Join-Path $configDir "appsettings.json"

# Create appsettings.json - use the new improved structure
$appSettings = @{
    Chat = @{
        AuthToken = if ($config.ChatAuthToken) { $config.ChatAuthToken } else { "your-openai-api-key" }
        SystemMessage = $config.ChatSystemMessage
        TokenLimit = $config.ChatTokenLimit
        Enabled = $config.ChatEnabled
        Model = $config.ChatModel
    }
    ConnectionStrings = @{
        AmiquinContext = $config.DatabaseConnection
    }
    DataPaths = @{
        Logs = $config.LogsPath
        Messages = $config.MessagesPath
        Sessions = $config.SessionsPath
        Plugins = $config.PluginsPath
        Configuration = $config.ConfigurationPath
    }
    SessionManagement = @{
        MaxSessionsPerUser = 5
        InactivityTimeoutMinutes = 120
        CleanupIntervalMinutes = 30
        MaxHistoryLength = 50
    }
    Serilog = @{
        MinimumLevel = @{
            Default = "Information"
            Override = @{
                System = "Warning"
                Microsoft = "Warning"
                Discord = "Information"
            }
        }
        WriteTo = @(
            @{ Name = "Console" }
            @{
                Name = "File"
                Args = @{
                    path = "$($config.LogsPath)/amiquin-.log"
                    rollingInterval = "Day"
                    retainedFileCountLimit = 7
                    outputTemplate = "[{Timestamp:yyyy-MM-dd HH:mm:ss.fff zzz}] [{Level:u3}] [{SourceContext}] {Message:lj}{NewLine}{Exception}"
                }
            }
        )
        Enrich = @("FromLogContext", "WithThreadId", "WithEnvironmentName")
        Properties = @{
            Application = "Amiquin"
        }
    }
}

$appSettingsJson = $appSettings | ConvertTo-Json -Depth 10
Set-Content -Path $appSettingsPath -Value $appSettingsJson -Encoding UTF8
Write-Host "Created appsettings.json" -ForegroundColor Green

# Create data directories
Write-Host ""
Write-Host "Creating data directories..." -ForegroundColor Cyan

$dataDir = Join-Path $PSScriptRoot ".." "Data"
Ensure-Directory $dataDir
Ensure-Directory (Join-Path $dataDir "Logs")
Ensure-Directory (Join-Path $dataDir "Database")
Ensure-Directory (Join-Path $dataDir "Messages")
Ensure-Directory (Join-Path $dataDir "Sessions")
Ensure-Directory (Join-Path $dataDir "Plugins")

# Check if solution exists and build
$solutionPath = Join-Path $PSScriptRoot ".." "source" "source.sln"
if (Test-Path $solutionPath) {
    Write-Host ""
    Write-Host "Building solution..." -ForegroundColor Cyan
    Push-Location (Join-Path $PSScriptRoot ".." "source")
    
    # Restore dependencies
    Write-Host "Restoring NuGet packages..." -ForegroundColor Cyan
    dotnet restore source.sln
    
    # Build solution
    dotnet build source.sln --configuration Release
    
    Pop-Location
    
    if ($LASTEXITCODE -eq 0) {
        Write-Host "Solution built successfully" -ForegroundColor Green
    } else {
        Write-Host "Build failed. Please check the errors above." -ForegroundColor Red
    }
} else {
    Write-Host "Solution file not found at expected location: $solutionPath" -ForegroundColor Yellow
}

# Summary
Write-Host ""
Write-Host "=== Setup Complete ===" -ForegroundColor Green
Write-Host ""
Write-Host "Configuration files created:" -ForegroundColor Cyan
Write-Host "  - .env (Environment variables)"
Write-Host "  - source/Amiquin.Bot/Configuration/appsettings.json (Application configuration)"
Write-Host "  - source/Amiquin.Bot/Configuration/appsettings.example.json (Template for other developers)"
Write-Host ""
Write-Host "Data directories created:" -ForegroundColor Cyan
Write-Host "  - Data/Logs (Application logs)"
Write-Host "  - Data/Database (SQLite database)"
Write-Host "  - Data/Messages (Message storage)"
Write-Host "  - Data/Sessions (Session storage)"
Write-Host "  - Data/Plugins (Plugin storage)"
Write-Host ""

# Show warnings for missing configuration
$hasWarnings = $false

if (-not $config.ChatAuthToken) {
    if (-not $hasWarnings) {
        Write-Host "IMPORTANT: Missing configuration" -ForegroundColor Yellow
        Write-Host "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
        $hasWarnings = $true
    }
    Write-Host "  • OpenAI API Key: Required for AI chat features" -ForegroundColor Yellow
    Write-Host "    - Update 'OPENAI_API_KEY' and 'AMIQUIN_Chat__AuthToken' in .env file"
}

Write-Host ""
Write-Host "Next steps:" -ForegroundColor Yellow

$stepNumber = 1

if (-not $config.ChatAuthToken) {
    Write-Host "$stepNumber. Add your OpenAI API key to .env file (for AI features)"
    $stepNumber++
}

if (Test-Path $solutionPath) {
    Write-Host "$stepNumber. Run database migrations (if needed):"
    Write-Host "   dotnet ef database update -p source/Amiquin.Infrastructure -s source/Amiquin.Bot"
    $stepNumber++
    
    Write-Host "$stepNumber. Start the application:"
    Write-Host "   cd source/Amiquin.Bot && dotnet run"
} else {
    Write-Host "$stepNumber. Check that the solution exists at: source/source.sln"
}

Write-Host ""
Write-Host "All configuration values can be overridden using environment variables with AMIQUIN_ prefix." -ForegroundColor Gray
Write-Host "For more information, see the documentation at dev/docs/" -ForegroundColor Gray
Write-Host ""