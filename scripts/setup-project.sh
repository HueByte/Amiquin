#!/bin/bash

# Amiquin Project Setup Script for Linux/macOS
# Interactive setup script that configures the Amiquin project

set -e  # Exit on error

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

# Script directory
SCRIPT_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
PROJECT_ROOT="$(dirname "$SCRIPT_DIR")"

# Parse arguments
HELP=false
NON_INTERACTIVE=false
DEFAULT=false

while [[ $# -gt 0 ]]; do
    case $1 in
        --help|-h)
            HELP=true
            shift
            ;;
        --non-interactive)
            NON_INTERACTIVE=true
            shift
            ;;
        --default)
            DEFAULT=true
            shift
            ;;
        *)
            echo "Unknown option: $1"
            exit 1
            ;;
    esac
done

# Show help
if [ "$HELP" = true ]; then
    echo -e "${CYAN}Amiquin Project Setup Script${NC}"
    echo ""
    echo "This script will configure your Amiquin project by:"
    echo "  - Creating configuration files from templates"
    echo "  - Prompting for OpenAI API Key (optional)"
    echo "  - Setting up data directories"
    echo "  - Building the solution"
    echo ""
    echo "Usage:"
    echo "  ./setup-project.sh              # Interactive mode (recommended)"
    echo "  ./setup-project.sh --default    # Interactive with sensible defaults"
    echo "  ./setup-project.sh --non-interactive  # Automated setup with defaults"
    echo "  ./setup-project.sh --help       # Show this help"
    exit 0
fi

echo -e "${CYAN}=== Amiquin Project Setup ===${NC}"
echo ""

# Configuration defaults
CHAT_AUTH_TOKEN=""
CHAT_SYSTEM_MESSAGE="I want you to act as personal assistant called Amiquin. You are friendly, helpful and professional."
CHAT_TOKEN_LIMIT=2000
CHAT_ENABLED="true"
CHAT_MODEL="gpt-4o-mini"
DATABASE_CONNECTION="Data Source=Data/Database/amiquin.db"
LOGS_PATH="Data/Logs"
MESSAGES_PATH="Data/Messages"
SESSIONS_PATH="Data/Sessions"
PLUGINS_PATH="Data/Plugins"
CONFIGURATION_PATH="Configuration"

# Function to create directory
ensure_directory() {
    local dir="$1"
    if [ ! -d "$dir" ]; then
        mkdir -p "$dir"
        echo -e "${GREEN}Created directory: $dir${NC}"
    fi
}

# Function to generate secure string
generate_secure_string() {
    local length=${1:-32}
    openssl rand -base64 $length | tr -d "=+/" | cut -c1-$length 2>/dev/null || echo "$(date +%s)_$(whoami)_$(hostname)"
}

# Interactive prompts
if [ "$NON_INTERACTIVE" = true ]; then
    echo -e "${YELLOW}Running in non-interactive mode with default values${NC}"
else
    echo -e "${GREEN}This script will configure your Amiquin project with the necessary settings.${NC}"
    echo -e "Press Enter to use default values shown in [brackets]"
    echo ""
    
    # OpenAI Configuration
    echo -e "${CYAN}=== AI Configuration ===${NC}"
    read -p "Enter OpenAI API Key (required for AI features) [leave empty to configure later]: " input
    if [ ! -z "$input" ]; then
        CHAT_AUTH_TOKEN="$input"
        echo -e "${GREEN}OpenAI API key configured successfully${NC}"
    else
        echo -e "${YELLOW}OpenAI API key will need to be configured later for AI features to work${NC}"
    fi
    
    # System Message
    if [ "$DEFAULT" = false ]; then
        read -p "Enter AI system message [$CHAT_SYSTEM_MESSAGE]: " input
        if [ ! -z "$input" ]; then
            CHAT_SYSTEM_MESSAGE="$input"
        fi
        
        # Model selection
        echo ""
        echo -e "${CYAN}Select AI Model:${NC}"
        echo "1. gpt-4o-mini (default - faster, cheaper)"
        echo "2. gpt-4o (more capable, more expensive)"
        echo "3. gpt-3.5-turbo (legacy, cheapest)"
        read -p "Enter choice [1]: " model_choice
        
        case $model_choice in
            2)
                CHAT_MODEL="gpt-4o"
                ;;
            3)
                CHAT_MODEL="gpt-3.5-turbo"
                ;;
            *)
                CHAT_MODEL="gpt-4o-mini"
                ;;
        esac
    else
        echo -e "Using default system message for Amiquin"
    fi
fi

# Create .env file
echo ""
echo -e "${CYAN}Creating .env file...${NC}"

ENV_PATH="$PROJECT_ROOT/.env"

cat > "$ENV_PATH" << EOF
# Amiquin Environment Configuration
# Generated by setup script on $(date '+%Y-%m-%d %H:%M:%S')
# All configuration values can override appsettings.json using AMIQUIN_ prefix

# ======================
# OpenAI Configuration (for AI features)
# ======================
$(if [ ! -z "$CHAT_AUTH_TOKEN" ]; then echo "OPENAI_API_KEY=$CHAT_AUTH_TOKEN"; else echo "# OPENAI_API_KEY=sk-your-openai-api-key-here"; fi)
$(if [ ! -z "$CHAT_AUTH_TOKEN" ]; then echo "AMIQUIN_Chat__AuthToken=$CHAT_AUTH_TOKEN"; else echo "# AMIQUIN_Chat__AuthToken=sk-your-openai-api-key-here"; fi)
AMIQUIN_Chat__SystemMessage=$CHAT_SYSTEM_MESSAGE
AMIQUIN_Chat__TokenLimit=$CHAT_TOKEN_LIMIT
AMIQUIN_Chat__Enabled=$CHAT_ENABLED
AMIQUIN_Chat__Model=$CHAT_MODEL

# ======================
# Database Configuration (SQLite default)
# ======================
# Provider-specific Connection Strings (Recommended)
AMIQUIN_ConnectionStrings__Amiquin-Sqlite=$DATABASE_CONNECTION
# AMIQUIN_ConnectionStrings__Amiquin-Mysql=Server=localhost;Database=amiquin_db;Uid=amiquin_user;Pwd=amiquin_password;Pooling=True;

# Legacy Connection String (for backward compatibility)
AMIQUIN_ConnectionStrings__AmiquinContext=$DATABASE_CONNECTION

# ======================
# Data Paths Configuration
# ======================
AMIQUIN_DataPaths__Logs=$LOGS_PATH
AMIQUIN_DataPaths__Messages=$MESSAGES_PATH
AMIQUIN_DataPaths__Sessions=$SESSIONS_PATH
AMIQUIN_DataPaths__Plugins=$PLUGINS_PATH
AMIQUIN_DataPaths__Configuration=$CONFIGURATION_PATH

# ======================
# Session Management Configuration
# ======================
AMIQUIN_SessionManagement__MaxSessionsPerUser=5
AMIQUIN_SessionManagement__InactivityTimeoutMinutes=120
AMIQUIN_SessionManagement__CleanupIntervalMinutes=30
AMIQUIN_SessionManagement__MaxHistoryLength=50

# ======================
# Logging Configuration
# ======================
AMIQUIN_Serilog__MinimumLevel__Default=Information
AMIQUIN_Serilog__WriteTo__1__Args__path=$LOGS_PATH/amiquin-.log
AMIQUIN_Serilog__WriteTo__1__Args__rollingInterval=Day
AMIQUIN_Serilog__WriteTo__1__Args__retainedFileCountLimit=7
AMIQUIN_Serilog__Properties__Application=Amiquin

# ======================
# Optional Configuration Overrides
# ======================
# Uncomment and customize as needed:

# Custom logging levels
# AMIQUIN_Serilog__MinimumLevel__Override__System=Warning
# AMIQUIN_Serilog__MinimumLevel__Override__Microsoft=Warning
EOF

echo -e "${GREEN}Created .env file${NC}"

# Create Configuration directory and appsettings.json
echo -e "${CYAN}Creating appsettings.json...${NC}"

CONFIG_DIR="$PROJECT_ROOT/source/Amiquin.Bot/Configuration"
ensure_directory "$CONFIG_DIR"

APPSETTINGS_PATH="$CONFIG_DIR/appsettings.json"

# Create appsettings.json
if [ ! -z "$CHAT_AUTH_TOKEN" ]; then
    AUTH_TOKEN_VALUE="\"$CHAT_AUTH_TOKEN\""
else
    AUTH_TOKEN_VALUE="\"your-openai-api-key\""
fi

cat > "$APPSETTINGS_PATH" << EOF
{
  "Chat": {
    "AuthToken": $AUTH_TOKEN_VALUE,
    "SystemMessage": "$CHAT_SYSTEM_MESSAGE",
    "TokenLimit": $CHAT_TOKEN_LIMIT,
    "Enabled": $CHAT_ENABLED,
    "Model": "$CHAT_MODEL"
  },
  "ConnectionStrings": {
    "AmiquinContext": "$DATABASE_CONNECTION",
    "Amiquin-Sqlite": "Data Source=Data/Database/amiquin.db",
    "Amiquin-Mysql": "Server=localhost;Database=amiquin;User=amiquin;Password=your_password;Pooling=True;"
  },
  "DataPaths": {
    "Logs": "$LOGS_PATH",
    "Messages": "$MESSAGES_PATH",
    "Sessions": "$SESSIONS_PATH",
    "Plugins": "$PLUGINS_PATH",
    "Configuration": "$CONFIGURATION_PATH"
  },
  "SessionManagement": {
    "MaxSessionsPerUser": 5,
    "InactivityTimeoutMinutes": 120,
    "CleanupIntervalMinutes": 30,
    "MaxHistoryLength": 50
  },
  "Serilog": {
    "MinimumLevel": {
      "Default": "Information",
      "Override": {
        "System": "Warning",
        "Microsoft": "Warning",
        "Discord": "Information"
      }
    },
    "WriteTo": [
      {
        "Name": "Console"
      },
      {
        "Name": "File",
        "Args": {
          "path": "$LOGS_PATH/amiquin-.log",
          "rollingInterval": "Day",
          "retainedFileCountLimit": 7,
          "outputTemplate": "[{Timestamp:yyyy-MM-dd HH:mm:ss.fff zzz}] [{Level:u3}] [{SourceContext}] {Message:lj}{NewLine}{Exception}"
        }
      }
    ],
    "Enrich": ["FromLogContext", "WithThreadId", "WithEnvironmentName"],
    "Properties": {
      "Application": "Amiquin"
    }
  }
}
EOF

echo -e "${GREEN}Created appsettings.json${NC}"

# Create data directories
echo ""
echo -e "${CYAN}Creating data directories...${NC}"

DATA_DIR="$PROJECT_ROOT/Data"
ensure_directory "$DATA_DIR"
ensure_directory "$DATA_DIR/Logs"
ensure_directory "$DATA_DIR/Database"
ensure_directory "$DATA_DIR/Messages"
ensure_directory "$DATA_DIR/Sessions"
ensure_directory "$DATA_DIR/Plugins"

# Check if solution exists and build
SOLUTION_PATH="$PROJECT_ROOT/source/source.sln"
if [ -f "$SOLUTION_PATH" ]; then
    echo ""
    echo -e "${CYAN}Building solution...${NC}"
    
    cd "$PROJECT_ROOT/source"
    
    # Restore dependencies
    echo -e "${CYAN}Restoring NuGet packages...${NC}"
    dotnet restore source.sln
    
    # Build solution
    dotnet build source.sln --configuration Release
    
    if [ $? -eq 0 ]; then
        echo -e "${GREEN}Solution built successfully${NC}"
    else
        echo -e "${RED}Build failed. Please check the errors above.${NC}"
    fi
else
    echo -e "${YELLOW}Solution file not found at expected location: $SOLUTION_PATH${NC}"
fi

# Summary
echo ""
echo -e "${GREEN}=== Setup Complete ===${NC}"
echo ""
echo -e "${CYAN}Configuration files created:${NC}"
echo "  - .env (Environment variables)"
echo "  - source/Amiquin.Bot/Configuration/appsettings.json (Application configuration)"
echo "  - source/Amiquin.Bot/Configuration/appsettings.example.json (Template for other developers)"
echo ""
echo -e "${CYAN}Data directories created:${NC}"
echo "  - Data/Logs (Application logs)"
echo "  - Data/Database (SQLite database)"
echo "  - Data/Messages (Message storage)"
echo "  - Data/Sessions (Session storage)"
echo "  - Data/Plugins (Plugin storage)"
echo ""

# Show warnings for missing configuration
if [ -z "$CHAT_AUTH_TOKEN" ]; then
    echo -e "${YELLOW}IMPORTANT: Missing configuration${NC}"
    echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
    echo -e "${YELLOW}  • OpenAI API Key: Required for AI chat features${NC}"
    echo "    - Update 'OPENAI_API_KEY' and 'AMIQUIN_Chat__AuthToken' in .env file"
    echo ""
fi

echo -e "${YELLOW}Next steps:${NC}"

STEP_NUMBER=1

if [ -z "$CHAT_AUTH_TOKEN" ]; then
    echo "$STEP_NUMBER. Add your OpenAI API key to .env file (for AI features)"
    ((STEP_NUMBER++))
fi

if [ -f "$SOLUTION_PATH" ]; then
    echo "$STEP_NUMBER. Run database migrations (if needed):"
    echo "   dotnet ef database update -p source/Amiquin.Infrastructure -s source/Amiquin.Bot"
    ((STEP_NUMBER++))
    
    echo "$STEP_NUMBER. Start the application:"
    echo "   cd source/Amiquin.Bot && dotnet run"
else
    echo "$STEP_NUMBER. Check that the solution exists at: source/source.sln"
fi

echo ""
echo "All configuration values can be overridden using environment variables with AMIQUIN_ prefix."
echo "For more information, see the documentation at dev/docs/"
echo ""