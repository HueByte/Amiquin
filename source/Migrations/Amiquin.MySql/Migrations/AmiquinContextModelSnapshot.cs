// <auto-generated />
using System;
using Amiquin.Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Amiquin.MySql.Migrations
{
    [DbContext(typeof(AmiquinContext))]
    partial class AmiquinContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("Amiquin.Core.Models.BotStatistics", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<float>("AvailableMemoryMB")
                        .HasColumnType("float");

                    b.Property<double>("AverageCommandExecutionTimeInMs")
                        .HasColumnType("double");

                    b.Property<string>("BotName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("CacheItems")
                        .HasColumnType("int");

                    b.Property<double>("CpuUsage")
                        .HasColumnType("double");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("Latency")
                        .HasColumnType("int");

                    b.Property<int>("ShardCount")
                        .HasColumnType("int");

                    b.Property<int>("TotalChannelsCount")
                        .HasColumnType("int");

                    b.Property<int>("TotalCommandsCount")
                        .HasColumnType("int");

                    b.Property<int>("TotalErrorsCount")
                        .HasColumnType("int");

                    b.Property<int>("TotalServersCount")
                        .HasColumnType("int");

                    b.Property<int>("TotalUsersCount")
                        .HasColumnType("int");

                    b.Property<int>("UpTimeInSeconds")
                        .HasColumnType("int");

                    b.Property<float>("UsedMemoryMB")
                        .HasColumnType("float");

                    b.Property<float>("UsedMemoryPercentage")
                        .HasColumnType("float");

                    b.Property<string>("Version")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("BotStatistics");
                });

            modelBuilder.Entity("Amiquin.Core.Models.CommandLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Command")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("CommandDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("Duration")
                        .HasColumnType("int");

                    b.Property<string>("ErrorMessage")
                        .HasColumnType("longtext");

                    b.Property<bool>("IsSuccess")
                        .HasColumnType("tinyint(1)");

                    b.Property<ulong>("ServerId")
                        .HasColumnType("bigint unsigned");

                    b.Property<ulong>("UserId")
                        .HasColumnType("bigint unsigned");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("ServerId");

                    b.ToTable("CommandLogs");
                });

            modelBuilder.Entity("Amiquin.Core.Models.Message", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<ulong>("AuthorId")
                        .HasColumnType("bigint unsigned");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<ulong>("GuildId")
                        .HasColumnType("bigint unsigned");

                    b.Property<bool>("IsUser")
                        .HasColumnType("tinyint(1)");

                    b.Property<ulong>("ServerId")
                        .HasColumnType("bigint unsigned");

                    b.HasKey("Id");

                    b.HasIndex("ServerId");

                    b.ToTable("Messages");
                });

            modelBuilder.Entity("Amiquin.Core.Models.NachoPack", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("NachoCount")
                        .HasColumnType("int");

                    b.Property<DateTime>("NachoReceivedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<ulong>("ServerId")
                        .HasColumnType("bigint unsigned");

                    b.Property<ulong>("UserId")
                        .HasColumnType("bigint unsigned");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("ServerId");

                    b.ToTable("NachoPacks");
                });

            modelBuilder.Entity("Amiquin.Core.Models.ServerMeta", b =>
                {
                    b.Property<ulong>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint unsigned");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<ulong>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("LastUpdated")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Persona")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("ServerName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("ServerMetas");
                });

            modelBuilder.Entity("Amiquin.Core.Models.Toggle", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<ulong>("ServerId")
                        .HasColumnType("bigint unsigned");

                    b.HasKey("Id");

                    b.HasIndex("ServerId");

                    b.ToTable("Toggles");
                });

            modelBuilder.Entity("Amiquin.Core.Models.CommandLog", b =>
                {
                    b.HasOne("Amiquin.Core.Models.ServerMeta", "Server")
                        .WithMany("CommandLogs")
                        .HasForeignKey("ServerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Server");
                });

            modelBuilder.Entity("Amiquin.Core.Models.Message", b =>
                {
                    b.HasOne("Amiquin.Core.Models.ServerMeta", "Server")
                        .WithMany("Messages")
                        .HasForeignKey("ServerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Server");
                });

            modelBuilder.Entity("Amiquin.Core.Models.NachoPack", b =>
                {
                    b.HasOne("Amiquin.Core.Models.ServerMeta", "Server")
                        .WithMany("NachoPacks")
                        .HasForeignKey("ServerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Server");
                });

            modelBuilder.Entity("Amiquin.Core.Models.Toggle", b =>
                {
                    b.HasOne("Amiquin.Core.Models.ServerMeta", "Server")
                        .WithMany("Toggles")
                        .HasForeignKey("ServerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Server");
                });

            modelBuilder.Entity("Amiquin.Core.Models.ServerMeta", b =>
                {
                    b.Navigation("CommandLogs");

                    b.Navigation("Messages");

                    b.Navigation("NachoPacks");

                    b.Navigation("Toggles");
                });
#pragma warning restore 612, 618
        }
    }
}
