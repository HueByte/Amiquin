# =============================================================================
# Stage 0: Base dependencies layer for caching external dependencies
# =============================================================================
FROM mcr.microsoft.com/dotnet/sdk:9.0 AS dependencies-base
ARG AMQ_BOT_NAME=amiquin
ARG MAIN_WORK_DIR=/home/app/${AMQ_BOT_NAME}

# Install build dependencies in a single layer
RUN apt-get update && apt-get install -y --no-install-recommends \
    build-essential \
    gcc \
    g++ \
    curl \
    tar \
    pkg-config \
    libtool \
    m4 \
    ca-certificates \
    && rm -rf /var/lib/apt/lists/*

# =============================================================================
# Stage 1: libsodium build layer (cached independently)
# =============================================================================
FROM dependencies-base AS libsodium-build
ARG LIBSODIUM_VERSION=1.0.20

# Build and install libsodium with specific version for better caching
RUN curl -L "https://download.libsodium.org/libsodium/releases/libsodium-${LIBSODIUM_VERSION}.tar.gz" | tar xz \
    && cd "libsodium-${LIBSODIUM_VERSION}" \
    && ./configure --enable-minimal --prefix=/opt/libsodium \
    && make -j$(nproc) \
    && make install \
    && cd .. \
    && rm -rf "libsodium-${LIBSODIUM_VERSION}"

# =============================================================================
# Stage 2: opus build layer (cached independently)
# =============================================================================
FROM dependencies-base AS opus-build
ARG OPUS_VERSION=1.5.2

# Build and install libopus with specific version for better caching
RUN curl -L "https://ftp.osuosl.org/pub/xiph/releases/opus/opus-${OPUS_VERSION}.tar.gz" | tar xz \
    && cd "opus-${OPUS_VERSION}" \
    && ./configure --disable-doc --disable-extra-programs --prefix=/opt/opus \
    && make -j$(nproc) \
    && make install \
    && cd .. \
    && rm -rf "opus-${OPUS_VERSION}"

# =============================================================================
# Stage 3: .NET build layer with native dependencies
# =============================================================================
FROM mcr.microsoft.com/dotnet/sdk:9.0 AS build
ARG AMQ_BOT_NAME=amiquin
ARG MAIN_WORK_DIR=/home/app/${AMQ_BOT_NAME}
WORKDIR ${MAIN_WORK_DIR}

# Copy native libraries from dedicated build stages
COPY --from=libsodium-build /opt/libsodium/lib /usr/local/lib
COPY --from=libsodium-build /opt/libsodium/include /usr/local/include
COPY --from=opus-build /opt/opus/lib /usr/local/lib
COPY --from=opus-build /opt/opus/include /usr/local/include

# Update linker cache
RUN ldconfig

# Copy solution and project files for better dependency caching
COPY source.sln ./ 
COPY Amiquin.Bot/Amiquin.Bot.csproj ./Amiquin.Bot/
COPY Amiquin.Core/Amiquin.Core.csproj ./Amiquin.Core/
COPY Amiquin.Infrastructure/Amiquin.Infrastructure.csproj ./Amiquin.Infrastructure/
COPY Migrations/Amiquin.Sqlite/Amiquin.Sqlite.csproj ./Migrations/Amiquin.Sqlite/
COPY Migrations/Amiquin.MySql/Amiquin.MySql.csproj ./Migrations/Amiquin.MySql/
COPY Amiquin.Tests/Amiquin.Tests.csproj ./Amiquin.Tests/
COPY Amiquin.IntegrationTests/Amiquin.IntegrationTests.csproj ./Amiquin.IntegrationTests/

# Restore dependencies (this layer will be cached if project files don't change)
RUN dotnet restore source.sln --runtime linux-x64

# Copy source code and build the application
COPY . ./
RUN dotnet publish Amiquin.Bot/Amiquin.Bot.csproj \
    -c Release \
    -o build \
    --runtime linux-x64 \
    --self-contained false \
    --no-restore

# =============================================================================
# Stage 4: Runtime dependencies layer for caching Python/Piper dependencies
# =============================================================================
FROM mcr.microsoft.com/dotnet/aspnet:9.0 AS runtime-deps
ARG PIPER_VERSION=1.2.0

# Install system runtime dependencies
RUN apt-get update && apt-get install -y --no-install-recommends \
    ffmpeg \
    python3-full \
    python3-pip \
    pipx \
    curl \
    ca-certificates \
    && rm -rf /var/lib/apt/lists/*

# Create temporary user for pipx installation (pipx requires non-root)
RUN useradd -m temp_user

# Install Piper TTS with specific version for better caching
USER temp_user
RUN pipx install piper-tts==${PIPER_VERSION} && pipx ensurepath

# =============================================================================
# Stage 5: Final runtime image
# =============================================================================
FROM mcr.microsoft.com/dotnet/aspnet:9.0 AS runtime
ARG AMQ_BOT_NAME=amiquin
ARG MAIN_WORK_DIR=/home/app/${AMQ_BOT_NAME}
WORKDIR ${MAIN_WORK_DIR}

# Copy runtime dependencies from cached layer
COPY --from=runtime-deps /usr/bin/ffmpeg /usr/bin/ffmpeg
COPY --from=runtime-deps /usr/lib /usr/lib
COPY --from=runtime-deps /lib /lib
COPY --from=runtime-deps /home/temp_user/.local /tmp/.local

# Copy native libraries from build stages
COPY --from=libsodium-build /opt/libsodium/lib /usr/local/lib
COPY --from=opus-build /opt/opus/lib /usr/local/lib

# Update linker cache
RUN ldconfig

# Create Data directory structure at volume mount point (as root)
RUN mkdir -p /Data/Logs \
    && mkdir -p /Data/Database \
    && mkdir -p /Data/Messages \
    && mkdir -p /Data/Sessions

# Create non-root user with proper setup
RUN useradd -ms /bin/bash -u 1000 amiquin \
    && chown -R amiquin:amiquin ${MAIN_WORK_DIR} \
    && chown -R amiquin:amiquin /Data

# Copy Piper TTS installation to amiquin user
USER amiquin
RUN mkdir -p /home/amiquin/.local \
    && cp -r /tmp/.local/* /home/amiquin/.local/ \
    && echo 'export PATH="$PATH:/home/amiquin/.local/bin"' >> /home/amiquin/.bashrc

# Copy application from build stage
COPY --from=build --chown=amiquin:amiquin ${MAIN_WORK_DIR}/build ${MAIN_WORK_DIR}/build

# Set working directory to application
WORKDIR ${MAIN_WORK_DIR}/build

# Ensure appsettings.json exists (copy from example if not present)
RUN if [ ! -f Configuration/appsettings.json ] && [ -f Configuration/appsettings.example.json ]; then \
    cp Configuration/appsettings.example.json Configuration/appsettings.json; \
    fi

# Move any Data folders that were copied from build to the volume location
RUN if [ -d "${MAIN_WORK_DIR}/build/Data" ]; then \
    cp -r ${MAIN_WORK_DIR}/build/Data/* /Data/ 2>/dev/null || true; \
    rm -rf ${MAIN_WORK_DIR}/build/Data; \
    fi

# Set environment variables for data paths (pointing to volume)
ENV AMQ_DataPaths__Logs=/Data/Logs
ENV AMQ_DataPaths__Database=/Data/Database
ENV AMQ_DataPaths__Messages=/Data/Messages
ENV AMQ_DataPaths__Sessions=/Data/Sessions
ENV AMQ_Database__Mode=1
ENV AMQ_ConnectionStrings__AmiquinContext="Data Source=/Data/Database/amiquin.db"
ENV PATH="${PATH}:/home/amiquin/.local/bin"

# Health check for console application - just check if process is running
HEALTHCHECK --interval=30s --timeout=10s --start-period=60s --retries=3 \
    CMD pgrep -f "dotnet.*Amiquin.Bot.dll" || exit 1

# Run the application
ENTRYPOINT ["dotnet", "Amiquin.Bot.dll"]